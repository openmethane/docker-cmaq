name: build_docker

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        platform:
#          - linux/arm64
          - linux/amd64
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    env:
      REGISTRY: ghcr.io
      IMAGE: ghcr.io/openmethane/cmaq
      CMAQ_VERSION: 5.0.2

    outputs:
      digest: ${{ steps.build.outputs.digest }}

    steps:
      # Clone and update submodules
      - name: Checkout
        uses: actions/checkout@v4
      - name: Add SSH private keys for submodule repositories
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.CMAQ_DEPLOY_KEY }}
      - name: Clone submodules
        run: git submodule update --init --recursive --remote
      # Build docker image
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Login to Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: "${{ env.IMAGE }}"
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=${{ env.CMAQ_VERSION }},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
      - name: Build and push image
        uses: docker/build-push-action@v5
        id: build
        with:
          context: .
          build-args: |
            CMAQ_VERSION=${{ env.CMAQ_VERSION }}
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
  test:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: read
    container:
      image: ghcr.io/openmethane/cmaq@${{ needs.build.outputs.digest }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    # Temporary workaround until we can get everything passing
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Fetch the test data and then run pytest
        run: |
          apt update
          apt install -y wget make
          make tests/test-data/mcip
          pytest -r a -v tests
          
