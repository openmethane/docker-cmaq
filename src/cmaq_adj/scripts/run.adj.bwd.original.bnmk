#! /bin/csh -f

# ======================= CCTMv4.7.1 Run Script ===================== #
# Usage: run.cctm >&! run.cctm.log &                                  #
# The following environment variables must be set for this script to  #
# execute properly:                                                   #
#   setenv M3DATA =  input/output data directory                      #
# To report problems or request help with this script/program:        #
#             http://www.cmascenter.org/help_desk.cfm                 #
# =================================================================== #

# source ./setcase_12km_test
set APPL   = adj_emlays
set M3DATA = /home/563/spt563/cmaq/cmaq_adj/data

#> Check that M3DATA is set:
 if ( ! -e $M3DATA ) then
    echo "   $M3DATA path does not exist"
    exit 1
    endif
 echo " "; echo " Input data path, M3DATA set to $M3DATA"; echo " "

#> Set the working directory:
 set BASE     = /home/563/spt563/cmaq/cmaq_adj/scripts

#> Application name (no default)
 if ( ! $?APPL ) then
    echo 'Must set environment variable APPL (application name)'
    exit 1
 endif

#> Run mode: "ser" or "par" (default is par)
set RM       = par
 if ( ! $?RM ) then
    echo 'RM (run mode) was not set; this will be a parallel run'
    set RM = par
 else if ( $RM != 'ser' && $RM != 'par' ) then
    echo 'RM (run mode) was set incorrectly; value must be either ser or par'
    exit 1
 endif

 set YR = 7
 set YER = 07
 set YEAR = 2007
 set MONTH = 06             # does not cross months yet
 set FIRSTDAY  = 20070610   # first day YYYYMMDD
 set LASTDAY   = 20070613   # last day YYYYMMDD
 set DAY1 = 10              # first day
 set EDAY = 13              # end day
 set IDAY = 10              # day for initial conditions

 set APPL_CASE = bwd_CO2only
 set CFG  = $BASE/../BLD_${APPL_CASE}/cfg.bwd
 set EXEC = $BASE/../BLD_${APPL_CASE}/ADJOINT_BWD
 #set CHECK_NLAYS_FRC = $BASE/check_nlays_frc

 cd $BASE; date; cat ${CFG}; echo "    "; set echo
# cd $BASE; date; set timestamp;
# mkdir /big_scratch/temp/bnmk
# cd /big_scratch/temp/bnmk; date; cat ${CFG}; echo "    "; set echo

#> horizontal domain decomposition
# set RM = ser
 if ( $RM == 'ser' ) then
    setenv NPCOL_NPROW "1 1"; set NPROCS   = 1 # single processor setting
 else
#    setenv NPCOL_NPROW "20 12"; set NPROCS   = 240
#    setenv NPCOL_NPROW "4 6"; set NPROCS   = 24
    setenv NPCOL_NPROW "4 4"; set NPROCS   = 16
 endif

#> Switch to the qsub directory; default launch location
 if ( $?PBS_JOBID ) then
    echo Job ID is $PBS_JOBID
    echo Queue is $PBS_O_QUEUE
    echo Working directory is $PBS_O_WORKDIR
    # cd $PBS_O_WORKDIR
    #cd /big_scratch/temp/bnmk
 endif
 echo '>>>>>> start model run at ' `date`
 set echo # Display each line after variables have been substituted

# Directories
 #set PTMP    = $PBS_O_WORKDIR
 #set PTMP    = /nobackupp8/slcapps/cmaqadj/output
 #set PTMP    = /work/MOD3EVAL/has/omi/co_20110224/run
 #set PTMPOUT = $PTMP
 #set BASE    = $PTMP
 #set BASE2   = /nobackupp8/slcapps/cmaqadj/output
# Formerly BASE2 = $PTMP/../code/debug # BLD_N4a also
# set EXEC    = ADJOINT_FWD
 #set FRCDIR  = /nobackup/slcapps/cmaqadj/forcing
 #set OUTDIR  = /nobackup/slcapps/cmaqadj/output  #$PTMPOUT
 #if ( ! -d "$OUTDIR" ) mkdir -p $OUTDIR
 #set OUTDIR2  = $OUTDIR

# Set up
#limit stacksize 100000
#limit stacksize unlimited

#> set log file [ default = unit 6 ]; uncomment to write standard output to a log
#setenv LOGFILE $BASE/$APPL_CASE.log

#> turn off excess WRITE3 logging
 setenv IOAPI_LOG_WRITE F

#> max sync time step (sec) (default is 720)
#setenv CTM_MAXSYNC 720
 setenv CTM_MAXSYNC 600

#> min sync time step (sec) (default is 60)
#setenv CTM_MINSYNC 720
 setenv CTM_MINSYNC 600

#> define number of emissions layers
 #setenv CTM_EMLAYS 24
 setenv CTM_EMLAYS 1

#> define number of emission sensitivity layers
# NOTE: CTM_EMSENSL >= CTM_EMLAYS
 setenv CTM_EMSENSL 1

#> sync time step (sec) (default is 600)
#setenv CTM_SYNC_STEP 600

#> top sigma level thru which sync step determined (default is 0.7)
#setenv SIGMA_SYNC_TOP 0.7

#> maximum allowable horizontal divergence for an advection step (default is 1.0)
#setenv ADV_HDIV_LIM 1.0

#> aerosol diagnostic file [ T | Y | F | N ] (default is F|N)
#setenv CTM_AERDIAG Y

#> sea-salt emissions diagnostic file [ T | Y | F | N ] (default is F|N)
#setenv CTM_SSEMDIAG Y

#> flag for in-line deposition velocities [ T | Y | F | N ] (default is T|Y)
#setenv CTM_ILDEPV F

#> use in-line plume rise emissions [ N|F ]
# setenv CTM_PT3DEMIS F
#
# if ( $?CTM_PT3DEMIS ) then   # $CTM_PT3DEMIS is defined
#    if ( $CTM_PT3DEMIS == 'Y' || $CTM_PT3DEMIS == 'T' ) then
#       set pt3don = 1
#       setenv PT3DDIAG Y  # optional 3d point source emissions diagnostic file [N]
#    else
#       set pt3don = 0
#    endif
# else   # $CTM_PT3DEMIS is not defined => $CTM_PT3DEMIS == 'N
#    set pt3don = 0
# endif

#> Kz min on flag [ T | Y | F | N ]
 setenv KZMIN N

#> stop on inconsistent input file [ T | Y | F | N ]
 setenv FL_ERR_STOP F

#> turn off I/O-API PROMPT*FILE interactive mode
#setenv PROMPTFLAG F

#> horizontal grid defn; check GRIDDESC file for GRID_NAME options
 setenv GRIDDESC $M3DATA/other/GRIDDESC
 setenv GRID_NAME CMAQ-BENCHMARK

#> species for standard conc
# setenv CONC_SPCS "O3 NO NO2 FORM ISOP"
 setenv CONC_SPCS "CO2"

#> layer range for standard conc
 #setenv CONC_BLEV_ELEV " 1 4"
 setenv CONC_BLEV_ELEV " 1 34"

#> species for integral average conc
# setenv AVG_CONC_SPCS "O3 NO CO NO2"
 stenv AVG_CONC_SPCS "CO2"

#> layer range for integral average conc
 setenv ACONC_BLEV_ELEV " 1 1"

#> input files and directories
 set OCEANpath = ${M3DATA}/other
 set OCEANfile = surf_BENCHMARK.ncf

 set GC_BCpath = ${M3DATA}/bcon
 set GC_BCfile = BCON_CMAQ-CO2test_profile

# Julian day adjustment (leap year is commented out)
if ( $MONTH == 01 ) then
 set juladd = 0
else if ( $MONTH == 02 ) then
 set juladd = 31
else if ( $MONTH == 03 ) then
 set juladd = 59 #60
else if ( $MONTH == 04 ) then
 set juladd = 90 #91
else if ( $MONTH == 05 ) then
 set juladd = 120 #121
else if ( $MONTH == 06 ) then
 set juladd = 151 #152
else if ( $MONTH == 07 ) then
 set juladd = 181 #182
else if ( $MONTH == 08 ) then
 set juladd = 212 #213
else if ( $MONTH == 09 ) then
 set juladd = 243 #244
else if ( $MONTH == 10 ) then
 set juladd = 273 #274
else if ( $MONTH == 11 ) then
 set juladd = 304 #305
else if ( $MONTH == 12 ) then
 set juladd = 334 #335
else
 echo " MONTH MUST BE BETWEEN 1-12 "
 exit (1)
endif

# Set start and end days
# @ day  = $EDAY
 @ day = $DAY1
 @ eday = $DAY1

#########################################################

while ( $day >= $eday )

 date; echo " "

 echo $day
 set STDAT  = `echo $day | awk '{printf("%2.2d",$1)}'`
 @ STDATE   = $day + $juladd + $YR * 1000 + 2000000
 set FLDATE   = $YEAR$MONTH$STDAT
 set EMISDATE   = $YEAR$MONTH$STDAT
 echo $STDAT

 set STTIME   = 000000        # beginning hour (GMT)
 set NSTEPS   = 240000        # time duration (HHMMSS) for this run
# set NSTEPS   = 002000
 set TSTEP    = 010000        # output time step interval (HHMMSS)
# set TSTEP    = 001000

 set yest = `echo $day | awk '{printf("%2.2d",$1+1)}'`
 set yesterday = $YEAR$MONTH$yest

 cd $BASE; date; set timestamp;
# cd /big_scratch/temp/bnmk
 
#> set ancillary log file name extensions
 setenv CTM_APPL $APPL_CASE.$FLDATE

#> remove existing output files?
#set DISP = delete
 set DISP = update
#set DISP = keep


###> Testing the implementation of offline adjoint forcing functions.
#>      See ADJOINT_FILES.F and driver_bwd.f for details
#> A receptor function for sensitivity analysis is the average mixing ratio
#> of the receptor species over the cells in the receptor domain. The
#> sensitivity of the receptor species to another species is the partial
#> derivative of the receptor function with respect to the mixing ratio of
#> the other species.

#> Receptor species
#setenv RECPTR_SPC O3

#> Column, row and level ranges for receptor
#>>> user must check GRIDDESC for validity!
# Define receptor location definition file
# setenv RECPTR_FILENAME "/nobackup/mdturne1/Continental_US_definition.txt"
# setenv RECPTR_BCOL_ECOL "130 130"
#setenv RECPTR_BCOL_ECOL "1 396"
# setenv RECPTR_BROW_EROW "68 68"
#setenv RECPTR_BROW_EROW "1 246"
#setenv RECPTR_BLEV_ELEV "1 1"

#> timestep run parameters for multi-day run
#set begin = 1
#set end = 1   # final date (first day of adjoint)

#set i = ${end}
#set j = ${begin}
#while ( $i >= ${begin} )
#   if ( $j == ${begin} ) then
#      set number = ( $i )
#   else
#      set number = ( $number $i )
#   endif
#   @ i --
#   @ j ++
#end
#foreach i ( $number )

# @ day  = $DAY1
# echo $day
# set STDAT  = `echo $day | awk '{printf("%2.2d",$1)}'`
# @ STDATE   = $day + $juladd + $YR * 1000 + 2000000
# set APPL   = $YEAR$MONTH$STDAT
# set EMISDATE   = $YEAR$MONTH$day
# echo $STDAT

# set STDATE   = ${YEAR}${jd1[$i]}       # beginning date
#> just for testing over 5 hours
# set STTIME   = 000000        # beginning GMT time (HHMMSS)
# set STTIME   = 000000        # beginning GMT time (HHMMSS)
# set TSTEP    = 010000        # output time step interval (HHMMSS)
# set NSTEPS   = 240000
# set NSTEPS   = 050000

# Define parameters that determine for how long the cost function is evaluated

#@ cf_start = $begin + 3
#@ cf_start = $begin
# setenv CF_BEGIN_DATE ${YEAR}${jd1[$cf_start]}
# setenv CF_BEGIN_TIME 000000

#@ next = $end + 1
# setenv CF_END_DATE ${YEAR}${jd1[$next]}
# setenv CF_END_TIME 000000

# set fwd_case = 238

#> output files and directories
 set OUTDIR   =  ${M3DATA}/GHG_output
 #set OUTDIR2  =  $M3DATA/fullmda8pt
# if ( ! -d "$OUTDIR" ) mkdir -p $OUTDIR
 set CONCfile   = CONC.${FLDATE}      # CTM_CONC_1
 set ACONCfile  = ACONC.${FLDATE}     # CTM_ACONC_1
 set CGRIDfile  = CGRID.${FLDATE}     # CTM_CGRID_1
 set DD1file    = DRYDEP.${FLDATE}    # CTM_DRY_DEP_1
# <was commented out>
 set WD1file   = WETDEP1.${FLDATE}   # CTM_WET_DEP_1
 set WD2file   = WETDEP2.${FLDATE}   # CTM_WET_DEP_2
 set SS1file   = SSEMIS1.${FLDATE}   # CTM_SSEMIS_1
 set AV1file   = AEROVIS.${FLDATE}   # CTM_VIS_1
 set AD1file   = AERODIAM.${FLDATE}  # CTM_DIAM_1
 set PA1file   = PA_1.${FLDATE}      # CTM_IPR_1
 set PA2file   = PA_2.${FLDATE}      # CTM_IPR_2
 set PA3file   = PA_3.${FLDATE}      # CTM_IPR_3
 set IRR1file  = IRR_1.${FLDATE}     # CTM_IRR_1
 set IRR2file  = IRR_2.${FLDATE}     # CTM_IRR_2
 set IRR3file  = IRR_3.${FLDATE}     # CTM_IRR_3
 set RJ1file   = RJ_1.${FLDATE}      # CTM_RJ_1
 set RJ2file   = RJ_2.${FLDATE}      # CTM_RJ_2
#</ was commented out>

 setenv CHK_PATH "$OUTDIR"
 setenv ADJ_LGRID          "$OUTDIR/LGRID.${APPL_CASE}.${FLDATE} -v"
 setenv ADJ_LGRID_EM_SF    "$OUTDIR/EM_SF.LGRID.${APPL_CASE}.${FLDATE} -v"
 setenv ADJ_LGRID_EM       "$OUTDIR/EM.LGRID.${APPL_CASE}.${FLDATE} -v"
# setenv ADJ_LGRID_EM_NRM  "$OUTDIR/EM_NORM.LGRID.${APPL_CASE}.${FLDATE} -v"
# setenv CTM_MORT          "/nobackup/mdturne1/Mort_2010_12km.ncf -v"
# setenv CTM_AVG           "/nobackup/mdturne1/Yearly_avg_2007 -v"

 setenv CTM_XFIRST_OUT $OUTDIR/XFIRST.${APPL_CASE}.${FLDATE}

#> input files and directories

 setenv CTM_XFIRST_IN $OUTDIR/XFIRST.${FLDATE}

 setenv CTM_CONC_FWD $OUTDIR/CONC.${FLDATE}  #CONC.${YEAR}${jd1[1]}.${fwd_case}
 setenv CTM_CGRID_FWD $OUTDIR/CGRID.${FLDATE} #.${YEAR}${jd1[1]}.${fwd_case}

 setenv ADJ_CHEM_CHK "$OUTDIR/CHEM_CHK.${FLDATE} -v"
 setenv ADJ_VDIFF_CHK "$OUTDIR/VDIFF_CHK.${FLDATE} -v"
 setenv ADJ_AERO_CHK "$OUTDIR/AERO_CHK.${FLDATE} -v"
 setenv ADJ_HA_RHOJ_CHK "$OUTDIR/HA_RHOJ_CHK.${FLDATE} -v"
 setenv ADJ_VA_RHOJ_CHK "$OUTDIR/VA_RHOJ_CHK.${FLDATE} -v"
 setenv ADJ_HADV_CHK "$OUTDIR/HADV_CHK.${FLDATE} -v"
 setenv ADJ_VADV_CHK "$OUTDIR/VADV_CHK.${FLDATE} -v"
 setenv ADJ_EMIS_CHK "$OUTDIR/EMIS_CHK.${FLDATE} -v"
 setenv ADJ_EMIST_CHK "$OUTDIR/EMIST_CHK.${FLDATE} -v"
 setenv ADJ_CPL_CHK "$OUTDIR/CPL_CHK.${FLDATE} -v"

#set TR_EMpath =
#set TR_EMfile =

#> test only
 if ( $FLDATE == $LASTDAY ) then
#   setenv INIT_LGRID_1 "$OUTDIR/LGRID.${APPL_CASE}.${yesterday} -v"
#   setenv INIT_EM_1 "$OUTDIR/EM.LGRID.${APPL_CASE}.${yesterday} -v"
#   setenv INIT_EM_SF_1 "$OUTDIR/EM_SF.LGRID.${APPL_CASE}.${yesterday} -v"
 else
   setenv INIT_LGRID_1 "$OUTDIR/LGRID.${APPL_CASE}.${yesterday} -v"
   setenv INIT_EM_1 "$OUTDIR/EM.LGRID.${APPL_CASE}.${yesterday} -v"
   setenv INIT_EM_SF_1 "$OUTDIR/EM_SF.LGRID.${APPL_CASE}.${yesterday} -v"
 endif

 set GC_ICpath = $OUTDIR
 set GC_ICfile = CGRID.${FLDATE}
# setenv INIT_LGRID_1 "$OUTDIR/LGRID.${APPL_CASE}.${yesterday} -v"
# setenv INIT_EM_1 "$OUTDIR/EM.LGRID.${APPL_CASE}.${yesterday} -v"
# setenv INIT_EM_SF_1 "$OUTDIR/EM_SF.LGRID.${APPL_CASE}.${yesterday} -v"

 setenv EMISDATE ${YEAR}${MONTH}${STDAT}
 set EMISpath = ${M3DATA}/emis
 #set EMISfile  = emis_CMAQ-BENCHMARK_${EMISDATE}.ncf
 set EMISfile  = emis_CMAQ-CO2test_${EMISDATE}.ncf

 #setenv NLAYS_FRC 2
 setenv NLAYS_FRC 34
 #setenv ADJ_FORCE "$OUTDIR/ADJ_FORCE.${FLDATE}"
 setenv ADJ_FORCE "${M3DATA}/force/ADJ_FORCE.${FLDATE}"

 #$CHECK_NLAYS_FRC $ADJ_FORCE $NLAYS_FRC
 #if ( $status != 0 ) then
 #   echo "invalid NLAYS_FRC for data"
 #   exit 1
 #endif

 set METpath   = $M3DATA/mcip
 set extn      = $YEAR$MONTH$STDAT
 set GC2file = GRIDCRO2D_${extn}
 set GD2file = GRIDDOT2D_${extn}
 set MC2file = METCRO2D_${extn}
 set MD3file = METDOT3D_${extn}
 set MC3file = METCRO3D_${extn}
 set MB3file = METBDY3D_${extn}

 set TR_DVpath = $METpath
 set TR_DVfile = $MC2file

#> 7-level photolysis data w/ file header
 set JVALpath  = $M3DATA/jproc
 set JVALfile  = JTABLE_${STDATE}

 set AE_ICpath = $GC_ICpath
 set NR_ICpath = $GC_ICpath
 set TR_ICpath = $GC_ICpath
 set AE_ICfile = $GC_ICfile
 set NR_ICfile = $GC_ICfile
 set TR_ICfile = $GC_ICfile

 set AE_BCpath = $GC_BCpath
 set NR_BCpath = $GC_BCpath
 set TR_BCpath = $GC_BCpath
 set AE_BCfile = $GC_BCfile
 set NR_BCfile = $GC_BCfile
 set TR_BCfile = $GC_BCfile

#> input and output files and directories (boilerplate)
# source $M3HOME/scripts/cctm/in_out.q
 source /home/563/spt563/cmaq/cmaq_adj/scripts/in_out.q 
 if ( $status ) exit 1

#> for the run control ...

 setenv CTM_STDATE      $STDATE
 setenv CTM_STTIME      $STTIME
 setenv CTM_RUNLEN      $NSTEPS
 setenv CTM_TSTEP       $TSTEP
 setenv CTM_PROGNAME    $EXEC

#> look for existing log files
# set test = `ls CTM_LOG_???.${APPL_CASE}`
# if ( "$test" != "" ) then
#    if ( $DISP == 'delete' ) then
#       echo " ancillary log files being deleted"
#       foreach file ( $test )
#          echo " deleting $file"
#          rm $file
#       ls CTM_LOG_???.${APPL_CASE} | xargs rm
#          end
#    else if ( $DISP == 'update' ) then
#       echo " ancillary log files being deleted"
#       foreach file ( $test )
#          echo " deleting $file"
#          rm $file
#       ls CTM_LOG_???.${APPL_CASE} | xargs rm
#       end
#    else
#       echo "*** Logs exist - run ABORTED ***"
#       exit 1
#       endif
#    endif

#> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 env

 ls -l $EXEC; size $EXEC

 if ( $RM == 'ser' ) then
#> Executable call for single PE
    time $EXEC
 else
#> Executable call for multiple PE, set location of MPIRUN script
#   set TASKMAP = $HOME/loc/machines
#   cat $TASKMAP
#    set MPIRUN = mpiexec
#    mpdboot --totalnum=`cat $PBS_NODEFILE | uniq | wc -l` -f $PBS_NODEFILE
#    time mpiexec -n `cat $PBS_NODEFILE | wc -l` -np $NPROCS $EXEC
#    mpdboot -f nodefile
#    time mpiexec -np $NPROCS $EXEC
    set MPIRUN = mpirun
    time $MPIRUN -np $NPROCS $EXEC
 endif

 @ day--   # decrement day
 end

 echo 'end model run at ' `date`

 exit
