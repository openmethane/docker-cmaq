#! /bin/csh -f

# ======================= CCTMv4.7.1 Run Script ===================== #
# Usage: run.cctm >&! run.cctm.log &                                  #
# The following environment variables must be set for this script to  #
# execute properly:                                                   #
#   setenv M3DATA =  input/output data directory                      #
# To report problems or request help with this script/program:        #
#             http://www.cmascenter.org/help_desk.cfm                 #
# =================================================================== #

# source ./setcase_test

 env > baseline_env.txt

#> Set M3DATA:
### CHANGE
 set M3DATA = /home/563/spt563/cmaq/cmaq_adj/data

#> Check that M3DATA is set:
 if ( ! -e $M3DATA ) then
    echo "   $M3DATA path does not exist"
    exit 1
    endif
 echo " "; echo " Input data path, M3DATA set to $M3DATA"; echo " "

#> Set the working directory:
### CHANGE
 set BASE     = /home/563/spt563/cmaq/cmaq_adj/scripts

#> Set the output directory
 set OUTDIR   = $M3DATA/GHG_output
 if ( ! -d "$OUTDIR" ) mkdir -p $OUTDIR

#> SPT: if CLEAROUT = 'YES' delete files made by previous run (logfiles & output)
 set CLEARLOG = YES
 if ( $CLEARLOG == 'YES' ) then
    rm $BASE/CTM_LOG*
    rm $OUTDIR/*
 endif

#> Application name (no default)
### CHANGE
 set APPL     = bnmk

 if ( ! $?APPL ) then
    echo 'Must set environment variable APPL (application name)'
    exit 1
 endif

#> Run mode: "ser" or "par" (default is par)
set RM       = par
 if ( ! $?RM ) then
    echo 'RM (run mode) was not set; this will be a parallel run'
    set RM = par
 else if ( $RM != 'ser' && $RM != 'par' ) then
    echo 'RM (run mode) was set incorrectly; value must be either ser or par'
    exit 1
 endif

 set YR = 7
 set YER = 07
 set YEAR = 2007
 set MONTH = 06             # does not cross months yet
 set FIRSTDAY  = 20070610   # first day YYYYMMDD
 set DAY1 = 10              # first day
 set EDAY = 13              # end day
 set IDAY = 10              # day for initial conditions

### CHANGE
 set APPL_CASE = fwd_CO2only
 set CFG  = adj
 set EXEC = $BASE/../BLD_${APPL_CASE}/ADJOINT_FWD

 cd $BASE; date; cat ${CFG}; echo "    "; set echo

#> horizontal domain decomposition
### CHANGE
 if ( $RM == 'ser' ) then
    setenv NPCOL_NPROW "1 1"; set NPROCS   = 1 # single processor setting
 else
    setenv NPCOL_NPROW "4 4"; set NPROCS   = 16
 endif

#> Switch to the qsub directory; default launch location
### CHANGE
 if ( $?PBS_JOBID ) then
    echo Job ID is $PBS_JOBID
    echo Queue is $PBS_O_QUEUE
    echo Working directory is $PBS_O_WORKDIR
    #cd $PBS_O_WORKDIR
    #cd /big_scratch/temp/cmaqadj
 endif
 echo '>>>>>> start model run at ' `date`
 set echo # Display each line after variables have been substituted

# Directories
#> If temporary directories are necessary, specify here; comment out OUTDIR specification below. 
#set PTMP    = $PBS_O_WORKDIR
#set PTMP    = /work/MOD3EVAL/has/omi/co_20110224/run
#set PTMPOUT = $PTMP
#set BASE    = $PTMP
#set BASE2   = $PTMP/../code/debug # BLD_N4a also
# set EXEC    = ADJOINT_FWD
#set OUTDIR  = $PTMPOUT
#if ( ! -d "$OUTDIR" ) mkdir -p $OUTDIR
#set OUTDIR2  = $OUTDIR

# Set up
# limit stacksize 100000
# limit stacksize unlimited

#> turn off excess WRITE3 logging
 setenv IOAPI_LOG_WRITE F

#> max sync time step (sec) (default is 720)
 setenv CTM_MAXSYNC 600

#> min sync time step (sec) (default is 60)
 setenv CTM_MINSYNC 600

#> top sigma level thru which sync step determined (default is 0.7)
#setenv SIGMA_SYNC_TOP 0.7

#> maximum allowable horizontal divergence for an advection step (default is 1.0)
#setenv ADV_HDIV_LIM 1.0

#> aerosol diagnostic file [ T | Y | F | N ] (default is F|N)
#setenv CTM_AERDIAG Y

#> sea-salt emissions diagnostic file [ T | Y | F | N ] (default is F|N)
#setenv CTM_SSEMDIAG Y

#> flag for in-line deposition velocities [ T | Y | F | N ] (default is T|Y)
#setenv CTM_ILDEPV F

#> use in-line plume rise emissions [ N|F ]
 setenv CTM_PT3DEMIS N

 if ( $?CTM_PT3DEMIS ) then   # $CTM_PT3DEMIS is defined
    if ( $CTM_PT3DEMIS == 'Y' || $CTM_PT3DEMIS == 'T' ) then
       set pt3don = 1
       setenv PT3DDIAG N  # optional 3d point source emissions diagnostic file [N]
       setenv REP_LAYER_MIN 0
       setenv IPVERT 0
    else
       set pt3don = 0
    endif
 else   # $CTM_PT3DEMIS is not defined => $CTM_PT3DEMIS == 'N
    set pt3don = 0
 endif

#> Lightning NOx configuration

#> define number of emissions layers
 setenv CTM_EMLAYS 1

#> Kz min on flag [ T | Y | F | N ]
 setenv KZMIN N

#> stop on inconsistent input file [ T | Y | F | N ]
 setenv FL_ERR_STOP F

#> turn off I/O-API PROMPT*FILE interactive mode
setenv PROMPTFLAG F

#> horizontal grid defn; check GRIDDESC file for GRID_NAME options
 setenv GRIDDESC $M3DATA/other/GRIDDESC
 setenv GRID_NAME CMAQ-BENCHMARK

#> species for standard conc
# setenv CONC_SPCS "O3 NO NO2 FORM ISOP ETH"
 setenv CONC_SPCS "CO2"

#> layer range for standard conc
 #setenv CONC_BLEV_ELEV " 1 4"
 setenv CONC_BLEV_ELEV " 1 34"

#> species for integral average conc
#setenv AVG_CONC_SPCS "O3 NO CO NO2 ASO4I ASO4J NH3"
#setenv AVG_CONC_SPCS "ALL"
# setenv AVG_CONC_SPCS "O3 NO CO FORM NO2 ETH"
 setenv AVG_CONC_SPCS "CO2"

#> layer range for integral average conc
 setenv ACONC_BLEV_ELEV " 1 1 "

#> input files and directories
 set OCEANpath = $M3DATA/other
 set OCEANfile = surf_BENCHMARK.ncf
 
#> finite difference perturbation array selection
### CHANGE (only to apply perturbation)
 setenv PERTCOLS "1"
 setenv PERTROWS "1"
 setenv PERTLEVS "1"
 # no
 setenv PERTSPCS "2"
# note: multiplicative perturbation (e.g., 1.10 is a 10% positive perturbation)
 setenv PERTDELT 1.00 

# Julian day adjustment (non-leap year is commented out)
if ( $MONTH == 01 ) then
 set juladd = 0
else if ( $MONTH == 02 ) then
 set juladd = 31
else if ( $MONTH == 03 ) then
 set juladd = 59 #60
else if ( $MONTH == 04 ) then
 set juladd = 90 #91
else if ( $MONTH == 05 ) then
 set juladd = 120 #121
else if ( $MONTH == 06 ) then
 set juladd = 151 #152
else if ( $MONTH == 07 ) then
 set juladd = 181 #182
else if ( $MONTH == 08 ) then
 set juladd = 212 #213
else if ( $MONTH == 09 ) then
 set juladd = 243 #244
else if ( $MONTH == 10 ) then
 set juladd = 273 #274
else if ( $MONTH == 11 ) then
 set juladd = 304 #305
else if ( $MONTH == 12 ) then
 set juladd = 334 #335
else
 echo " MONTH MUST BE BETWEEN 1-12 "
 exit (1)
endif

# Set start and end days
 @ day  = $DAY1
 @ eday = $EDAY

#########################################################

#while ( $day <= $eday )
while ( $day <= $DAY1 )

 date; echo " "

 echo $day
 set STDAT  = `echo $day | awk '{printf("%2.2d",$1)}'`
 @ STDATE   = $day + $juladd + $YR * 1000 + 2000000
 set FLDATE   = $YEAR$MONTH$STDAT
 set EMISDATE   = $YEAR$MONTH$STDAT
 echo $STDAT

 set STTIME   = 000000        # beginning hour (GMT)
 set NSTEPS   = 240000        # time duration (HHMMSS) for this run
# set NSTEPS   = 002000
 set TSTEP    = 010000        # output time step interval (HHMMSS)
# set TSTEP    = 001000

 set yest = `echo $day | awk '{printf("%2.2d",$1-1)}'`
 set yesterday = $YEAR$MONTH$yest
 set yrmn = $YEAR$MONTH
 
 cd $BASE; date; set timestamp;
### CHANGE
# cd /big_scratch/temp/cmaqadj; date; set timestamp;

#> set ancillary log file name extensions
 setenv CTM_APPL $APPL.$FLDATE

#> remove existing output files?
 set DISP = delete
#set DISP = update
#set DISP = keep
 
#> Emissions files
 setenv EMISDATE ${YEAR}${MONTH}${STDAT}
 set EMISpath  = $M3DATA/emis

 if ( $CTM_PT3DEMIS == 'N' ) then
   set EMISfile  = emis_CMAQ-CO2test_${EMISDATE}.ncf #> Offline 3d emissions file name
 else
   #> In-line emissions configuration
   set IN_PTpath = $M3DATA/emis/2007      #> elevated emissions input directory (in-line point only)
   set SMKMRGE = $IN_PTpath/smk_merge_dates_${yrmn}.txt
   echo $SMKMRGE

   @ gline = $day + 1      # indicates line in text file, which has a single header line
    ## @ gline = $STDAT + 1
   echo $gline
   set intable = `head -$gline $SMKMRGE | tail -1`

   set Date     = `echo $intable[1] | cut -d, -f1`
   set aveday_N = `echo $intable[2] | cut -d, -f1`
   set aveday_Y = `echo $intable[3] | cut -d, -f1`
   set mwdss_N  = `echo $intable[4] | cut -d, -f1`
   set mwdss_Y  = `echo $intable[5] | cut -d, -f1`
   set week_N   = `echo $intable[6] | cut -d, -f1`
   set week_Y   = `echo $intable[7] | cut -d, -f1`
   set all      = `echo $intable[8] | cut -d, -f1`
   echo $Date $aveday_N $aveday_Y $mwdss_N $mwdss_Y
   echo $week_N $week_Y $all

   set CASE1 = 12US1_2007ee_v5_07c_36km
   set CASE2 = 12US1_2007ea_v5_07c_36km
   set CASE3 = 12US2_cmaq_cb05_soa_2007ee_v5_07c_36km
   set CASE4 = 12US1_cmaq_cb05_soa_2007ee_v5_07c
   set CASE5 = 12US1_cmaq_cb05_soa_2007ea_v5_07c
   setenv CASEa ${EMISDATE}_$CASE2
   setenv CASEb ${EMISDATE}_$CASE3
   setenv CASEc ${EMISDATE}_$CASE4
   setenv CASEd ${EMISDATE}_$CASE5
   set EMISfile = emis_mole_all_${CASEb}.ncf #> Surface emissions
   setenv NPTGRPS 5          #> Number of elevated source groups
   setenv STK_GRPS_01 $IN_PTpath/stack_groups_ptnonipm_${CASE1}.ncf
   setenv STK_GRPS_02 $IN_PTpath/stack_groups_ptipm_${CASE1}.ncf
   setenv STK_GRPS_03 $IN_PTpath/stack_groups_othpt_${CASE2}.ncf
   setenv STK_GRPS_04 $IN_PTpath/stack_groups_c3marine_${CASE2}.ncf
   setenv STK_GRPS_05 $IN_PTpath/stack_groups_ptfire_${CASEa}.ncf
   setenv LAYP_STTIME $STTIME
   setenv LAYP_NSTEPS $NSTEPS
   setenv LAYP_STDATE $STDATE
   setenv STK_EMIS_01 $IN_PTpath/ptnonipm/"inln_mole_ptnonipm_"${mwdss_Y}"_"${CASE4}.ncf
   setenv STK_EMIS_02 $IN_PTpath/ptipm/"inln_mole_ptipm_"${EMISDATE}"_"${CASE4}.ncf
   setenv STK_EMIS_03 $IN_PTpath/othpt/"inln_mole_othpt_"${mwdss_N}"_"${CASE5}.ncf
   setenv STK_EMIS_04 $IN_PTpath/c3marine/"inln_mole_c3marine_"${aveday_N}"_"${CASE5}.ncf
   setenv STK_EMIS_05 $IN_PTpath/ptfire/inln_mole_ptfire_${CASEd}.ncf
   set EMISfile = emis_mole_all_${EMISDATE}_12US2_cmaq_cb05_soa_2007ee_v5_07c_36km.ncf
 endif


#> SPT: outdir now defined earlier in code (for CLEAROUT)
#> output files and directories
#> Change OUTDIR to job-specific location.
# set OUTDIR   = $M3DATA/empert_eth
### CHANGE
# set OUTDIR   = /big_scratch/temp/cmaqadj
# if ( ! -d "$OUTDIR" ) mkdir -p $OUTDIR

#> set log file [ default = unit 6 ]; uncomment to write standard output to a log
 setenv LOGFILE $OUTDIR/$APPL.$FLDATE.log

 set CONCfile  = CONC.${FLDATE}    # CTM_CONC_1
 set ACONCfile = ACONC.${FLDATE}   # CTM_ACONC_1
 set CGRIDfile = CGRID.${FLDATE}   # CTM_CGRID_1
 set DD1file   = DRYDEP.${FLDATE}  # CTM_DRY_DEP_1
 set WD1file   = WETDEP1.${FLDATE} # CTM_WET_DEP_1
 set WD2file   = WETDEP2.${FLDATE} # CTM_WET_DEP_2
 set SS1file   = SSEMIS1.${FLDATE} # CTM_SSEMIS_1
 set AV1file   = AEROVIS.${FLDATE} # CTM_VIS_1
 set AD1file   = AERODIAM.${FLDATE} # CTM_DIAM_1
 set PA1file   = PA_1.${FLDATE}    # CTM_IPR_1
 set PA2file   = PA_2.${FLDATE}    # CTM_IPR_2
 set PA3file   = PA_3.${FLDATE}    # CTM_IPR_3
 set IRR1file  = IRR_1.${FLDATE}   # CTM_IRR_1
 set IRR2file  = IRR_2.${FLDATE}   # CTM_IRR_2
 set IRR3file  = IRR_3.${FLDATE}   # CTM_IRR_3
 set RJ1file   = RJ_1.${FLDATE}    # CTM_RJ_1
 set RJ2file   = RJ_2.${FLDATE}    # CTM_RJ_2

#> set boundary condition files
 set GC_BCpath = $M3DATA/bcon
 set GC_BCfile = BCON_CMAQ-CO2test_profile

#> set floor file (neg concs)
 setenv FLOOR_FILE $OUTDIR/FLOOR_${APPL}

 setenv ADJ_CHEM_CHK "$OUTDIR/CHEM_CHK.${FLDATE} -v"
 setenv ADJ_VDIFF_CHK "$OUTDIR/VDIFF_CHK.${FLDATE} -v"
 setenv ADJ_AERO_CHK "$OUTDIR/AERO_CHK.${FLDATE} -v"
 setenv ADJ_HA_RHOJ_CHK "$OUTDIR/HA_RHOJ_CHK.${FLDATE} -v"
 setenv ADJ_VA_RHOJ_CHK "$OUTDIR/VA_RHOJ_CHK.${FLDATE} -v"
 setenv ADJ_HADV_CHK "$OUTDIR/HADV_CHK.${FLDATE} -v"
 setenv ADJ_VADV_CHK "$OUTDIR/VADV_CHK.${FLDATE} -v"
 setenv ADJ_EMIS_CHK "$OUTDIR/EMIS_CHK.${FLDATE} -v"
 setenv ADJ_EMIST_CHK "$OUTDIR/EMIST_CHK.${FLDATE} -v"
 setenv ADJ_CPL_CHK "$OUTDIR/CPL_CHK.${FLDATE} -v"

 setenv CTM_XFIRST_OUT $OUTDIR/XFIRST.${FLDATE}
 
 echo $FLDATE
 echo $FIRSTDAY
 if ( $FLDATE == $FIRSTDAY ) then
   set GC_ICpath = $M3DATA/icon
   set GC_ICfile = ICON_CMAQ-CO2test_profile
   #setenv CTM_XFIRST_IN
 else
   set GC_ICpath = $OUTDIR
   set GC_ICfile = CGRID.${yesterday}
   setenv CTM_XFIRST_IN $OUTDIR/XFIRST.${yesterday}
 endif

 set METpath   = $M3DATA/mcip
 set extn      = $YEAR$MONTH$STDAT
 set GC2file = GRIDCRO2D_${extn}
 set GD2file = GRIDDOT2D_${extn}
 set MC2file = METCRO2D_${extn}
 set MD3file = METDOT3D_${extn}
 set MC3file = METCRO3D_${extn}
 set MB3file = METBDY3D_${extn}

 set TR_DVpath = $METpath
 set TR_DVfile = $MC2file

#> 7-level photolysis data w/ file header
 #set extn2     = $YEAR$STDATE
 set JVALpath  = $M3DATA/jproc 
 set JVALfile  = JTABLE_${STDATE}

 set AE_ICpath = $GC_ICpath
 set NR_ICpath = $GC_ICpath
 set TR_ICpath = $GC_ICpath
 set AE_ICfile = $GC_ICfile
 set NR_ICfile = $GC_ICfile
 set TR_ICfile = $GC_ICfile

 set AE_BCpath = $GC_BCpath
 set NR_BCpath = $GC_BCpath
 set TR_BCpath = $GC_BCpath
 set AE_BCfile = $GC_BCfile
 set NR_BCfile = $GC_BCfile
 set TR_BCfile = $GC_BCfile

#> input and output files and directories (boilerplate)
 source $BASE/in_out.q
 if ( $status ) exit 1

#> for the run control ...

 setenv CTM_STDATE      $STDATE
 setenv CTM_STTIME      $STTIME
 setenv CTM_RUNLEN      $NSTEPS
 setenv CTM_TSTEP       $TSTEP
 setenv CTM_PROGNAME    $EXEC

#> look for existing log files
 set test = `ls CTM_LOG_???.${APPL}`
 if ( "$test" != "" ) then
    if ( $DISP == 'delete' ) then
       echo " ancillary log files being deleted"
       foreach file ( $test )
          echo " deleting $file"
          rm $file
       end
    else if ( $DISP == 'update' ) then
       echo " ancillary log files being deleted"
       foreach file ( $test )
          echo " deleting $file"
          rm $file
       end
    else
       echo "*** Logs exist - run ABORTED ***"
       exit 1
    endif
 endif

#> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 env

 ls -l $EXEC; size $EXEC
 unlimit
 limit

 #try and remove all 'interesting' env-vars
 #unsetenv BASH_FUNC_*
 #unsetenv LESSOPEN
 unsetenv PBS_NCI_IMAGE

 env > cmaq_env.txt

 if ( $RM == 'ser' ) then
#> Executable call for single PE
    time $EXEC
 else
#> Executable call for multiple PE, set location of MPIRUN script
#    set MPIRUN = /opt/mpich/bin/mpirun
#    set TASKMAP = $HOME/loc/machines
#    cat $TASKMAP
#    set MPIRUN = /data/opt/intel/impi/4.0.0.028/intel64/bin/mpirun
#    grep '' $PBS_NODEFILE > /data/share/epilogue/jobs/$PBS_JOBID
#    set MPIRUN = /data/opt/intel/impi/4.0.0.028/intel64/bin/mpiexec
#    totalview $MPIRUN -np $NPROCS $EXEC
#    set MPIRUN = mpiexec
#    mpdboot --totalnum=`cat $PBS_NODEFILE | uniq | wc -l` -f $PBS_NODEFILE
#    time mpiexec -n `cat $PBS_NODEFILE | wc -l` -np $NPROCS $EXEC
#    set MPIRUN = /opt/intel/impi/5.0.1.035/bin64/mpirun
#    time $MPIRUN -np $NPROCS $EXEC 
    set MPIRUN = mpirun
    time $MPIRUN -np $NPROCS $EXEC
 endif

# date

 @ day++  # increment day

 end

 echo 'end model run at ' `date`

 exit
