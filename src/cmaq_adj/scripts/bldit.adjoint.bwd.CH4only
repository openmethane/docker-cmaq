#! /bin/csh

# ======================== CCTMv4.7.1 Build Script ================== #
# Usage: bldit.cctm >&! bldit.cctm.log                                #
# Requirements: I/O API & netCDF libs, CVS, PGI or Intel Fortran      #
#               MPICH for multiprocessor computing                    #
# Note that this script is configured/tested for Red Hat Linux O/S    #
# The following environment variables must be set for this script to  #
# build an executable.                                                #
#   setenv M3MODEL =  source code CVS archive                         #
#   setenv M3LIB   =  code libraries                                  #
# To report problems or request help with this script/program:        #
#             http://www.cmascenter.org/help_desk.cfm                 #
# =================================================================== #

# CHANGE: put root repository directory here
 setenv M3MODEL /home/563/ns0890/programs/cmaq_adj
 setenv M3MODEL2 /home/563/ns0890/programs/CMAQv5.0.2

#===============================================================================

#> architecture & compiler specific settings
#-------------------------------------------------------------------------------
 setenv system "`/bin/uname -i`"
 setenv BLD_OS "`/bin/uname -s``/bin/uname -r | cut -d. -f1`"

# CHANGE: set M3LIB to base directory for MPI, netCDF, IOAPI, STENEX, PARIO libraries
 setenv lib_basedir ${M3MODEL2}/lib
 set MACH = `uname -m`
 setenv COMPILER intel
 setenv compiler_ext ifort
 setenv M3LIB ${lib_basedir}/${system}/{$COMPILER}
 #setenv MPI_INC "/apps/openmpi/2.1.6/include -I/apps/openmpi/2.1.6/include/Intel"
 setenv MPI_INC "/apps/openmpi/4.0.2/include -I/apps/openmpi/4.0.2/include/Intel"

## Check for M3MODEL and M3LIB settings:
 if ( ! -e $M3MODEL || ! -e $M3LIB ) then
    echo "   $M3MODEL or $M3LIB directory not found"
    exit 1
    endif
 echo "   Model archive path: $M3MODEL"
 echo "         library path: $M3LIB"

 ## set $BLD_OS = `uname -s``uname -r | cut -d. -f1`  ## Script set up for Linux
 setenv BLD_OS Linux2
 if ($BLD_OS != 'Linux2') then
    echo "   $BLD_OS -> wrong makit script for host!"
    exit 1
    endif
 set echo
#while( 1 )
#    switch( "$1" )
#    endsw
#    shift
#end

#:#:#:#:#:#:#:#:#:#:#:# Begin User Input Section #:#:#:#:#:#:#:#:#:#:#:#

#> user choices: adjoint base directory
 set Adj_Home = ${M3MODEL}/modified_CCTM

#> user choices:
 set Project = ${M3MODEL}/modified_CCTM #CCTM
 set GlobInc = ${M3MODEL}/ICL

 git status
 setenv REPOROOT ${M3MODEL}/modified_CCTM

#> user choices: base working directory
 set Base = ..    #$cwd

# set APPL  = test
# set APPL  = aero_adj
# set CFG   = cfg
 set MODEL = ADJOINT_BWD

#set Local   # do NOT copy the source files into the BLD directory -
             # comment out to copy the source files (default if not set)

#> user choices: m3bld command, see M3BLD_README for options
 set Opt = verbose      # show requested commands as they are executed
#> user choices: bldmake command
 #set MakeFileOnly   # builds a Makefile to make the model, but does not compile -
                    # comment out to also compile the model (default if not set)

#> user choices:  single or multiple processors
 set ParOpt             # set for multiple PE's; comment out for single PE

#> user choices: various modules

 set Revision = release       # release = latest CVS revision
#set Revision = '"CMAQv4_7_1"'
#> NOTE: m3bld will try to compile with existing code; it will not retrieve
#>       new (different release) code. So if your "BLD" directory contains
#>       code from a release different than the one you have specified above,
#>       m3bld will tell you, but will still compile the original code.
#>       The workaround is to remove your "BLD" directory and start fresh.

#set ModDriver = driver/ctm
#set ModDriver = driver/yamo
#set ModDriver = driver/yamo_adj_fwd
# set ModDriver = driver/yamo_adj_bwd
 set ModDriver = driver/yamo_adj_ceil_bwd

#set ModChkpnt = chkpnt/chkpnt_bin
# set ModChkpnt = chkpnt/chkpnt_ioapi
 set ModChkpnt = chkpnt/chkpnt_ceil_ioapi
#set ModChkpnt = chkpnt/chkpnt_pnetcdf
#set ModChkpnt = chkpnt/chkpnt_multi

 if ( $?ParOpt ) then
    set ModPar = par/par
 else
    set ModPar = par/par_noop
 endif

#set ModInit   = init/init
# set ModInit   = init/yamo
 set ModInit   = init/adj_bwd
#set ModInit   = init/yamo_ddm3d

#set ModAdjc   = adjcon/adjcon_noop
#set ModAdjc   = adjcon/denrate
 set ModAdjc   = ( // yamo option does not need denrate )

# set ModCpl    = couple/gencoor
 set ModCpl    = couple/gencoor_ceil_bwd
# set ModCpl    = couple/gencoor_ceil

#set ModHadv   = hadv/hadv_bwd_noop
#set ModHadv   = hadv/hadv_noop
#set ModHadv   = hadv/hppm
#set ModHadv   = hadv/yamo
#set ModHadv   = hadv/yamo_cadj_fwd
 set ModHadv   = hadv/yamo_cadj_bwd
#set ModHadv   = hadv/yamo_dadj_fwd
#set ModHadv   = hadv/yamo_dadj_bwd

#set ModVadv   = vadv/vadv_bwd_noop
#set ModVadv   = vadv/vadv_noop
#set ModVadv   = vadv/vppm
#set ModVadv   = vadv/yamo
#set ModVadv   = vadv/vyamo_cadj_fwd
# set ModVadv   = vadv/vyamo_cadj_bwd
 set ModVadv   = vadv/vyamo_cadj_ceil_bwd
#set ModVadv   = vadv/vyamo_dadj_fwd
#set ModVadv   = vadv/vyamo_dadj_bwd

#set ModHdiff  = hdiff/hdiff_bwd_noop
#set ModHdiff  = hdiff/hdiff_noop
#set ModHdiff  = hdiff/multiscale
#set ModHdiff  = hdiff/multiscale_adj_fwd
 set ModHdiff  = hdiff/multiscale_adj_bwd

#set ModVdiff  = vdiff/vdiff_bwd_noop
#set ModVdiff  = vdiff/vdiff_noop
#set ModVdiff  = vdiff/eddy
#set ModVdiff  = vdiff/acm2
#set ModVdiff  = vdiff/acm2_inline
#set ModVdiff  = vdiff/acm2_inline_adj_fwd
 set ModVdiff  = vdiff/acm2_inline_adj_bwd
#set ModVdiff  = vdiff/noacm_adj_bwd

 set ModPhot   = phot/phot_noop
#set ModPhot   = phot/phot
#set ModPhot   = phot/phot_sat
#set ModPhot   = phot/phot_inline

#set ModChem   = chem/chem_noop
 set ModChem   = chem/chem_bwd_noop
#set ModChem   = chem/smvgear
#set ModChem   = chem/ros3
#set ModChem   = chem/ebi_cb05cl
#set ModChem   = chem/ebi_cb05cl_ae5
#set ModChem   = chem/ebi_saprc99
#set ModChem   = chem/ebi_saprc99_ae5
#set ModChem   = chem/kpp_cb05cl_ae5_adj_fwd
#set ModChem   = chem/kpp_cb05cl_ae5_adj_bwd

#set ModAero   = aero/aero_noop
 set ModAero   = aero/aero_bwd_noop
#set ModAero   = aero/aero4
#set ModAero   = aero/aero5
#set ModAero   = aero/aero5_adj_fwd
#set ModAero   = aero/aero5_adj_bwd

 set ModAdepv  = aero_depv/aero_depv_noop
#set ModAdepv  = aero_depv/aero_depv2

 set ModCloud  = cloud/cloud_noop
#set ModCloud  = cloud/cloud_bwd_noop
#set ModCloud  = cloud/cloud_acm
#set ModCloud  = cloud/cloud_acm_ae5

# set ModPa     = ( module pa                 $Revision; )
# set ModPa     = procan/pa
 set ModPa     = procan/pa_ceil_bwd

#set ModUtil   = util/util
 set ModUtil   = util/util_adj

#> user choices: emissions processing in chem or vdiff (default) ...
#set Cemis        # Uncomment to process in chem

#> user choices: mechanism
#set Mechanism = mech/cb05cl_ae4_aq
#set Mechanism = mech/cb05cl_ae5_aq
#set Mechanism = mech/cb05cl_ae5_aq_noaero
# set Mechanism = mech/cb05cl_ae5_aq_CO2only
 set Mechanism = mech/cb05cl_ae5_aq_CH4only
#set Mechanism = mech/saprc99_ae4_aq
#set Mechanism = mech/saprc99_ae5_aq
#set Mechanism = mech/nochem
 set Tracer    = mech/trac0               # default: no tracer species

#> user choices: set process analysis linkages
 set PABase    = $GlobInc
 set PAOpt     = procan/pa_noop

#> user choices: computing system configuration:
#>    name of the "BLD" directory for checking out and compiling source code
#>    compiler name and location/link flags
#>    library paths

# set Base = $cwd
# set APPL  = bwd_CO2only
 set APPL  = bwd_CH4only
# set APPL  = aero_adj
 set CFG   = cfg.$APPL
#
 set Bld = $Base/BLD_${APPL}
 set MODLOC = ${Bld}/MOD_DIR
 if ( -d "$MODLOC" ) /bin/rm -Rf $MODLOC
 mkdir -p $MODLOC

# CHANGE: Set full path of Fortran 90 and c compilers
 set FC = mpif90
 set CC = mpicc
 set FP = $FC

# CHANGE: Set location of MPICH if using multiple processors
 set MPICH  =  "/apps/openmpi/4.0.2"

# CHANGE: Set location for stenex library/include/and mod files
# set STENEX = $M3LIB/se_noop
 set STENEX = ${M3LIB}/se_snl

# CHANGE: Set compiler flags
 set FSTD       = "-extend_source 132 -qopt-report0 -nodefines -warn nousage -stand none -traceback -CB -c -g"
 set F_FLAGS    = "${FSTD} -O2 -module ${MODLOC} -I."
 set CPP_FLAGS  = ""
 set C_FLAGS    = "-g -DFLDMN -I/apps/openmpi/4.0.2/include"
 set LINK_FLAGS = "-qopenmp"

# Set location of M3Bld executable
 set Blder = "$M3MODEL/BLDMAKE_git/bldmake -verbose"

# CHANGE: Set location of libraries/include files
 set IOAPI =  "/home/563/ns0890/programs/CMAQv5.0.2/lib/ioapi-3.1/Linux2_${system}${compiler_ext} -lioapi"
 set ICL_IOAPI = "/home/563/ns0890/programs/CMAQv5.0.2/lib/ioapi-3.1/ioapi/fixed_src"
 set NETCDF = "/apps/netcdf/4.7.1/lib -lnetcdf -L/apps/netcdf/4.7.1/lib/Intel -lnetcdff"
 set PARIO = "${M3LIB}/pario -lpario"

#:#:#:#:#:#:#:#:#:#:#:# End of User Input Section :#:#:#:#:#:#:#:#:#:#:#:#:#

#> Append O/S, machine, and compiler information to executable name
#set EXEID = ${BLD_OS}_${MACH}${COMP}
#set MODEL = ${MODEL}_${EXEID}
#set CFG   = ${CFG}_${EXEID}

 if ( ! -e "$Bld" ) then
    mkdir $Bld
    else
    if ( ! -d "$Bld" ) then
       echo "   *** target exists, but not a directory ***"
       exit 1
       endif
    endif

 cd $Bld

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#

 if ( $?ParOpt ) then      # Multiprocessor system configuration
    set Mpich = $MPICH
    set seL = se_snl
    cp -p ${STENEX}/*.mod $MODLOC
#    cp -p ${STENEX}/se_*.mod ${STENEX}/swap_sandia.mod $Bld
    set LIB2 = "-L${PARIO}"
    set LIB3 =
    set LIB4 = "-L${Mpich}/lib -lmpi -L${Mpich}/lib/Intel -lmpi_mpifh"
    set Str1 = (// Parallel / Include message passing definitions)
    set Str2 = (include SUBST_MPICH ${Mpich}/include/Intel/mpif.h;)
 else
    set Mpich =           # Single processor system configuration
    set seL = sef90_noop
    cp -p ${STENEX}/noop_*.mod $MODLOC
#    cp -p ${STENEX}/noop_*.mod $Bld
    set LIB2 =
    set LIB3 =
    set LIB4 =
    set Str1 =
    set Str2 =
 endif

 set LIB1 = "-L${STENEX} -l${seL}"
 set LIB5 = "-L${IOAPI}"
 set LIB6 = "-L${NETCDF}"
 set LIBS = "$LIB1 $LIB2 $LIB3 $LIB4 $LIB5 $LIB6"

#source $Base/relinc3.cctm_adj
#if ( $status ) exit 1

 set ICL_PAR   = $GlobInc/fixed/par
 set ICL_CONST = $GlobInc/fixed/const
 set ICL_FILES = $GlobInc/fixed/filenames
 set ICL_EMCTL = $GlobInc/fixed/emctrl
 set ICL_MECH  = $GlobInc/$Mechanism
 set ICL_TRAC  = $GlobInc/$Tracer
 set ICL_PA    = $PABase/$PAOpt

 if ( $?Cemis ) then
    set CV = -Demis_chem
    else
    set CV =
    endif

#> NOTE: To run parallel in a Scyld Beowulf cluster, e.g., remove the
#>       "-Dcluster\" below.

 if ( $?ParOpt ) then   # split to avoid line > 256 char
    set PAR = ( -Dparallel \
                -Dcluster \
                -DINTERPB=PINTERPB \
                -DM3ERR=PM3ERR \
                -DM3EXIT=PM3EXIT \
                -DM3WARN=PM3WARN \
                -DSHUT3=PSHUT3 \
                -DWRITE3=PWRITE3 )

    set Popt = SE
    else
    echo "   Not Parallel; set Serial (no-op) flags"
    set PAR = "-DINTERPB=INTERP3 "
    set Popt = NOOP
    endif

 set STX1 = ( -DSUBST_MODULES=${Popt}_MODULES \
              -DSUBST_BARRIER=${Popt}_BARRIER )
 set STX2 = ( -DSUBST_GLOBAL_MAX=${Popt}_GLOBAL_MAX \
              -DSUBST_GLOBAL_MIN=${Popt}_GLOBAL_MIN \
              -DSUBST_GLOBAL_MIN_DATA=${Popt}_GLOBAL_MIN_DATA \
              -DSUBST_GLOBAL_TO_LOCAL_COORD=${Popt}_GLOBAL_TO_LOCAL_COORD \
              -DSUBST_GLOBAL_SUM=${Popt}_GLOBAL_SUM \
              -DSUBST_GLOBAL_LOGICAL=${Popt}_GLOBAL_LOGICAL \
              -DSUBST_LOOP_INDEX=${Popt}_LOOP_INDEX \
              -DSUBST_SUBGRID_INDEX=${Popt}_SUBGRID_INDEX )
 set STX3 = ( -DSUBST_HI_LO_BND_PE=${Popt}_HI_LO_BND_PE \
              -DSUBST_SUM_CHK=${Popt}_SUM_CHK \
              -DSUBST_INIT_ARRAY=${Popt}_INIT_ARRAY \
              -DSUBST_COMM=${Popt}_COMM \
              -DSUBST_MY_REGION=${Popt}_MY_REGION \
              -DSUBST_SLICE=${Popt}_SLICE \
              -DSUBST_GATHER=${Popt}_GATHER \
              -DSUBST_DATA_COPY=${Popt}_DATA_COPY \
              -DSUBST_IN_SYN=${Popt}_IN_SYN )

#> make the config file

 set Cfile = ${CFG}.bld
 set quote = '"'

 echo                                                               > $Cfile
 echo "model       $MODEL;"                                        >> $Cfile
 echo                                                              >> $Cfile
 echo "FPP         $FP;"                                           >> $Cfile
 echo                                                              >> $Cfile
 set text = "$quote$CPP_FLAGS $CV $PAR $STX1 $STX2 $STX3$quote;"
 echo "cpp_flags   $text"                                          >> $Cfile
 echo                                                              >> $Cfile
 echo "f_compiler  $FC;"                                           >> $Cfile
 echo                                                              >> $Cfile
 echo "f_flags     $quote$F_FLAGS$quote;"                          >> $Cfile
 echo                                                              >> $Cfile
 echo "c_flags     $quote$C_FLAGS$quote;"                          >> $Cfile
 echo                                                              >> $Cfile
 echo "link_flags  $quote$LINK_FLAGS$quote;"                       >> $Cfile
 echo                                                              >> $Cfile
 echo "libraries   $quote$LIBS$quote;"                             >> $Cfile
 echo                                                              >> $Cfile
 echo "global      $Opt;"                                          >> $Cfile
 echo                                                              >> $Cfile

 set text="// mechanism and tracer:"
 echo "$text ${Mechanism}, ${Tracer}"                              >> $Cfile
 echo "// project archive: ${Project}"                             >> $Cfile
 echo                                                              >> $Cfile

 echo "include SUBST_PE_COMM    $ICL_PAR/PE_COMM.EXT;"             >> $Cfile
 echo "include SUBST_CONST      $ICL_CONST/CONST.EXT;"             >> $Cfile
 echo "include SUBST_FILES_ID   $ICL_FILES/FILES_CTM.EXT;"         >> $Cfile
 echo "include SUBST_EMPR_VD    $ICL_EMCTL/EMISPRM.vdif.EXT;"      >> $Cfile
 echo "include SUBST_EMPR_CH    $ICL_EMCTL/EMISPRM.chem.EXT;"      >> $Cfile
 echo "include SUBST_IOPARMS    $ICL_IOAPI/PARMS3.EXT;"            >> $Cfile
 echo "include SUBST_IOFDESC    $ICL_IOAPI/FDESC3.EXT;"            >> $Cfile
 echo "include SUBST_IODECL     $ICL_IOAPI/IODECL3.EXT;"           >> $Cfile
 echo "include SUBST_RXCMMN     $ICL_MECH/RXCM.EXT;"               >> $Cfile
 echo "include SUBST_RXDATA     $ICL_MECH/RXDT.EXT;"               >> $Cfile
 echo "include SUBST_GC_SPC     $ICL_MECH/GC_SPC.EXT;"             >> $Cfile
 echo "include SUBST_GC_EMIS    $ICL_MECH/GC_EMIS.EXT;"            >> $Cfile
 echo "include SUBST_GC_ICBC    $ICL_MECH/GC_ICBC.EXT;"            >> $Cfile
 echo "include SUBST_GC_DIFF    $ICL_MECH/GC_DIFF.EXT;"            >> $Cfile
 echo "include SUBST_GC_DDEP    $ICL_MECH/GC_DDEP.EXT;"            >> $Cfile
 echo "include SUBST_GC_DEPV    $ICL_MECH/GC_DEPV.EXT;"            >> $Cfile
 echo "include SUBST_GC_ADV     $ICL_MECH/GC_ADV.EXT;"             >> $Cfile
 echo "include SUBST_GC_CONC    $ICL_MECH/GC_CONC.EXT;"            >> $Cfile
 echo "include SUBST_GC_G2AE    $ICL_MECH/GC_G2AE.EXT;"            >> $Cfile
 echo "include SUBST_GC_G2AQ    $ICL_MECH/GC_G2AQ.EXT;"            >> $Cfile
 echo "include SUBST_GC_SCAV    $ICL_MECH/GC_SCAV.EXT;"            >> $Cfile
 echo "include SUBST_GC_WDEP    $ICL_MECH/GC_WDEP.EXT;"            >> $Cfile
 echo "include SUBST_AE_SPC     $ICL_MECH/AE_SPC.EXT;"             >> $Cfile
 echo "include SUBST_AE_EMIS    $ICL_MECH/AE_EMIS.EXT;"            >> $Cfile
 echo "include SUBST_AE_ICBC    $ICL_MECH/AE_ICBC.EXT;"            >> $Cfile
 echo "include SUBST_AE_DIFF    $ICL_MECH/AE_DIFF.EXT;"            >> $Cfile
 echo "include SUBST_AE_DDEP    $ICL_MECH/AE_DDEP.EXT;"            >> $Cfile
 echo "include SUBST_AE_DEPV    $ICL_MECH/AE_DEPV.EXT;"            >> $Cfile
 echo "include SUBST_AE_ADV     $ICL_MECH/AE_ADV.EXT;"             >> $Cfile
 echo "include SUBST_AE_CONC    $ICL_MECH/AE_CONC.EXT;"            >> $Cfile
 echo "include SUBST_AE_A2AQ    $ICL_MECH/AE_A2AQ.EXT;"            >> $Cfile
 echo "include SUBST_AE_SCAV    $ICL_MECH/AE_SCAV.EXT;"            >> $Cfile
 echo "include SUBST_AE_WDEP    $ICL_MECH/AE_WDEP.EXT;"            >> $Cfile
 echo "include SUBST_NR_SPC     $ICL_MECH/NR_SPC.EXT;"             >> $Cfile
 echo "include SUBST_NR_EMIS    $ICL_MECH/NR_EMIS.EXT;"            >> $Cfile
 echo "include SUBST_NR_ICBC    $ICL_MECH/NR_ICBC.EXT;"            >> $Cfile
 echo "include SUBST_NR_DIFF    $ICL_MECH/NR_DIFF.EXT;"            >> $Cfile
 echo "include SUBST_NR_DDEP    $ICL_MECH/NR_DDEP.EXT;"            >> $Cfile
 echo "include SUBST_NR_DEPV    $ICL_MECH/NR_DEPV.EXT;"            >> $Cfile
 echo "include SUBST_NR_ADV     $ICL_MECH/NR_ADV.EXT;"             >> $Cfile
 echo "include SUBST_NR_N2AE    $ICL_MECH/NR_N2AE.EXT;"            >> $Cfile
 echo "include SUBST_NR_CONC    $ICL_MECH/NR_CONC.EXT;"            >> $Cfile
 echo "include SUBST_NR_N2AQ    $ICL_MECH/NR_N2AQ.EXT;"            >> $Cfile
 echo "include SUBST_NR_SCAV    $ICL_MECH/NR_SCAV.EXT;"            >> $Cfile
 echo "include SUBST_NR_WDEP    $ICL_MECH/NR_WDEP.EXT;"            >> $Cfile
 echo "include SUBST_TR_SPC     $ICL_TRAC/TR_SPC.EXT;"             >> $Cfile
 echo "include SUBST_TR_EMIS    $ICL_TRAC/TR_EMIS.EXT;"            >> $Cfile
 echo "include SUBST_TR_ICBC    $ICL_TRAC/TR_ICBC.EXT;"            >> $Cfile
 echo "include SUBST_TR_DIFF    $ICL_TRAC/TR_DIFF.EXT;"            >> $Cfile
 echo "include SUBST_TR_DDEP    $ICL_TRAC/TR_DDEP.EXT;"            >> $Cfile
 echo "include SUBST_TR_DEPV    $ICL_TRAC/TR_DEPV.EXT;"            >> $Cfile
 echo "include SUBST_TR_ADV     $ICL_TRAC/TR_ADV.EXT;"             >> $Cfile
 echo "include SUBST_TR_T2AQ    $ICL_TRAC/TR_T2AQ.EXT;"            >> $Cfile
 echo "include SUBST_TR_SCAV    $ICL_TRAC/TR_SCAV.EXT;"            >> $Cfile
 echo "include SUBST_TR_WDEP    $ICL_TRAC/TR_WDEP.EXT;"            >> $Cfile
 echo                                                              >> $Cfile

 set text = "// Process Analysis / Integrated Reaction Rates processing"
 echo $text                                                        >> $Cfile
#echo "include SUBST_PACTL_ID    $ICL_PA/PA_CTL_no_irr.EXT;"       >> $Cfile
 echo "include SUBST_PACTL_ID    $ICL_PA/PA_CTL.EXT;"              >> $Cfile
 echo "include SUBST_PACMN_ID    $ICL_PA/PA_CMN.EXT;"              >> $Cfile
 echo "include SUBST_PADAT_ID    $ICL_PA/PA_DAT.EXT;"              >> $Cfile
 echo                                                              >> $Cfile

 echo "$Str1"                                                      >> $Cfile
 echo "$Str2"                                                      >> $Cfile
 echo                                                              >> $Cfile

 set text = "ctm and ctm_yamo"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModDriver};"                                                 >> $Cfile
 echo                                                              >> $Cfile

 echo "Module ${ModPar};"                                                    >> $Cfile
 echo                                                              >> $Cfile

 set text = "init and init_yamo"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModInit};"                                                   >> $Cfile
 echo                                                              >> $Cfile

 set text = "denrate and adjcon_noop"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModAdjc};"                                                   >> $Cfile
 echo                                                              >> $Cfile

 echo "Module ${ModCpl};"                                                    >> $Cfile
 echo                                                              >> $Cfile

 set text = "hppm, hyamo and hadv_noop"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModHadv};"                                                   >> $Cfile
 echo                                                              >> $Cfile

 set text = "vppm, vyamo and vadv_noop"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModVadv};"                                                   >> $Cfile
 echo                                                              >> $Cfile

 set text = "multi_scale and hdiff_noop"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModHdiff};"                                                  >> $Cfile
 echo                                                              >> $Cfile

 set text = "eddy, acm2 and vdiff_noop"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModVdiff};"                                                  >> $Cfile
 echo                                                              >> $Cfile

 set text = "phot_table, phot_sat and phot_inline"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModPhot};"                                                   >> $Cfile
 echo                                                              >> $Cfile

 set text = "ros3, smvgear, ebi_cb05cl, ebi_cb05cl_ae5, ebi_saprc99, ebi_saprc99_ae5 and chem_noop"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModChem};"                                                   >> $Cfile
 echo                                                              >> $Cfile

 set text = "aero4, aero5 and aero_noop"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModAero};"                                                   >> $Cfile
 echo                                                              >> $Cfile

 set text = "aero_depv2 and aero_depv_noop"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModAdepv};"                                                  >> $Cfile
 echo                                                              >> $Cfile

 set text = "cloud_acm, cloud_acm_ae5 and cloud_noop"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModCloud};"                                                  >> $Cfile
 echo                                                              >> $Cfile

 set text = "pa and pa_noop, which requires the"
 echo "// options are" $text "replacement of the three"            >> $Cfile
 set text = "// global include files with their pa_noop counterparts"
 echo $text                                                        >> $Cfile
 echo "Module ${ModPa};"                                                     >> $Cfile
 echo                                                              >> $Cfile

 echo "Module ${ModUtil};"                                                   >> $Cfile
 echo                                                              >> $Cfile

 echo "Module ${ModChkpnt};"                                                 >> $Cfile
 echo                                                              >> $Cfile

 if ( $?ModMisc ) then
    echo "Module ${ModMisc};"                                                >> $Cfile
    echo                                                           >> $Cfile
    endif

#> make the makefile or the model executable

 unalias mv rm
 if ( $?MakeFileOnly ) then
    if ( $?Local ) then
       $Blder -makefo -git_local $Cfile   # $Cfile = ${CFG}.bld
    else
       $Blder -makefo $Cfile
     # totalview -a $Blder -makefo $Cfile
    endif
 else   # also compile the model
    if ( $?Local ) then
       $Blder -git_local $Cfile
    else
       $Blder $Cfile
    endif
 endif

 mv Makefile $Bld/Makefile.$COMPILER
 if ( -e $Bld/Makefile.$COMPILER && -e $Bld/Makefile ) rm $Bld/Makefile
 ln -s $Bld/Makefile.$COMPILER $Bld/Makefile

 if ( $status != 0 ) then
    echo "   *** failure in $Blder ***"
    exit 1
 endif

 if ( -e "$Base/${CFG}" ) then
    echo "   >>> previous ${CFG} exists, re-naming to ${CFG}.old <<<"
    mv $Base/${CFG} $Base/${CFG}.old
 endif

 mv ${CFG}.bld $Bld/${CFG}

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#
 cd $Adj_Home
#set brnch = `git --work-tree=$M3MODEL branch`
 set brnch = `git branch`
 @ i = 0
 while ( $i < $#brnch )
    @ i++
    if ( "$brnch[$i]" == "*" ) @ l = $i + 1
 end
#set rep = `echo $M3MODEL | tr "/" "#"`
 set rep = `echo $cwd | tr "/" "#"`
 set rln = "repo:${rep},branch:${brnch[$l]},compiler:${COMPILER}"
 set ref = $Bld/$rln
 /bin/touch $ref
 if ( -d $Adj_Home/branch ) /bin/cp $Adj_Home/branch/branch.* $Bld

# /bin/cp -r $Adj_Home

 exit
