C                           DISCLAIMER
C
C   This file was generated by TAMC version 5.3.2
C
C   THE AUTHOR DOES NOT MAKE  ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES
C   ANY LEGAL LIABILITY OR  RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
C   OR USEFULNESS  OF ANY INFORMATION OR PROCESS  DISCLOSED, OR REPRESENTS
C   THAT ITS USE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
C
C   THIS CODE IS FOR NON-PROFIT-ORIENTED ACADEMIC RESEARCH AND EDUCATION
C   ONLY.  ANY COMMERCIAL OR OTHER PROFIT-ORIENTED USE OR  EVALUATION IS
C   STRICTLY  FORBIDDEN.  PASSING  THIS CODE  TO  ANY THIRD  PARTY IS  NOT
C   ALLOWED.
C
C   FOR COMMERCIAL OR  OTHER PROFIT-ORIENTED APPLICATIONS PLEASE CONTACT
C   info@FastOpt.com
C
      subroutine conv_cgrid_bwd( cgrid_bwd, jdate, jtime, cngrd_bwd )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.3.2    **
C***************************************************************
C***************************************************************

C Revision History:
C   Jul 2010 by Peter Percell at UH-IMAQS: created for adjoint/4dvar

      USE GRID_CONF           ! horizontal & vertical domain specifications
      USE CGRID_SPCS          ! CGRID species number and offsets

C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

      INCLUDE SUBST_GC_SPC    ! gas chemistry species table
      INCLUDE SUBST_AE_SPC    ! aerosol species table
      INCLUDE SUBST_NR_SPC    ! non-reactive species table
      INCLUDE SUBST_TR_SPC    ! tracer species table
      INCLUDE SUBST_CONST     ! constants
      INCLUDE SUBST_FILES_ID  ! file name parameters
      INCLUDE SUBST_IOPARMS   ! I/O parameters definitions
      INCLUDE SUBST_IODECL      ! I/O definitions and declarations

C==============================================
C define parameters                            
C==============================================
      REAL, PARAMETER :: GPKG = 1.0E+03        ! g/Kg
      REAL, PARAMETER :: MAOGPKG = MWAIR / GPKG
      REAL, PARAMETER :: GPKGOMA = 1.0 / MAOGPKG
      REAL, PARAMETER :: MAOAVO1000 = 1.0E+03 * MWAIR / AVO
      REAL, PARAMETER :: AVOOMA_001 = 1.0 / MAOAVO1000

C==============================================
C define common blocks
C==============================================

C==============================================
C define arguments
C==============================================
      REAL, POINTER :: CGRID_BWD(:,:,:,:)
      INTEGER      JDATE        ! current model date, coded YYYYDDD
      INTEGER      JTIME        ! current model time, coded HHMMSS
      REAL :: CNGRD_BWD(:,:,:,:)

C==============================================
C define local variables
C==============================================
      LOGICAL, SAVE :: FIRSTTIME = .TRUE.

      INTEGER, SAVE :: LOGDEV

      CHARACTER( 16 ), SAVE :: PNAME = 'CONV_CGRID_BWD'
      CHARACTER( 96 ) :: XMSG = ' '

      REAL      DENS( NCOLS,NROWS,NLAYS )  ! air density

      INTEGER   NSPCS, OFF
      INTEGER   C, R, L, S, V            ! loop induction variables
      INTEGER, SAVE :: NQAE              ! number of micro-grams / m**3 species
      INTEGER, SAVE :: QAE( N_AE_SPCD )  ! CGRID pointer to "" "" ""
      INTEGER, SAVE :: NNAE              ! number of  # / m**3 species
      INTEGER, SAVE :: NAE( N_AE_SPCD )  ! CGRID pointer to "" "" ""
      INTEGER, SAVE :: NSAE              ! number of  m**2 / m**3 species
      INTEGER, SAVE :: SAE( N_AE_SPCD )  ! CGRID pointer to "" "" ""
      REAL, SAVE    :: MOLWT( N_AE_SPCD ) ! only for "QAE" species

      REAL    CONV, FAC            ! temp var

      INTEGER     GXOFF, GYOFF          ! global origin offset from file
C for INTERPX
      INTEGER, SAVE :: STRTCOLMC3, ENDCOLMC3, STRTROWMC3, ENDROWMC3

C==============================================
C define data
C==============================================

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      !write(*,*) 'FIRSTTIME: ',FIRSTTIME
      if (firsttime) then
        FIRSTTIME = .FALSE.

        LOGDEV = INIT3()

        !write(LOGDEV,*) 'FIRSTTIME: ',FIRSTTIME
        !write(LOGDEV,*) 'conv_cgrid_bwd, firsttime, NSPCSD: ', NSPCSD ! dbg.7.2014.slc
        CALL CGRID_MAP(NSPCSD, GC_STRT, AE_STRT, NR_STRT, TR_STRT)
        !write(LOGDEV,*) 'conv_cgrid_bwd, after CGRID_MAP, GC_STRT: ', GC_STRT ! dbg.7.2014.slc
        !write(LOGDEV,*) 'conv_cgrid_bwd, MET_CRO_3D: ', MET_CRO_3D ! dbg.7.2014.slc

        CALL SUBHFILE(MET_CRO_3D, GXOFF, GYOFF,
     &       STRTCOLMC3, ENDCOLMC3, STRTROWMC3, ENDROWMC3)

        !write(LOGDEV,*) 'conv_cgrid_bwd, after SUBHFILE'
        !write(LOGDEV,*) 'conv_cgrid_bwd, n_ae_spc: ',n_ae_spc
        !write(LOGDEV,*) 'conv_cgrid_bwd, nqae: ',NQAE
        !write(LOGDEV,*) 'conv_cgrid_bwd, nnae: ',NNAE
        !write(LOGDEV,*) 'conv_cgrid_bwd, nsae: ',NSAE
      
C create aerosol species pointers to distinguish micro-grams / m**3,
C # / m**3 (number density), and m**2 / m**3 (surface area) species

        nqae = 0       ! no. of micro-grams / m**3 species
        nnae = 0       ! no. of  # / m**3 species
        nsae = 0       ! no. of  m**2 / m**3 species
        off = ae_strt-1

!       debug slc.6.2014

        do s = 1, n_ae_spc
          if (ae_spc(s)(1:3) .eq. 'NUM') then
            nnae = nnae+1
            nae(nnae) = off+s
          else if (ae_spc(s)(1:3) .eq. 'SRF') then
            nsae = nsae+1
            sae(nsae) = off+s
          else
            nqae = nqae+1
            qae(nqae) = off+s
            molwt(nqae) = ae_molwt(s)
          endif
        end do
      endif           !  if Firsttime

      ! dbg.2.2015.slc
      !write(*,*) 'conv_cgrid_bwd, after first time'

      IF ( .NOT. INTERPX(MET_CRO_3D, 'DENS', PNAME,
     &     STRTCOLMC3,ENDCOLMC3, STRTROWMC3,ENDROWMC3, 1,NLAYS,
     &     JDATE, JTIME, DENS) ) THEN
         XMSG = 'Could not interpolate DENS from ' // MET_CRO_3D
         CALL M3EXIT(PNAME, JDATE, JTIME, XMSG, XSTAT1)
      END IF

C Convert non-molar mixing ratio species and re-order CGRID

! (6.2014)  slc debug
      !write(*,*) 'n_gc_spc: ', n_gc_spc
      !write(LOGDEV,*) 'shape(CGRID_BWD)',shape(CGRID_BWD)
      !write(LOGDEV,*) 'sum(CNGRD_BWD)',sum(CNGRD_BWD)
      !write(*,*) 'nqae: ', nqae
      !write(*,*) 'nnae: ', nnae
      !write(*,*) 'nsae: ', nsae
      !write(*,*) 'n_nr_spc: ', n_nr_spc
      !write(*,*) 'n_tr_spc: ', n_tr_spc

C Tracers - no conversion
      nspcs = n_tr_spc
      if (nspcs .gt. 0) then
        off = tr_strt-1
        do r = 1, my_nrows
          do c = 1, my_ncols
            do l = 1, nlays
              do v = 1, nspcs
                cgrid_bwd(c,r,l,off+v) = cgrid_bwd(c,r,l,off+v)+cngrd_bwd(off+v,l,c,r)
                cngrd_bwd(off+v,l,c,r) = 0.
              end do
            end do
          end do
        end do
      endif

C Non-reactives - no conversion

      nspcs = n_nr_spc
      if (nspcs .gt. 0) then
        off = nr_strt-1
        do r = 1, my_nrows
          do c = 1, my_ncols
            do l = 1, nlays
              do v = 1, nspcs
                cgrid_bwd(c,r,l,off+v) = cgrid_bwd(c,r,l,off+v)+cngrd_bwd(off+v,l,c,r)
                cngrd_bwd(off+v,l,c,r) = 0.
              end do
            end do
          end do
        end do
      endif

C m**2/m**3 aerosol -> m**2/mol air

      nspcs = nsae
      if (nspcs .gt. 0) then
        do r = 1, my_nrows
          do c = 1, my_ncols
            do l = 1, nlays
              conv = maogpkg/dens(c,r,l)
              do v = 1, nspcs
                cgrid_bwd(c,r,l,sae(v)) = cgrid_bwd(c,r,l,sae(v))+cngrd_bwd(sae(v),l,c,r)*conv
                cngrd_bwd(sae(v),l,c,r) = 0.
              end do
            end do
          end do
        end do
      endif

C number/m**3 aerosol -> ppmv
C (Don't divide by MGPG, then multiply by 1.0E+6: 1/MGPG = 10**-6
C cancels out
C ppm = 10**6)

      nspcs = nnae
      if (nspcs .gt. 0) then
        do r = 1, my_nrows
          do c = 1, my_ncols
            do l = 1, nlays
              conv = maoavo1000/dens(c,r,l)
              do v = 1, nspcs
                cgrid_bwd(c,r,l,nae(v)) = cgrid_bwd(c,r,l,nae(v))+cngrd_bwd(nae(v),l,c,r)*conv
                cngrd_bwd(nae(v),l,c,r) = 0.
              end do
            end do
          end do
        end do
      endif

C micro-grams/m**3 aerosol -> mol/mol air <- no
C micro-grams/m**3 aerosol -> ppmv
C (Don't divide by MGPG, etc. See note above)

      nspcs = nqae
      if (nspcs .gt. 0) then
        do r = 1, my_nrows
          do c = 1, my_ncols
            do l = 1, nlays
              fac = maogpkg/dens(c,r,l)
              do v = 1, nspcs
                conv = fac/molwt(v)
                cgrid_bwd(c,r,l,qae(v)) = cgrid_bwd(c,r,l,qae(v))+cngrd_bwd(qae(v),l,c,r)*conv
                cngrd_bwd(qae(v),l,c,r) = 0.
              end do
            end do
          end do
        end do
      endif

C Gas - no conversion

      nspcs = n_gc_spc
      if (nspcs .gt. 0) then
        off = gc_strt-1
        do r = 1, my_nrows
          do c = 1, my_ncols
            do l = 1, nlays
              do v = 1, nspcs
                cgrid_bwd(c,r,l,off+v) = cgrid_bwd(c,r,l,off+v)+cngrd_bwd(off+v,l,c,r)
                cngrd_bwd(off+v,l,c,r) = 0.
              end do
            end do
          end do
        end do
      endif

      ! dbg.2.2015.slc
      !write(LOGDEV,*) 'after transpose, sum(cgrid_bwd):',sum(cgrid_bwd)
      !write(LOGDEV,*) 'after transpose, shape(cngrd_bwd):',shape(cngrd_bwd)

      return

C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
      entry rev_cgrid_bwd ( cngrd_bwd, jdate, jtime, cgrid_bwd )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.3.2    **
C***************************************************************
C***************************************************************

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (firsttime) then
        ! dbg.2.2015.slc
        FIRSTTIME = .FALSE.
        LOGDEV = INIT3()
        !write(LOGDEV,*) 'my_nrows: ',my_nrows,' my_ncols: ',my_ncols
        !write(LOGDEV,*) 'shape(cngrd_bwd): ',shape(cngrd_bwd)
        !write(LOGDEV,*) 'shape(cgrid_bwd): ',shape(cgrid_bwd)
        !write(*,*) 'n_tr_spc: ',n_tr_spc,' n_nr_spc: ',n_nr_spc
        !write(*,*) 'n_gc_spc: ',n_gc_spc,' nlays: ',nlays
        !write(*,*) 'GC_STRT: ', GC_STRT
        !write(*,*) 'NR_STRT: ', NR_STRT
        
        CALL CGRID_MAP(NSPCSD, GC_STRT, AE_STRT, NR_STRT, TR_STRT)
        CALL SUBHFILE(MET_CRO_3D, GXOFF, GYOFF,
     &       STRTCOLMC3, ENDCOLMC3, STRTROWMC3, ENDROWMC3)

        nqae = 0
        nnae = 0
        nsae = 0
        off = ae_strt-1
        do s = 1, n_ae_spc
          if (ae_spc(s)(1:3) .eq. 'NUM') then
            nnae = nnae+1
            nae(nnae) = off+s
          else if (ae_spc(s)(1:3) .eq. 'SRF') then
            nsae = nsae+1
            sae(nsae) = off+s
          else
            nqae = nqae+1
            qae(nqae) = off+s
            molwt(nqae) = ae_molwt(s)
          endif
        end do
      endif

      IF ( .NOT. INTERPX(MET_CRO_3D, 'DENS', PNAME,
     &     STRTCOLMC3,ENDCOLMC3, STRTROWMC3,ENDROWMC3, 1,NLAYS,
     &     JDATE, JTIME, DENS) ) THEN
         XMSG = 'Could not interpolate DENS from ' // MET_CRO_3D
         CALL M3EXIT(PNAME, JDATE, JTIME, XMSG, XSTAT1)
      END IF

      ! dbg.2.2015.slc
      !write(logdev,*) 'conv_cgrid_bwd, shape(cngrd_bwd): ',shape(cngrd_bwd)
      !write(logdev,*) 'conv_cgrid_bwd, sum(cgrid_bwd): ',sum(cgrid_bwd)
      !write(logdev,*) 'conv_cgrid_bwd, sum(cgrid_bwd(73)): ',sum(cgrid_bwd(:,:,:,73))
      nspcs = n_tr_spc
      if (nspcs .gt. 0) then
        off = tr_strt-1
        do v = 1, nspcs
          do l = 1, nlays
            do r = 1, my_nrows
              do c = 1, my_ncols
                cngrd_bwd(off+v,l,c,r) = cngrd_bwd(off+v,l,c,r)+cgrid_bwd(c,r,l,off+v)
                cgrid_bwd(c,r,l,off+v) = 0.
              end do
            end do
          end do
        end do
      endif
      ! dbg.2.2015.slc
      !write(*,*) 'rev_cgrid_bwd, before n_nr_spc: ',n_nr_spc
      nspcs = n_nr_spc
      if (nspcs .gt. 0) then
        off = nr_strt-1
        do v = 1, nspcs
          do l = 1, nlays
            do r = 1, my_nrows
              do c = 1, my_ncols
                cngrd_bwd(off+v,l,c,r) = cngrd_bwd(off+v,l,c,r)+cgrid_bwd(c,r,l,off+v)
                cgrid_bwd(c,r,l,off+v) = 0.
              end do
            end do
          end do
        end do
      endif
      nspcs = nsae
      if (nspcs .gt. 0) then
        do v = 1, nspcs
          do l = 1, nlays
            do r = 1, my_nrows
              do c = 1, my_ncols
                conv = gpkgoma*dens(c,r,l)
                cngrd_bwd(sae(v),l,c,r) = cngrd_bwd(sae(v),l,c,r)+cgrid_bwd(c,r,l,sae(v))*conv
                cgrid_bwd(c,r,l,sae(v)) = 0.
              end do
            end do
          end do
        end do
      endif
      nspcs = nnae
      if (nspcs .gt. 0) then
        do v = 1, nspcs
          do l = 1, nlays
            do r = 1, my_nrows
              do c = 1, my_ncols
                conv = avooma_001*dens(c,r,l)
                cngrd_bwd(nae(v),l,c,r) = cngrd_bwd(nae(v),l,c,r)+cgrid_bwd(c,r,l,nae(v))*conv
                cgrid_bwd(c,r,l,nae(v)) = 0.
              end do
            end do
          end do
        end do
      endif
      nspcs = nqae
      if (nspcs .gt. 0) then
        do v = 1, nspcs
          fac = gpkgoma*molwt(v)
          do l = 1, nlays
            do r = 1, my_nrows
              do c = 1, my_ncols
                conv = fac*dens(c,r,l)
                cngrd_bwd(qae(v),l,c,r) = cngrd_bwd(qae(v),l,c,r)+cgrid_bwd(c,r,l,qae(v))*conv
                cgrid_bwd(c,r,l,qae(v)) = 0.
              end do
            end do
          end do
        end do
      endif
      nspcs = n_gc_spc
      if (nspcs .gt. 0) then
        off = gc_strt-1
        do v = 1, nspcs
          do l = 1, nlays
            do r = 1, my_nrows
              do c = 1, my_ncols
                cngrd_bwd(off+v,l,c,r) = cngrd_bwd(off+v,l,c,r)+cgrid_bwd(c,r,l,off+v)
                cgrid_bwd(c,r,l,off+v) = 0.
              end do
            end do
          end do
        end do
      endif
      !write(logdev,*) 'after transpose, sum(cngrd_bwd): ',sum(cngrd_bwd)
      !write(logdev,*) 'after transpose, cngrd_bwd(73): ',sum(cngrd_bwd(73,:,:,:))
      !write(logdev,*) 'after transpose, shape(cgrid_bwd): ',shape(cgrid_bwd)

      end subroutine conv_cgrid_bwd
