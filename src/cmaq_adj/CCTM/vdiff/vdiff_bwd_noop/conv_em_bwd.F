C                           DISCLAIMER
C
C   This file was generated by TAMC version 5.3.2
C
C   THE AUTHOR DOES NOT MAKE  ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES
C   ANY LEGAL LIABILITY OR  RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
C   OR USEFULNESS  OF ANY INFORMATION OR PROCESS  DISCLOSED, OR REPRESENTS
C   THAT ITS USE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
C
C   THIS CODE IS FOR NON-PROFIT-ORIENTED ACADEMIC RESEARCH AND EDUCATION
C   ONLY.  ANY COMMERCIAL OR OTHER PROFIT-ORIENTED USE OR  EVALUATION IS
C   STRICTLY  FORBIDDEN.  PASSING  THIS CODE  TO  ANY THIRD  PARTY IS  NOT
C   ALLOWED.
C
C   FOR COMMERCIAL OR  OTHER PROFIT-ORIENTED APPLICATIONS PLEASE CONTACT
C   info@FastOpt.com
C
      subroutine conv_em_bwd ( cgrid_em_bwd, jdate, jtime, cngrd_em_bwd )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.3.2    **
C***************************************************************
C***************************************************************

C Revision History:
C   Jul 2010 by Peter Percell at UH-IMAQS: created for adjoint/4dvar

      USE GRID_CONF           ! horizontal & vertical domain specifications
      USE CGRID_SPCS          ! CGRID species number and offsets
      USE EMIS_DEFN, ONLY : EMSENSL

C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

!      INCLUDE SUBST_GC_SPC    ! gas chemistry species table
      INCLUDE SUBST_AE_SPC    ! aerosol species table
!      INCLUDE SUBST_NR_SPC    ! non-reactive species table
!      INCLUDE SUBST_TR_SPC    ! tracer species table
      INCLUDE SUBST_GC_DIFF   ! gas chemistry species table
      INCLUDE SUBST_AE_DIFF   ! aerosol species table
      INCLUDE SUBST_NR_DIFF   ! non-reactive species table
      INCLUDE SUBST_TR_DIFF   ! tracer species table
      INCLUDE SUBST_CONST     ! constants
      INCLUDE SUBST_FILES_ID  ! file name parameters
      INCLUDE SUBST_IOPARMS   ! I/O parameters definitions
      INCLUDE SUBST_IODECL      ! I/O definitions and declarations

C==============================================
C define parameters                            
C==============================================
      REAL, PARAMETER :: GPKG = 1.0E+03        ! g/Kg
      REAL, PARAMETER :: MAOGPKG = MWAIR / GPKG
      REAL, PARAMETER :: GPKGOMA = 1.0 / MAOGPKG
      REAL, PARAMETER :: MAOAVO1000 = 1.0E+03 * MWAIR / AVO
      REAL, PARAMETER :: AVOOMA_001 = 1.0 / MAOAVO1000

C==============================================
C define common blocks
C==============================================

C==============================================
C define arguments
C==============================================
      REAL, POINTER       :: CGRID_EM_BWD(:,:,:,:)
      INTEGER      JDATE        ! current model date, coded YYYYDDD
      INTEGER      JTIME        ! current model time, coded HHMMSS
      REAL, INTENT(INOUT) :: CNGRD_EM_BWD(:,:,:,:)

C==============================================
C define local variables
C==============================================
      LOGICAL, SAVE :: FIRSTIME = .TRUE.

      INTEGER, SAVE :: LOGDEV

      CHARACTER( 16 ), SAVE :: PNAME = 'CONV_CGRID_EM_BWD'
      CHARACTER( 96 ) :: XMSG = ' '

      REAL      DENS( NCOLS,NROWS,NLAYS )  ! air density

      INTEGER   NSPCS, OFF
      INTEGER   C, R, L, S, V            ! loop induction variables
      INTEGER, SAVE :: NQAE              ! number of micro-grams / m**3 species
      INTEGER, SAVE :: QAE( N_AE_DIFF )  ! CGRID pointer to "" "" ""
      INTEGER, SAVE :: NNAE              ! number of  # / m**3 species
      INTEGER, SAVE :: NAE( N_AE_DIFF )  ! CGRID pointer to "" "" ""
      INTEGER, SAVE :: NSAE              ! number of  m**2 / m**3 species
      INTEGER, SAVE :: SAE( N_AE_DIFF )  ! CGRID pointer to "" "" ""
      REAL, SAVE    :: MOLWT( N_AE_SPC ) ! only for "QAE" species
!
      REAL    CONV, FAC            ! temp var

      INTEGER     GXOFF, GYOFF          ! global origin offset from file
C for INTERPX
      INTEGER, SAVE :: STRTCOLMC3, ENDCOLMC3, STRTROWMC3, ENDROWMC3

      INTEGER     N_SPC_DIFF               ! global diffusion species
      PARAMETER ( N_SPC_DIFF = N_GC_DIFF   ! = N_GC_SPC + 1
     &                       + N_AE_DIFF
     &                       + N_NR_DIFF
     &                       + N_TR_DIFF)

C==============================================
C define data
C==============================================

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (firstime) then
        firstime = .FALSE.
        !write(*,*) 'conv_cgrid_em_bwd, firstime' ! dbg.7.2014.slc

        LOGDEV = INIT3()
        
        CALL SUBHFILE(MET_CRO_3D, GXOFF, GYOFF,
     &       STRTCOLMC3, ENDCOLMC3, STRTROWMC3, ENDROWMC3)

C create aerosol species pointers to distinguish micro-grams / m**3,
C # / m**3 (number density), and m**2 / m**3 (surface area) species

        nqae = 0       ! no. of micro-grams / m**3 species
        nnae = 0       ! no. of  # / m**3 species
        nsae = 0       ! no. of  m**2 / m**3 species

!       debug slc.6.2014

! *** This loop will not convert aerosol species properly because the
! molecular weight is stored in _SPC.EXT, which has different indexing
! than the _DIFF.EXT lists. Aerosol are not treated in this
! implementation, but if they are treated, the indexing issue will need
! to be addressed.
!        do s = 1, n_ae_diff
!          if (ae_diff(s)(1:3) .eq. 'NUM') then
!            nnae = nnae+1
!            nae(nnae) = off+s
!          else if (ae_diff(s)(1:3) .eq. 'SRF') then
!            nsae = nsae+1
!            sae(nsae) = off+s
!          else
!            nqae = nqae+1
!            qae(nqae) = off+s
!            molwt(nqae) = ae_molwt(s)
!          endif
!        end do
      endif           !  if Firstime

      ! dbg.2.2015.slc
      
      IF ( .NOT. INTERPX(MET_CRO_3D, 'DENS', PNAME,
     &     STRTCOLMC3,ENDCOLMC3, STRTROWMC3,ENDROWMC3, 1,NLAYS,
     &     JDATE, JTIME, DENS) ) THEN
         XMSG = 'Could not interpolate DENS from ' // MET_CRO_3D
         CALL M3EXIT(PNAME, JDATE, JTIME, XMSG, XSTAT1)
      END IF

C Convert non-molar mixing ratio species and re-order CGRID

! (6.2014)  slc debug
      !write(logdev,*) 'before transpose, sum(cngrd_em_bwd): ',sum(cngrd_em_bwd)
      !write(logdev,*) 'before transpose, size(cgrid_em_bwd): ',size(cgrid_em_bwd)

C Tracers - no conversion
      nspcs = n_tr_diff
      if (nspcs .gt. 0) then
!        off = tr_strt-1
        off = N_GC_DIFF + N_AE_DIFF + N_NR_DIFF - 1
        do r = 1, my_nrows
          do c = 1, my_ncols
            do l = 1, emsensl
              do v = 1, nspcs
                cgrid_em_bwd(c,r,l,off+v) = cgrid_em_bwd(c,r,l,off+v)+cngrd_em_bwd(off+v,l,c,r)
                cngrd_em_bwd(off+v,l,c,r) = 0.
              end do
            end do
          end do
        end do
      endif

C Non-reactives - no conversion

      nspcs = n_nr_diff
      if (nspcs .gt. 0) then
!        off = nr_strt-1
        off = N_GC_DIFF + N_AE_DIFF - 1
        do r = 1, my_nrows
          do c = 1, my_ncols
            do l = 1, emsensl
              do v = 1, nspcs
                cgrid_em_bwd(c,r,l,off+v) = cgrid_em_bwd(c,r,l,off+v)+cngrd_em_bwd(off+v,l,c,r)
                cngrd_em_bwd(off+v,l,c,r) = 0.
              end do
            end do
          end do
        end do
      endif

C m**2/m**3 aerosol -> m**2/mol air

      nspcs = nsae
      if (nspcs .gt. 0) then
        do r = 1, my_nrows
          do c = 1, my_ncols
            do l = 1, emsensl
              conv = maogpkg/dens(c,r,l)
              do v = 1, nspcs
                cgrid_em_bwd(c,r,l,sae(v)) = cgrid_em_bwd(c,r,l,sae(v))+cngrd_em_bwd(sae(v),l,c,r)*conv
                cngrd_em_bwd(sae(v),l,c,r) = 0.
              end do
            end do
          end do
        end do
      endif

C number/m**3 aerosol -> ppmv
C (Don't divide by MGPG, then multiply by 1.0E+6: 1/MGPG = 10**-6
C cancels out
C ppm = 10**6)

      nspcs = nnae
      if (nspcs .gt. 0) then
        do r = 1, my_nrows
          do c = 1, my_ncols
            do l = 1, emsensl
              conv = maoavo1000/dens(c,r,l)
              do v = 1, nspcs
                cgrid_em_bwd(c,r,l,nae(v)) = cgrid_em_bwd(c,r,l,nae(v))+cngrd_em_bwd(nae(v),l,c,r)*conv
                cngrd_em_bwd(nae(v),l,c,r) = 0.
              end do
            end do
          end do
        end do
      endif

C micro-grams/m**3 aerosol -> mol/mol air <- no
C micro-grams/m**3 aerosol -> ppmv
C (Don't divide by MGPG, etc. See note above)

      nspcs = nqae
      if (nspcs .gt. 0) then
        do r = 1, my_nrows
          do c = 1, my_ncols
            do l = 1, emsensl
              fac = maogpkg/dens(c,r,l)
              do v = 1, nspcs
                conv = fac/molwt(v)
                cgrid_em_bwd(c,r,l,qae(v)) = cgrid_em_bwd(c,r,l,qae(v))+cngrd_em_bwd(qae(v),l,c,r)*conv
                cngrd_em_bwd(qae(v),l,c,r) = 0.
              end do
            end do
          end do
        end do
      endif

C Gas - no conversion

      nspcs = n_gc_diff
      if (nspcs .gt. 0) then
!        off = gc_strt-1
        off = 0
        do r = 1, my_nrows
          do c = 1, my_ncols
            do l = 1, emsensl
              do v = 1, nspcs
                cgrid_em_bwd(c,r,l,off+v) = cgrid_em_bwd(c,r,l,off+v)+cngrd_em_bwd(off+v,l,c,r)
                cngrd_em_bwd(off+v,l,c,r) = 0.
              end do
            end do
          end do
        end do
      endif

      return

C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
      entry rev_em_bwd ( cngrd_em_bwd, jdate, jtime, cgrid_em_bwd )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.3.2    **
C***************************************************************
C***************************************************************

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (firstime) then
        firstime = .FALSE.
!        CALL CGRID_MAP(NSPCSD, GC_STRT, AE_STRT, NR_STRT, TR_STRT)
        CALL SUBHFILE(MET_CRO_3D, GXOFF, GYOFF,
     &       STRTCOLMC3, ENDCOLMC3, STRTROWMC3, ENDROWMC3)

! *** This loop will not convert aerosol species properly because the
! molecular weight is stored in _SPC.EXT, which has different indexing
! than the _DIFF.EXT lists. Aerosol are not treated in this
! implementation, but if they are treated, the indexing issue will need
! to be addressed.

        nqae = 0
        nnae = 0
        nsae = 0
!        off = ae_strt-1
!        do s = 1, n_ae_spc
!          if (ae_spc(s)(1:3) .eq. 'NUM') then
!            nnae = nnae+1
!            nae(nnae) = off+s
!          else if (ae_spc(s)(1:3) .eq. 'SRF') then
!            nsae = nsae+1
!            sae(nsae) = off+s
!          else
!            nqae = nqae+1
!            qae(nqae) = off+s
!            molwt(nqae) = ae_molwt(s)
!          endif
!        end do
      endif

      IF ( .NOT. INTERPX(MET_CRO_3D, 'DENS', PNAME,
     &     STRTCOLMC3,ENDCOLMC3, STRTROWMC3,ENDROWMC3, 1,NLAYS,
     &     JDATE, JTIME, DENS) ) THEN
         XMSG = 'Could not interpolate DENS from ' // MET_CRO_3D
         CALL M3EXIT(PNAME, JDATE, JTIME, XMSG, XSTAT1)
      END IF

! (6.2014)  slc debug
      !write(logdev,*) 'before transpose, sum(cgrid_em_bwd): ',sum(cgrid_em_bwd)
      !write(logdev,*) 'before transpose, shape(cgrid_em_bwd): ',shape(cgrid_em_bwd)
      !write(logdev,*) 'before transpose, shape(cngrd_em_bwd): ',shape(cngrd_em_bwd)
      !write(logdev,*) 'tr_diff: ',n_tr_diff
      !write(logdev,*) 'nr_diff: ',n_nr_diff
      !write(logdev,*) 'gc_diff: ',n_gc_diff      

      nspcs = n_tr_diff
      if (nspcs .gt. 0) then
!        off = tr_strt-1
        off = N_GC_DIFF + N_AE_DIFF + N_NR_DIFF - 1
        do v = 1, nspcs
          do l = 1, emsensl
            do r = 1, my_nrows
              do c = 1, my_ncols
                cngrd_em_bwd(off+v,l,c,r) = cngrd_em_bwd(off+v,l,c,r)+cgrid_em_bwd(c,r,l,off+v)
                cgrid_em_bwd(c,r,l,off+v) = 0.
              end do
            end do
          end do
        end do
      endif
      
      nspcs = n_nr_diff
      if (nspcs .gt. 0) then
!        off = nr_strt-1
        off = N_GC_DIFF + N_AE_DIFF - 1
        do v = 1, nspcs
          do l = 1, emsensl
            do r = 1, my_nrows
              do c = 1, my_ncols
                cngrd_em_bwd(off+v,l,c,r) = cngrd_em_bwd(off+v,l,c,r)+cgrid_em_bwd(c,r,l,off+v)
                cgrid_em_bwd(c,r,l,off+v) = 0.
              end do
            end do
          end do
        end do
      endif
      nspcs = nsae
      if (nspcs .gt. 0) then
        do v = 1, nspcs
          do l = 1, emsensl
            do r = 1, my_nrows
              do c = 1, my_ncols
                conv = gpkgoma*dens(c,r,l)
                cngrd_em_bwd(sae(v),l,c,r) = cngrd_em_bwd(sae(v),l,c,r)+cgrid_em_bwd(c,r,l,sae(v))*conv
                cgrid_em_bwd(c,r,l,sae(v)) = 0.
              end do
            end do
          end do
        end do
      endif
      nspcs = nnae
      if (nspcs .gt. 0) then
        do v = 1, nspcs
          do l = 1, emsensl
            do r = 1, my_nrows
              do c = 1, my_ncols
                conv = avooma_001*dens(c,r,l)
                cngrd_em_bwd(nae(v),l,c,r) = cngrd_em_bwd(nae(v),l,c,r)+cgrid_em_bwd(c,r,l,nae(v))*conv
                cgrid_em_bwd(c,r,l,nae(v)) = 0.
              end do
            end do
          end do
        end do
      endif
      nspcs = nqae
      if (nspcs .gt. 0) then
        do v = 1, nspcs
          fac = gpkgoma*molwt(v)
          do l = 1, emsensl
            do r = 1, my_nrows
              do c = 1, my_ncols
                conv = fac*dens(c,r,l)
                cngrd_em_bwd(qae(v),l,c,r) = cngrd_em_bwd(qae(v),l,c,r)+cgrid_em_bwd(c,r,l,qae(v))*conv
                cgrid_em_bwd(c,r,l,qae(v)) = 0.
              end do
            end do
          end do
        end do
      endif
      nspcs = n_gc_diff
      if (nspcs .gt. 0) then
!        off = gc_strt-1
        off = 0
        do v = 1, nspcs
          do l = 1, emsensl
            do r = 1, my_nrows
              do c = 1, my_ncols
                cngrd_em_bwd(off+v,l,c,r) = cngrd_em_bwd(off+v,l,c,r)+cgrid_em_bwd(c,r,l,off+v)
                cgrid_em_bwd(c,r,l,off+v) = 0.
              end do
            end do
          end do
        end do
      endif

      end subroutine conv_em_bwd
