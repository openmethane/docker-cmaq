!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.4 (r3376) - 10 Feb 2010 17:51
!
!***********************************************************************
!   Portions of Models-3/CMAQ software were developed or based on      *
!   information from various groups: Federal Government employees,     *
!   contractors working on a United States Government contract, and    *
!   non-Federal sources (including research institutions).  These      *
!   research institutions have given the Government permission to      *
!   use, prepare derivative works, and distribute copies of their      *
!   work in Models-3/CMAQ to the public and to permit others to do     *
!   so.  EPA therefore grants similar permissions for use of the       *
!   Models-3/CMAQ software, but users are requested to provide copies  *
!   of derivative works to the Government without restrictions as to   *
!   use by others.  Users are responsible for acquiring their own      *
!   copies of commercial software associated with Models-3/CMAQ and    *
!   for complying with vendor requirements.  Software copyrights by    *
!   the MCNC Environmental Modeling Center are used with their         *
!   permissions subject to the above restrictions.                     *
!***********************************************************************
!
! RCS file, release, date & time of last delta, author, state, [and locker]
! $Header: /Volumes/Data/CVS/CMAQ_CVSrepos/CCTM/src/aero/aero5_adj_fwd/aero_subs.f,v 1.4 2011/06/17 17:42:39 shannon Exp $
!
! what(1) key, module and SID; SCCS file; date and time of last delta:
! %W% %P% %G% %U%
!
! routines for aerosol formation and transformation processes
!
      SUBROUTINE AEROPROC(dt, col, row, layer, gamma_n2o5)
      USE SOA_DEFN
      USE AERO_DATA
      USE MET_DATA

      IMPLICIT NONE
!
! *** arguments:
!
! synchronization time step, sec
        REAL, INTENT(IN) :: dt
! Column of cell
        INTEGER, INTENT(IN) :: col
! Row of cell
        INTEGER, INTENT(IN) :: row
! Layer of cell
        INTEGER, INTENT(IN) :: layer
! N2O5 heterogeneous reaction probability [ ]
        REAL, INTENT(OUT) :: gamma_n2o5
!
! *** Parameters
! molecular diffusiviity for sulfuric acid
        REAL, PARAMETER :: diffsulf=9.36e-06
!  SQRT( 2 )
        REAL, PARAMETER :: sqrt2=1.4142135623731
! [ K ]
        REAL, PARAMETER :: t0=288.15
        REAL, PARAMETER :: twothirds=2.0/3.0
!
! *** local variables
!
! Correction to DIFFSULF & DIFFORG for pressure
        REAL :: diffcorr
! molecular diffusivity of H2SO4 vapor after correction for ambient conditions
        REAL :: dv_so4
! square root of ambient temperature
        REAL :: sqrt_temp
! atmospheric mean free path [m]
        REAL :: xlm
! atmospheric dynamic viscosity [kg/m s]
        REAL :: amu
! second moment concentration excluding H2O
        REAL :: m2_old
! third moment concentration excluding H2O
        REAL :: m3_old
!
! Aitken & Accum. modes
        REAL*8 :: cgr(n_mode-1)
!
! mean free path [ m ]
        REAL*8 :: lamda
! KNC = TWO3 * BOLTZ *  AIRTEMP / AMU
        REAL*8 :: knc
!
! *** Free Molecular regime (depends upon modal density)
! KFMAT = SQRT(3.0*BOLTZ*AIRTEMP/PDENSAT)
        REAL*8 :: kfmat
! KFMAC = SQRT(3.0*BOLTZ*AIRTEMP/PDENSAC)
        REAL*8 :: kfmac
! KFMATAC = SQRT( 6.0 * BOLTZ * AIRTEMP /
        REAL*8 :: kfmatac
!
! *** Intermodal coagulation rates [ m**3/s ] ( 0th & 2nd moments )
! Aitken to accumulation
        REAL*8 :: batac(2)
! accumulation from Aitken
        REAL*8 :: bacat(2)
!
! *** Intramodal coagulation rates [ m**3/s ] ( 0th & 2nd moments )
! Aitken mode
        REAL*8 :: batat(2)
! accumulation mode
        REAL*8 :: bacac(2)
!
! *** Intermodal coagulation rate [ m**3/s ] ( 3rd moment )
! Aitken to accumulation
        REAL*8 :: c3ij
! Aitken to accumulation
        REAL*8 :: c30atac
        REAL*8 :: dg_d(n_mode)
        REAL*8 :: sg_d(n_mode)
        REAL*8 :: xxl_d(n_mode)
!
! *** variables for advancing concentrations one time step
        REAL*8 :: a, b
        REAL*8 :: y0, y
        REAL*8 :: expdt
        REAL*8 :: loss, prod, pol, lossinv
        REAL :: tmass
! special factor to compute mass transfer
        REAL :: factrans
! for initial condidtions in time stepping
        REAL :: m20
!
! *** Variables for mode merging
        REAL :: GETAF
        REAL :: aaa, xnum, xm2, xm3, xxm2, xxm3
        REAL :: fnum, fm2, fm3, phnum, phm2, phm3
! Error and complementary error function
        REAL :: ERF, ERFC
! dummy argument for ERF and ERFC
        REAL :: xx
!
! *** local variables
! loop counter
        INTEGER :: spc
! loop counter
        INTEGER :: n
        LOGICAL :: m3_wet_flag
        LOGICAL :: limit_sg=.false.
        REAL :: result1
        INTRINSIC EXP
        INTRINSIC MAX
        REAL :: x2
        REAL :: x1
        INTRINSIC REAL
        INTRINSIC SQRT
        REAL :: y5
        REAL :: y4
        REAL :: y3
        REAL :: y2
        REAL :: y1

        ERF( XX ) = SIGN( 1.0,XX ) * SQRT( 1.0 - EXP( -4.0 * XX * XX / PI ) )
        ERFC( XX ) = 1.0 - ERF( XX )
	  
!	  integer pcontrol
!
!-----------------------------------------------------------------------
!
! *** square root of the ambient temperature for later use
        sqrt_temp = SQRT(airtemp)
! *** Calculate mean free path [ m ]:
!     6.6328E-8 is the sea level value given in Table I.2.8
!     on page 10 of U.S. Standard Atmosphere 1962
!
        xlm = 6.6328e-8*stdatmpa*airtemp/(t0*airprs)
!
! *** Calculate dynamic viscosity [ kg m**-1 s**-1 ]:
!     U.S. Standard Atmosphere 1962 page 14 expression
!     for dynamic viscosity is:
!     dynamic viscosity =  beta * T * sqrt(T) / ( T + S)
!     where beta = 1.458e-6 [ kg sec^-1 K**-0.5 ], s = 110.4 [ K ].
        amu = 1.458e-6*airtemp*sqrt_temp/(airtemp+110.4)
	  
	  
        IF (aeromode(n_mode)%min_num .LT. moment0_conc(n_mode)) THEN
          moment0_conc(n_mode) = moment0_conc(n_mode)
        ELSE
          moment0_conc(n_mode) = aeromode(n_mode)%min_num
        END IF
!
! *** Outside AEROPROC, the surface area concentration [ m**2 / m**3 ]
!     of the Aitken and accumulation modes is tracked.  Internally,
!     the 2nd moment concentration is the variable of interest.
!     Surface area = pi * 2nd moment.
        DO n=1,n_mode
          moment2_conc(n) = moment2_conc(n)/pi
        END DO
!
! *** Update the third moments, geometric mean diameters, geometric
!     standard deviations, modal mass totals, and modal particle
!     densities, based on the concentrations of M2, M0, and speciated
!     masses resulting from transport, cloud processing, and gas-phase
!     chemistry.  Ignore H2O and semi-volatile SOA (i.e., M3_WET_FLAG
!     = .FALSE.) because those species are not transported with the
!     2nd moment and their concentrations will be updated subsequently
!     to establish gas/particle equilibrium.
        m3_wet_flag = .false.
        limit_sg = .false.
        CALL GETPAR(m3_wet_flag, limit_sg)
C processControl
!        call get_pcontrol(pcontrol)
C      pcontrol = 0     ! all or all but mode merging
C      pcontrol = 1     ! SOA
C      pcontrol = 2     ! hetCHEM
C      pcontrol = 3     ! secondary inorganic & mode merging
C      pcontrol = 4     ! coagulation
C      pcontrol = 5     !secondary inorganic
C	write(*,*) "aeroproc, pcontrol=", pcontrol
!
! *** Secondary Organics
!     Update the secondary organic aerosol (SOA) mass concentrations
!     and the SVOC mass concentrations by equilibrium absorptive
!     partitioning between the particle and vapor phases.  Assume all
!     SOA resides in the accumulation mode.
!      if(pcontrol.eq.1.or.pcontrol.eq.0.or.pcontrol.eq.6)
         CALL ORGAER(dt, layer)
!
! *** Heterogeneous Chemistry
!     Update the N2O5 and HNO3 concentrations to account for
!     heterogenous nitrate formation.
!      if(pcontrol.eq.2.or.pcontrol.eq.0.or.pcontrol.eq.6)
         CALL HETCHEM(gamma_n2o5, dt)
!
! *** Secondary Inorganics
!     The VOLINORG subroutine includes the treatment of new particle
!     production and a fully dynamic treatment of inorganic gas-to-
!     particle mass transfer.
!
C! *** Compute H2SO4 diffusivity, correct for temperature and pressure
C        diffcorr = stdatmpa/airprs*(airtemp/273.16)**1.75
C        dv_so4 = diffsulf*diffcorr
!
! *** Augment 2nd and 3rd moment concentrations with H2O and recompute
!     size distribution parameters because wetted distribution is
!     needed in subroutine VOLINORG
!
        DO n=1,n_mode
          m3_old = moment3_conc(n)
          m2_old = moment2_conc(n)
          moment3_conc(n) = m3_old + h2ofac*aerospc_conc(ah2o_idx, n)
!
          moment2_conc(n) = m2_old*(moment3_conc(n)/m3_old)**twothirds
        END DO
!
        m3_wet_flag = .true.
        CALL GETPAR(m3_wet_flag, limit_sg)
	  
!      if(pcontrol.eq.3.or.pcontrol.eq.5.or.pcontrol.eq.0) then	  
! *** Compute H2SO4 diffusivity, correct for temperature and pressure
        diffcorr = stdatmpa/airprs*(airtemp/273.16)**1.75
        dv_so4 = diffsulf*diffcorr
!
C      if(pcontrol.eq.3.or.pcontrol.eq.5.or.pcontrol.eq.0)
        CALL VOLINORG(dt, col, row, layer, dv_so4, cgr, m3_wet_flag)
!      end if

!
!	  if(pcontrol.eq.4.or.pcontrol.eq.0.or.pcontrol.eq.6) then
! *** Coagulation
!     Calculate coagulation coefficients using a method dictated by
!     the value of FASTCOAG_FLAG.  If TRUE, the computationally-
!     efficient GETCOAGS routine is used.  If FALSE, the more intensive
!     Gauss-Hermite numerical quadrature method is used.  See Section
!     2.1 of Bhave et al. (2004) for further discussion.
!
! *** set atmospheric mean free path in double precision
        lamda = xlm
!
! *** calculate term used in Equation A6 of Binkowski & Shankar (1995)
        knc = twothirds*boltzmann*airtemp/amu
!
! *** calculate terms used in Equation A5 of Binkowski & Shankar (1995)
        kfmat = SQRT(3.0*boltzmann*airtemp/aeromode_dens(1))
        kfmac = SQRT(3.0*boltzmann*airtemp/aeromode_dens(2))
        kfmatac = SQRT(6.0*boltzmann*airtemp/(aeromode_dens(1)+aeromode_dens(2
     +    )))
!
! *** transfer of number to accumulation mode from Aitken mode is zero
        bacat(1) = 0.0
	  
C	  if(pcontrol.eq.4.or.pcontrol.eq.0) then
! FASTCOAG_FLAG
!
        IF (fastcoag_flag) THEN
! Solve coagulation analytically
!
! *** set geometric mean diameters, geometric standard deviations, and
!     ln(GSD) in double precision
          DO n=1,n_mode
            dg_d(n) = aeromode_diam(n)
            sg_d(n) = EXP(aeromode_sdev(n))
            xxl_d(n) = aeromode_sdev(n)
          END DO
!
! *** calculate intermodal and intramodal coagulation coefficients
!     for zeroth and second moments, and intermodal coagulation
!     coefficient for third moment
          CALL GETCOAGS(lamda, kfmatac, kfmat, kfmac, knc, dg_d(1), dg_d(2),
     +            sg_d(1), sg_d(2), xxl_d(1), xxl_d(2), batat(2), batat(1),
     +            bacac(2), bacac(1), batac(2), bacat(2), batac(1), c3ij)
!
        ELSE
! Use Gauss-Hermite numerical quadrature
!
! *** calculate Aitken-mode intramodal coagulation coefficients
!     for zeroth and second moments
          CALL INTRACOAG_GH(lamda, kfmat, knc, aeromode_diam(1), aeromode_sdev
     +                (1), batat(2), batat(1))
!
! *** calculate accumulation-mode intramodal coagulation coefficients
!     for zeroth and second moments
          CALL INTRACOAG_GH(lamda, kfmac, knc, aeromode_diam(2), aeromode_sdev
     +                (2), bacac(2), bacac(1))
!
! *** calculate intermodal coagulation coefficients for zeroth, second,
!     and third moments
          CALL INTERCOAG_GH(lamda, kfmatac, knc, aeromode_diam(1),
     +                aeromode_diam(2), aeromode_sdev(1), aeromode_sdev(2),
     +                batac(2), bacat(2), batac(1), c3ij)
!
        END IF
!
! *** calculate 3rd moment intermodal transfer rate by coagulation
        c30atac = c3ij*moment0_conc(1)*moment0_conc(2)
!
! *** TAKE ONE FORWARD TIME STEP - Solve Modal Dynamics Equations
!     This code implements Section 1.4 of Binkowski and Roselle (2003)
!     with two notable exceptions.  1) emissions are treated in
!     CMAQ's vertical diffusion routine, so they do not appear in the
!     following equations. 2) new particle formation and condensational
!     growth are now treated in the VOLINORG subroutine, so they do not
!     appear in the following equations.
!     M2 is updated before M0 because the intermodal transfer rate of
!     M2 is a function of the number concentrations.  In contrast,
!     production and loss rates of M0 are independent of M2.  Advancing
!     M2 before M0 avoids operator splitting within the modal-dynamic-
!     equation solution.  A similar rearrangement would be necessary
!     for the M3 update, but the dependence of M3 on number
!     concentrations already is accounted for in the C30ATAC term.
!
! *** UPDATE SECOND MOMENT
!     For each lognormal mode, solve equations of form:
!       dM2/dt = P2 - L2*M2   ! if L2 > 0
!     with solution
!       M2(t) = P2/L2 + ( M2(t0) - P2/L2 ) * exp( -L2*dt )
!     OR
!       dM2/dt = P2           ! if L2 = 0
!     with solution
!       M2(t) = M2(t0) + P2*dt
!
! *** Aitken mode: initial value of M2
        m20 = moment2_conc(1)
!
! *** Loss of 2nd moment from Aitken mode is due to intermodal
!     coagulation with accumulation mode and intramodal coagulation.
!     Production term is removed, because new particle formation
!     and condensational growth are accounted for in VOLINORG.
        loss = (batat(2)*moment0_conc(1)+batac(2)*moment0_conc(2))*
     +    moment0_conc(1)/m20
! test on loss
!
! *** Solve for M2_Aitken based on LOSS during this time step
!     Note: LOSS is assumed to be non-negative.
        IF (loss .GT. 0.0) THEN
          y = m20*EXP(-(loss*dt))
        ELSE
          y = m20
        END IF
        x1 = REAL(aeromode(1)%min_m2)
        y1 = REAL(y)
        IF (x1 .LT. y1) THEN
          moment2_conc(1) = y1
        ELSE
          moment2_conc(1) = x1
        END IF
!
! *** Accumulation mode: initial value of M2
        m20 = moment2_conc(2)
!
! *** Production of 2nd moment in accumulation mode is due to
!     intermodal coagulation Aitken mode
        prod = bacat(2)*moment0_conc(1)*moment0_conc(2)
!
! *** Loss of 2nd moment from accumulation mode is due only to
!     intramodal coagulation
        loss = bacac(2)*moment0_conc(2)*moment0_conc(2)/m20
! test on loss
!
! *** Solve for M2_accum based on PROD and LOSS during this time step
!     Note: LOSS is assumed to be non-negative.
        IF (loss .GT. 0.0) THEN
          pol = prod/loss
          y = pol + (m20-pol)*EXP(-(loss*dt))
        ELSE
          y = m20 + prod*dt
        END IF
        x2 = REAL(aeromode(2)%min_m2)
        y2 = REAL(y)
        IF (x2 .LT. y2) THEN
          moment2_conc(2) = y2
        ELSE
          moment2_conc(2) = x2
        END IF
!
! *** Coarse mode: no change because coagulation of coarse particles
!     is neglected in current model version.
!
! *** end of update for second moment
!
! *** Update Zeroth Moment (i.e. number concentration)
!
! *** Aitken mode: initial value of M0
!
        y0 = moment0_conc(1)
!
! *** The rate of change for M0_Aitken is described in Equation 8a of
!     Binkowski & Roselle (2003), with the c_i term equal to 0.
!
! intramodal coagulation
        a = batat(1)
! intermodal coagulation
        b = batac(1)*moment0_conc(2)
!
        expdt = EXP(-(b*dt))
        IF (expdt .LT. 1.0d0) THEN
          y = b*y0*expdt/(b+a*y0*(1.0d0-expdt))
        ELSE
! solution in the limit that B approaches zero
          y = y0
        END IF
        y3 = REAL(y)
        IF (aeromode(1)%min_num .LT. y3) THEN
          moment0_conc(1) = y3
        ELSE
          moment0_conc(1) = aeromode(1)%min_num
        END IF
!
! *** Accumulation mode: initial value of M0
        y0 = moment0_conc(2)
!
! *** The rate of change for M0_accum is described in Equation 8b of
!     Binkowski & Roselle (2003), except the coefficient C is zero
!     because emissions are treated outside the CMAQ aerosol module.
!     The equation reduces to the form: dY/dt = -A * Y**2 , where
! intramodal coagulation
        a = bacac(1)
!
! *** Solve for M0_accum using Smoluchowski's solution
        y = y0/(1.0d0+a*y0*dt)
        y4 = REAL(y)
        IF (aeromode(2)%min_num .LT. y4) THEN
          moment0_conc(2) = y4
        ELSE
          moment0_conc(2) = aeromode(2)%min_num
        END IF
!
! *** end of update for zeroth moment - note that the coarse mode number does
!     not change because coarse-mode coagulation is neglected in the model
!
! *** UPDATE MASS CONCENTRATIONS (for each species)
!     The following procedure is described in Paragraphs 21-23
!     of Binkowski & Roselle (2003), except the Ei,n and Ej,n terms
!     are excluded here because emissions are treated outside the
!     CMAQ aerosol module.
!
!     Aitken mode mass concentration rates of change are of the form:
!       dc/dt = P - L*c    ! Equation 9a of Binkowski & Roselle (2003)
!     with solution
!       c(t0 + dt) = P/L + ( c(t0) - P/L ) * exp(-L*dt)
!
!     For all species, loss of Aitken mode mass is due to intermodal
!     coagulation.
!       LOSSn = PI/6 * RHOn * C30ATAC / MASSn
!       RHOn  = MASSn / (M3 * PI/6)
!     When above equations are combined, the PI/6 terms cancel yielding
!       LOSSn = C30ATAC / M3
!     where LOSSn is the loss rate of species n, RHOn is the mass of
!     species n per unit of particle volume, C30ATAC is the 3rd moment
!     loss rate due to intermodal coagulation, MASSn is the mass
!     concentration of species n, and M3 is the 3rd moment
!     concentration.
!
        loss = c30atac/moment3_conc(1)
        factrans = loss*dt
!
! *** Set up extra variables to solve for Aitken mode mass concentrations
        expdt = EXP(-factrans)
        lossinv = 1.0/loss
!
! *** Secondary Organics and Inorganics
!     These species are produced by condensation, but their mass
!     concentrations have been updated in subroutine VOLINORG.  Therefore,
!     only the mass transfer due to intermodal coagulation is
!     treated here.
!
        DO spc=1,n_aerospc
          IF (.NOT.spc .EQ. ana_idx) THEN
            IF (.NOT.aerospc(spc)%name(1) .EQ. ' ') THEN
              tmass = aerospc_conc(spc, 1) + aerospc_conc(spc, 2)
              y5 = REAL(aerospc_conc(spc, 1)*expdt)
              IF (aerospc(spc)%min_conc(1) .LT. y5) THEN
                aerospc_conc(spc, 1) = y5
              ELSE
                aerospc_conc(spc, 1) = aerospc(spc)%min_conc(1)
              END IF
              IF (aerospc(spc)%min_conc(2) .LT. tmass - aerospc_conc(spc, 1))
     +        THEN
                aerospc_conc(spc, 2) = tmass - aerospc_conc(spc, 1)
              ELSE
                aerospc_conc(spc, 2) = aerospc(spc)%min_conc(2)
              END IF
            END IF
          END IF
        END DO
! end check on necessity for merging
!
! *** end of update for species mass concentrations
!

!         end if ! pcontrol for coagulation
! *** Mode Merging
!     This code implements Section 1.5 of Binkowski and Roselle (2003).
!     If the Aitken mode mass is growing faster than accumulation mode
!     mass and the Aitken mode number concentration exceeds the
!     accumulation mode number concentration, then modes are merged by
!     renaming.
!
!      if(pcontrol.eq.3.or.pcontrol.eq.0) then
C	if(pcontrol.eq.3) then
        IF (cgr(1) .GT. cgr(2) .AND. moment0_conc(1) .GT. moment0_conc(2))
     +  THEN
!
! *** Before mode merging, update the third moments, geometric mean
!     diameters, geometric standard deviations, modal mass totals, and
!     particle densities, based on the new concentrations of M2, M0, and
!     speciated masses calculated above.
          CALL GETPAR(m3_wet_flag, limit_sg)
!
! *** Calculate AAA = ln( Dij / DGATK ) / ( SQRT2 * XXLSGAT ), where Dij
!     is the diameter at which the Aitken-mode and accumulation-mode
!     number distributions intersect (i.e., overlap).  AAA is equivalent
!     to the "Xnum" term described below Equation 10a by Binkowski and
!     Roselle (2003).
          aaa = GETAF(moment0_conc(1), moment0_conc(2), aeromode_diam(1),
     +      aeromode_diam(2), aeromode_sdev(1), aeromode_sdev(2), sqrt2)
!
! *** Ensure that Xnum is large enough so that no more than half of
!     the Aitken mode mass is merged into the accumulation mode during
!     any given time step.  This criterion is described in Paragraph 26
!     of Binkowski and Roselle (2003).
          xxm3 = 3.0*aeromode_sdev(1)/sqrt2
          IF (aaa .LT. xxm3) THEN
            xnum = xxm3
          ELSE
            xnum = aaa
          END IF
!
! *** Factors used in error function calls for M2 and M3 mode merging
          xxm2 = twothirds*xxm3
! set up for 2nd moment transfer
          xm2 = xnum - xxm2
! set up for 3rd moment and mass transfers
          xm3 = xnum - xxm3
!
! *** Calculate the fractions of the number, 2nd, and 3rd moment
!     distributions with diameter greater than the intersection diameter
! Eq 10a of B&R 2003
          result1 = ERFC(xnum)
          fnum = 0.5*result1
! Eq 10b of B&R 2003
          result1 = ERFC(xm2)
          fm2 = 0.5*result1
! Eq 10b of B&R 2003
          result1 = ERFC(xm3)
          fm3 = 0.5*result1
!
! *** Calculate the fractions of the number, 2nd, and 3rd moment
!     distributions with diameters less than the intersection diameter.
! Eq 10c of B&R 2003
          result1 = ERF(xnum)
          phnum = 0.5*(1.0+result1)
! Eq 10d of B&R 2003
          result1 = ERF(xm2)
          phm2 = 0.5*(1.0+result1)
! Eq 10d of B&R 2003
          result1 = ERF(xm3)
          phm3 = 0.5*(1.0+result1)
!
! *** Update accumulation-mode moment concentrations using
!     Equations 11a - 11c of Binkowski and Roselle (2003).
          moment0_conc(2) = moment0_conc(2) + moment0_conc(1)*fnum
          moment2_conc(2) = moment2_conc(2) + moment2_conc(1)*fm2
          moment3_conc(2) = moment3_conc(2) + moment3_conc(1)*fm3
!
! *** Update Aitken-mode moment concentrations using
!     Equations 11d - 11f of Binkowski and Roselle (2003).
          moment0_conc(1) = moment0_conc(1)*phnum
          moment2_conc(1) = moment2_conc(1)*phm2
          moment3_conc(1) = moment3_conc(1)*phm3
! *** Rename masses of each species from Aitken mode to acumulation mode
!     using Equation 11b of Binkowski and Roselle (2003).
          DO spc=1,n_aerospc
            IF (.NOT.spc .EQ. ana_idx) THEN
              IF (.NOT.spc .EQ. acl_idx) THEN
                IF (.NOT.aerospc(spc)%name(1) .EQ. ' ') THEN
!
                  aerospc_conc(spc, 2) = aerospc_conc(spc, 2) + aerospc_conc(
     +              spc, 1)*fm3
                  aerospc_conc(spc, 1) = aerospc_conc(spc, 1)*phm3
                END IF
              END IF
            END IF
          END DO
        END IF
!
!
! *** end of update for mode merging

!      end if ! pcontrol for mode merging
!
! *** Update the third moments, geometric mean diameters, geometric
!     standard deviations, modal mass totals, and particle densities,
!     based on the final concentrations of M2, M0, and speciated masses
!     after mode merging is complete.
        CALL GETPAR(m3_wet_flag, limit_sg)
!
! *** Set minimum value for all concentrations in the CBLK array
!
        DO n=1,n_mode
          DO spc=1,n_aerospc
            IF (aerospc_conc(spc, n) .LT. aerospc(spc)%min_conc(n)) THEN
              aerospc_conc(spc, n) = aerospc(spc)%min_conc(n)
            ELSE
              aerospc_conc(spc, n) = aerospc_conc(spc, n)
            END IF
          END DO
        END DO
!
        RETURN
      END SUBROUTINE AEROPROC

C /////////////////////////////////////////////////////////////////////
      SUBROUTINE VOLINORG( DT, COL, ROW, LAYER,
     &                     DV_SO4, CGR, M3_WET_FLAG )

C *** Calculates the partitioning of inorganic components (CL,NO3,NH4,SO4)
C     between the aerosol and gas phase over the operator synchronization
C     timestep (DT). Partitioning is calculated using the Hybrid approach,
C     where dynamic mass transfer of species to/from the coarse mode is
C     calculated using multiple sub-operator time steps (TSTEP) and the
C     fine modes are equilibrated with the gas phase. The mass transfer
C     calculations are made using the H+ flux-limiting approach of Pilinis
C     et al. (2000). If 'OPTIONFLAG' is not set to 'Hybrid', the mass
C     transfer calculations for the coarse mode are skipped, and the fine
C     modes are equilibrated with the gas phase.

C     Returns updated volatile inorganic species concentrations in the gas
C     and particulate phase, and the aerosol modal parameters

C *** Revision history: 4/07 - Moved HCOND3 and NEWPART3 calls from 
C                              AEROPROC to this subroutine for 
C                              mass transfer calculation  
C     15 Jul 08, J.Young, P.Bhave: increased cutoff to hybrid from .01 to .05 ug/m**3
C                J.Young: change 'OPTIONFLAG' to just a logical variable, 'Hybrid'

C *** References
C 1. Pilinis C, Capaldo KP, Nenes A, Pandis SN (2000) MADM - A new
C    multicomponent aerosol dynamics model. AEROSOL SCIENCE AND TECHNOLOGY.
C    32(5):482-502
C
C 2. Capaldo KP, Pilinis C, Pandis SN (2000) A computationally efficient hybrid
C    approach for dynamic gas/aerosol transfer in air quality models. ATMOSPHERIC
C    ENVIRONMENT. 34(21):3617-3627

      USE aero_data
      USE precursor_data
      USE soa_defn
      USE met_data

      IMPLICIT NONE

C *** Arguments:

      REAL    DT              ! time step [sec]
      INTEGER COL             ! grid column index
      INTEGER ROW             ! grid row index
      INTEGER LAYER           ! model layer index
      REAL    DV_SO4          ! molecular diffusivity of H2SO4 vapor 
                              ! after correction for ambient conditions
      REAL( 8 ) :: CGR( N_MODE-1 ) ! 3rd moment SO4 growth rate [m^3/m^3-s]
      LOGICAL M3_WET_FLAG  ! flag to include water in GETPAR update

C *** Parameters: 

      INTEGER, PARAMETER :: NINORG = 6          ! number of inorganic species
      INTEGER, PARAMETER :: NVOLINORG = 3       ! number of volatile inorganic species

      ! indices for inorganic species
      INTEGER, PARAMETER :: KNH4 = 1, KNO3 = 2, KCL  = 3, KSO4 = 4, KNA = 5, KHP = 6

      REAL( 8 ), PARAMETER :: MWH2SO4 = 98.0 ! molecular weight for H2SO4
      REAL( 8 ), PARAMETER :: FAERH2SO4 = 1.0E-6 / MWH2SO4
      REAL( 8 ), PARAMETER :: D_TWOTHIRDS = 2.0D0 / 3.0D0

      REAL, PARAMETER :: CUTOFF = 0.05   ! [ug/m**3]

      REAL, PARAMETER :: ALPHSULF = 0.1 ! Accommodation coefficient for sulfuric acid
                                        ! see Capaldo et al. (2000)

C *** Local Variables:

C *** Inputs to subroutine HCOND3

      REAL, SAVE :: COFCBAR_SO4  ! Temperature-independent coefficients
                                 ! for caculating molecular vel [m/s]
                                 ! = sqrt((8*Rgas)/(pi*MW)) 
      REAL         CBAR_SO4      ! molecular velocity of H2SO4                      

      REAL( 8 ) :: AM0( N_MODE ) ! zeroth moments
      REAL( 8 ) :: AM1( N_MODE ) ! first moments
      REAL( 8 ) :: AM2( N_MODE ) ! second moments

C *** Outputs from HCOND3: size-dependent term in the condensational-growth 
C     expressions defined in Equations A13-A14 of [Binkowski & Shankar,1995]
      REAL( 8 ) :: FCONC_SO4( N_MODE,2 )  ! All sizes 2nd and 3rd moments
      REAL( 8 ) :: FCONCM1_SO4       ! reciprocals of total SO4 cond rates

C *** Modal partition factors [ dimensionless ]
C     defined in Equations A17-A18 of [Binkowski & Shankar,1995]
      REAL( 8 ) :: OMEGA_AT_SO4  ! Aitken mode 2nd and 3rd moments
      REAL( 8 ) :: OMEGA_AC_SO4  ! Accumulation mode 2nd and 3rd moments
      REAL( 8 ) :: OMEGA( 2 )    ! partitioning coefficient for equilibrium PM mass

C *** Variables for new particle formation:
      REAL XH2SO4            ! steady state H2SO4 concentration
      REAL( 8 ) :: DMDT_SO4  ! particle mass production rate [ ug/m**3 s ]
      REAL( 8 ) :: DNDT      ! particle number production rate [ # / m**3 s ]
      REAL( 8 ) :: DM2DT     ! second moment production rate [ m**2 / m**3 s]
      REAL( 8 ) :: SCONDRATE ! SO4 condensation rate [ ug/m**3 s ]

C *** Mode-specific sulfate production rate [ ug/m**3 s ]
      REAL(8) :: CONDSO4( N_MODE )      ! sulfate condensation rate [ ug/m**3 s ]
      REAL( 8 ) :: RATE                 ! CONDSO4 or cond+nucl rate

C *** Size-dependent portion of mass-transfer rate equation
      REAL( 8 ) :: GRFAC1( N_MODE )     ! 2nd moment [ m**2/m**3-s ] 
      REAL( 8 ) :: GRFAC2( N_MODE )     ! 3rd moment [ m**3/m**3-s ] 
      
C *** ISORROPIA input variables
      REAL( 8 ) :: WI( NINORG - 1 )     ! species array
      REAL( 8 ) :: RHI                  ! relative humidity
      REAL( 8 ) :: TEMPI                ! temperature
      REAL( 8 ) :: CNTRL( 2 )           ! control parameters 

C *** ISORROPIA output variables
      REAL( 8 ) :: WT( NINORG - 1 )     ! species output array
      REAL( 8 ) :: GAS( 3 )             ! gas-phase   "     " 
      REAL( 8 ) :: AERLIQ( 12 )         ! liq aerosol "     " 
      REAL( 8 ) :: AERSLD( 9 )          ! solid "     "     " 
      REAL( 8 ) :: OTHER( 6 )           ! supplmentary output array
      CHARACTER( 15 ) :: SCASI          ! subcase number output

C *** Variables to account for mass conservation violations in ISRP3F
      LOGICAL TRUSTNH4                  ! false if ISOROPIA's partitioning
                                        !  of NH4/NH3 is to be ignored
      LOGICAL TRUSTCL                   ! false if ISOROPIA's partitioning       
                                        !  of Cl/HCl is to be ignored

C *** Initial (double-precision) concentrations [ug/m3]
      REAL( 8 ) :: GNH3R8               ! gas-phase ammonia
      REAL( 8 ) :: GNO3R8               ! gas-phase nitric acid
      REAL( 8 ) :: GCLR8                ! gas-phase hydrochloric acid
      REAL( 8 ) :: H2OR8                ! aerosol LWC

C *** Variables for volatile species mass transfer between gas and aerosol and
C     mass partitioning between the modes 
      LOGICAL HYBRID ! mass transfer option flag (mass transfer if .TRUE.)
      REAL( 8 ) :: DELT                 ! time step DT [s]
      REAL( 8 ) :: HPLUS( N_MODE )      ! scratch var for H+ [umol/m**3]

      REAL(8), SAVE :: H2SO4RATM1       ! Mol. wt. ratio of SO4/H2SO4

      REAL( 8 ) :: JH2SO4 ! flux of cond./evap. H2SO4 (mol/m3/s)
      REAL( 8 ) :: CH2SO4 ! concentration of H2SO4 before cond/evap (mol/m3)
      REAL( 8 ) :: DVOLINORG( NVOLINORG ) ! vol inorg spcs mass to be xferred [mol/m3]
      REAL( 8 ) :: DVOLMAX                ! max value for DVOLINORG 
      REAL( 8 ) :: CINORG( NINORG,N_MODE ) ! scratch array for inorg spcs [ug/m**3]
      REAL( 8 ) :: INT_TIME               ! internal mass transfer time (s)
      REAL( 8 ) :: TSTEP                  ! mass transfer time step [s]
      REAL( 8 ) :: DRYM20, Y              ! scratch vars for 2nd moment [m**2/m**3]
      REAL( 8 ) :: M3OTHR, M3SOA          ! vars for 3rd moment calculation [m**3/m**3]
      REAL( 8 ), SAVE :: DF( NVOLINORG )  ! scratch array for mole -> ug conversion
      REAL( 8 ), SAVE :: DFH2OR8          ! mole -> ug conversion for H2O
      REAL( 8 ) :: CONVFAC           ! conversion factor for SO4 conc from DH2SO4/DT
      REAL( 8 ) :: J(NVOLINORG)      ! condensation/evaporation flux [mol/m**3-s]
      REAL( 8 ) :: CFINAL( NVOLINORG,N_MODE ) ! conc after mass xfer step [ug/m**3]
      REAL( 8 ) :: H2O                  ! Scratch LWC variable for output
      REAL( 8 ) :: H2O_NEW              ! Update of LWC after condensation 
      REAL( 8 ) :: SO4                  ! modal SO4 after condensation or cond + nucl
      REAL( 8 ) :: DMASS( NVOLINORG )   ! excess mass in fine mode partitioning
      REAL( 8 ) :: DDRYM3DT             ! rate of 3rd moment transfer - dry inorg spcs
      REAL( 8 ) :: DDRYM2DT             ! rate of 2nd moment transfer -  "     "    "
      REAL( 8 ) :: DRYM3, WETM3         ! scratch vars for 3rd moment calc [m**3/m**3]
      REAL( 8 ) :: DRYM2, WETM2         ! scratch vars for 2nd moment calc [m**2/m**3]
      REAL( 8 ) :: LOSS                 ! rate of loss of second moment [1/s] 

      REAL( 8 ) :: TMP
      INTEGER I, N                      ! loop and array indices
      INTEGER IMODE                     ! mode loop index  
      INTEGER ISTEP                     ! loop index, mass transfer time step loop
      INTEGER ISP                       ! loop index, species loop
      INTEGER, SAVE :: LOGDEV 
      LOGICAL, PARAMETER :: LIMIT_Sg = .TRUE.   ! fix Sg at current value?
      LOGICAL TrustIso                  ! For negative vap. press., TrustIso = F 

C *** Local Saved Variables 
      LOGICAL, SAVE :: FIRSTIME = .TRUE.
      LOGICAL, SAVE :: FIRSTWRITE = .TRUE.
      REAL( 8 ), SAVE :: SO4FAC         !  F6DPIM9 / RHOSO4
      REAL( 8 ), SAVE :: SOILFAC        !  F6DPIM9 / RHOSOIL
      REAL( 8 ), SAVE :: ANTHFAC        !  F6DPIM9 / RHOANTH
      REAL( 8 ), SAVE :: NH3RAT         ! Mol. wt ratios NH3/NH4
      REAL( 8 ), SAVE :: HNO3RAT        ! Mol. wt ratios HNO3/NO3
      REAL( 8 ), SAVE :: HCLRAT         ! Mol. wt ratios HCL/CL 

C *** Begin Execution
 
      IF ( FIRSTIME ) THEN
         FIRSTIME = .FALSE.
         COFCBAR_SO4 = SQRT( 8.0 * RGASUNIV / ( PI * MWH2SO4 * 1.0E-3 ) )
         H2SO4RATM1 = AEROSPC_MW( ASO4_IDX ) / MWH2SO4
         SO4FAC  = 1.0E-9 * F6DPI / AEROSPC( ASO4_IDX )%DENSITY
         SOILFAC = 1.0E-9 * F6DPI / AEROSPC( ASOIL_IDX )%DENSITY
         ANTHFAC = 1.0E-9 * F6DPI / AEROSPC( ACORS_IDX )%DENSITY

         DF( KNH4 ) = 1.0D6 * AEROSPC_MW( ANH4_IDX )
         DF( KNO3 ) = 1.0D6 * AEROSPC_MW( ANO3_IDX )
         DF( KCL )  = 1.0D6 * AEROSPC_MW( ACL_IDX )
         DFH2OR8    = 1.0D6 * MWWAT      ! aerospc_mw(AH2O_IDX) (18.0 != 18.0153)

         ! Mol. wt ratios NH3/NH4, HNO3/NO3, HCL/CL
         NH3RAT  = PRECURSOR_MW( NH3_IDX )  / AEROSPC_MW( ANH4_IDX )
         HNO3RAT = PRECURSOR_MW( HNO3_IDX ) / AEROSPC_MW( ANO3_IDX )
         HCLRAT  = PRECURSOR_MW( HCL_IDX )  / AEROSPC_MW( ACL_IDX )
      END IF

C *** Determine if Hybrid
      TMP = 0.0
      DO I = 1, N_AEROSPC
         IF ( AEROSPC( I )%CHARGE .NE. 0 ) TMP = TMP + AEROSPC_CONC( I,N_MODE )
      END DO
      HYBRID = ( TMP .GE. CUTOFF ) .AND. ( AIRRH .GE. 0.18 )
!slz
      hybrid=.false.

      DELT  = DBLE( DT )
      CONVFAC = DELT * H2SO4RATM1

      TEMPI = AIRTEMP             ! assume const within synch timestep
      RHI   = MIN( 0.95, AIRRH )  ! "        "     "      "     "

C *** Calculate molecular velocities (temperature dependent) and
C     H+ concentration

      CBAR_SO4 = COFCBAR_SO4 * SQRT( AIRTEMP )

      HPLUS = 0.0
      DO I = 1, N_MODE
         DO N = 1, N_AEROSPC
            HPLUS( I ) = HPLUS( I )
     &                 + AEROSPC( N )%CHARGE * AEROSPC_CONC( N,I ) / AEROSPC_MW( N )
         END DO
      END DO

C *** Condensational Growth (Size-dependent terms)
C     Calculate intermediate variables needed to determine the 2nd and
C     3rd moment condensational-growth rates.  3rd moment terms are 
C     needed for the calculation of new particle production.  See 
C     Section 3.3 of Jiang & Roth (2003) for a detailed discussion.
C    
C *** Calculate first moments using Equation 4 of Binkowski & Shankar
C     (1995) or Equation 3 of Binkowski and Roselle (2003).
C     N.B: these are for a "wet" size distribution

      DO I = 1, N_MODE
         AM0( I ) = MOMENT0_CONC( I ) 
         AM1( I ) = MOMENT0_CONC( I ) * AEROMODE_DIAM( I )
     &            * EXP(0.5 * AEROMODE_SDEV( I ) * AEROMODE_SDEV( I ) )
         AM2( I ) = MOMENT2_CONC( I )
      END DO
      
C *** Calculate the size-dependent terms in the condensational-
C     growth factor expressions for sulfate using 
C     Equations A13-A14 of Binkowski & Shankar (1995). 
       
      DO I = 1, N_MODE
         CALL HCOND3( AM0( I ), AM1( I ), AM2( I ),
     &                DV_SO4, ALPHSULF, CBAR_SO4, FCONC_SO4( I,: ) )
      END DO 

      IF ( .NOT.HYBRID ) THEN
         FCONC_SO4( N_MODE,1 ) = 0.D0
         FCONC_SO4( N_MODE,2 ) = 0.D0
      END IF

      DO I = 1, N_MODE
         GRFAC1( I ) = FCONC_SO4( I,1 )
         GRFAC2( I ) = FCONC_SO4( I,2 )
      END DO

C *** New Particle Production
C     Calculate the new particle production rate due to binary
C     nucleation of H2O and H2SO4.  These calculations are performed 
C     only when the gas-phase production rate of H2SO4 (i.e., SO4RATE) 
C     is non-zero.  The condensation rate of H2SO4 is calculated as the
C     gas-phase production rate minus the new particle production rate.

C *** Initialize Variables
      DMDT_SO4  = 0.0D0
      DNDT      = 0.0D0
      DM2DT     = 0.0D0
      SCONDRATE = 0.0D0

C *** Produce new particles only during time steps when the gas-phase 
C     production rate of H2SO4 is non-zero

      IF ( SO4RATE .NE. 0.0D0 ) THEN

C *** Adjust sulfuric acid vapor concentration to a value in
C     equilibrium with the production of new particles and the
C     condensation of sulfuric acid vapor on existing particles, based 
C     on Equations A21 and A23 of Binkowski & Shankar (1995).
         TMP = 0.0
         DO I = 1, N_MODE
            TMP = TMP + FCONC_SO4( I,2 )
         END DO

         XH2SO4 = SO4RATE / TMP
         XH2SO4 = MAX( XH2SO4, CONMIN )
         PRECURSOR_CONC( SULF_IDX ) = XH2SO4

C *** Calculate new particle production rate for 0th, 2nd, & 3rd moments
         CALL NEWPART3 ( AIRRH, AIRTEMP, XH2SO4, SO4RATE,
     &                   DNDT, DMDT_SO4, DM2DT )
         
C *** Calculate sulfate condensation rate as the gas-phase production 
C     rate minus the new particle production rate, following Equation
C     3.23 of Jiang & Roth (2003).
         SCONDRATE = MAX( SO4RATE - DMDT_SO4, 0.0D0 )

      END IF   ! SO4RATE .NE. 0

C *** Sulfate Condensation (Size-resolved)
C     Calculate rate at which condensing sulfate should be added to each
C     mode.  The "omega" factors are defined in Equations 7a and 7b of
C     Binkowski & Shankar (1995). The i-mode and j-mode factors are 
C     calculated using Equation A17 of Binkowski & Shankar (1995). The 
C     condensation rate for accumulation mode (fine-equilibrium scheme) or 
C     coarse mode (hybrid and dynamic schemes) is computed by difference, 
C     to avoid mass conservation violations arising from numerical error.

      TMP = 0.0
      DO I = 1, N_MODE
         TMP = TMP + FCONC_SO4( I,2 )
      END DO

      FCONCM1_SO4  = 1.0D0 / TMP
      OMEGA_AT_SO4 = FCONCM1_SO4 * FCONC_SO4( 1,2 )
      OMEGA_AC_SO4 = FCONCM1_SO4 * FCONC_SO4( 2,2 )

C *** Growth values for mode merge condition
      CGR( 1 ) = SO4FAC * SCONDRATE * OMEGA_AT_SO4
      CGR( 2 ) = SO4FAC * SCONDRATE * OMEGA_AC_SO4

      CONDSO4( 1 ) = OMEGA_AT_SO4 * SCONDRATE      
      
      IF ( HYBRID ) THEN 
         CONDSO4( 2 ) = OMEGA_AC_SO4 * SCONDRATE      
         CONDSO4( 3 ) = SCONDRATE - ( CONDSO4( 1 ) + CONDSO4( 2 ) ) 
      ELSE                                  ! fine equilibrium
         CONDSO4( 2 ) = SCONDRATE - CONDSO4( 1 )
         CONDSO4( 3 ) = 0.0D0               ! no coarse mode chemistry
      END IF


C *** For Hybrid approach, calculate dynamic mass trasfer for
C     semi-volatile components of coarse mode (NO3, CL, NH4)  
      IF ( HYBRID ) THEN 

         INT_TIME = 0.0D0
         TSTEP    = 90.0D0
         ISTEP    = 1
         IMODE    = 3
         TrustIso = .TRUE.
 
         DO WHILE ( INT_TIME .LT. DELT ) 

            IF ( INT_TIME + TSTEP .GT. DELT ) TSTEP = DELT - INT_TIME 
            INT_TIME = INT_TIME + TSTEP 
            ISTEP = ISTEP + 1   

            IF ( ISTEP .GT. 1 ) THEN

C *** Calculate first moments using Equation 4 of Binkowski & Shankar
C     (1995) or Equation 3 of Binkowski and Roselle (2003).
C     N.B: these are for a "wet" size distribution

               AM0( 3 ) = MOMENT0_CONC( 3 )
               AM1( 3 ) = MOMENT0_CONC( 3 ) * AEROMODE_DIAM( 3 )
     &                  * EXP( 0.5 * AEROMODE_SDEV( 3 ) * AEROMODE_SDEV( 3 ) )
               AM2( 3 ) = MOMENT2_CONC( 3 )

C *** Calculate the size-dependent terms in the condensational-
C     growth factor expressions for sulfate using 
C     Equations A13-A14 of Binkowski & Shankar (1995). 
               
               CALL HCOND3( AM0( 3 ), AM1( 3 ), AM2( 3 ), DV_SO4, ALPHSULF, 
     &                      CBAR_SO4, FCONC_SO4( 3,: ) )  ! adapted from Eq A14

               GRFAC1( 3 ) = FCONC_SO4( 3,1 ) 
               GRFAC2( 3 ) = FCONC_SO4( 3,2 ) 

            END IF               ! if ISTEP .GT. 1

C *** Set conc array to aerosol concentrations prior to mass transfer

            CINORG( KNH4,IMODE ) = AEROSPC_CONC( ANH4_IDX,IMODE )
            CINORG( KNO3,IMODE ) = AEROSPC_CONC( ANO3_IDX,IMODE )
            CINORG( KCL, IMODE ) = AEROSPC_CONC( ACL_IDX,IMODE )
            CINORG( KSO4,IMODE ) = AEROSPC_CONC( ASO4_IDX,IMODE )
            CINORG( KNA, IMODE ) = AEROSPC_CONC( ANA_IDX,IMODE )
            CINORG( KHP, IMODE ) = HPLUS( IMODE )

            M3OTHR = SOILFAC * AEROSPC_CONC( ASOIL_IDX,IMODE )
     &             + ANTHFAC * AEROSPC_CONC( ACORS_IDX,IMODE )
            M3SOA  = 0.0D0
            WETM3  = MOMENT3_CONC( IMODE )
            WETM2  = MOMENT2_CONC( IMODE )
            DRYM3  = WETM3 - DBLE( H2OFAC * AEROSPC_CONC( AH2O_IDX, IMODE ) )
            DRYM20 = WETM2 * ( DRYM3 / WETM3 ) ** D_TWOTHIRDS

C *** Initial vapor-phase concentrations [ug/m3]
            GNO3R8 = PRECURSOR_CONC( HNO3_IDX )
            GNH3R8 = PRECURSOR_CONC( NH3_IDX )
            GCLR8  = PRECURSOR_CONC( HCL_IDX )

C *** This section of code calculates the distribution of ammonia/
C     ammonium, nitric acid/nitrate, and water between the gas and 
C     aerosol phases as a function of total sulfate, total ammonia, 
C     total nitrate, relative humidity, and temperature.  It is assumed
C     that the aerosol is entirely aqueous (i.e., metastable assumption),
C     irrespective of ambient relative humidity.

C *** Compute sulfate production rate [ug/m3 s] for coarse mode

            RATE = CONDSO4( IMODE )
            SO4  = CINORG( KSO4,IMODE ) + RATE * TSTEP * H2SO4RATM1

            IF ( TrustIso ) THEN

C *** Double Precision vars for ISORROPIA [mole/m3]
               WI( 1 ) = CINORG( KNA, IMODE ) * ( 1.0D-6 / AEROSPC_MW( ANA_IDX ) )
               WI( 2 ) =                  SO4 * ( 1.0D-6 / AEROSPC_MW( ASO4_IDX ) )
               WI( 3 ) = CINORG( KNH4,IMODE ) * ( 1.0D-6 / AEROSPC_MW( ANH4_IDX ) )
               WI( 4 ) = CINORG( KNO3,IMODE ) * ( 1.0D-6 / AEROSPC_MW( ANO3_IDX ) )
               WI( 5 ) = CINORG( KCL, IMODE ) * ( 1.0D-6 / AEROSPC_MW( ACL_IDX ) )

               CNTRL( 1 ) = 1.0D0 ! reverse problem
               CNTRL( 2 ) = 1.0D0 ! aerosol in metastable state

C *** Set flags to account for mass conservation violations in ISRP3F

               TRUSTCL  = .TRUE.
               TRUSTNH4 = .TRUE.
               IF ( WI( 1 ) + WI( 5 ) .LT. 1.0D-20 ) THEN
                  TRUSTCL = .FALSE.
               ELSE
                  IF ( WI( 3 ) .LT. 1.0D-10 ) TRUSTNH4 = .FALSE.
                  IF ( WI( 5 ) .LT. 1.0D-10 ) TRUSTCL  = .FALSE.
               END IF

C     WI( 1 ) = NA    [mol/m3]
C     WI( 2 ) = SO4      "
C     WI( 3 ) = NH4      "
C     WI( 4 ) = NO3      "
C     WI( 5 ) = CL       "
C     GAS(1) = NH3, GAS(2) = HNO3, GAS(3) = HCl

               CALL ISOROPIA( WI, RHI, TEMPI, CNTRL, WT, GAS, AERLIQ,  
     &                        AERSLD, SCASI, OTHER, TrustIso )
C
               IF ( GAS( 1 ) .LT. 0.0D0 .OR. GAS( 2 ) .LT. 0.0D0 .OR.
     &              GAS( 3 ) .LT. 0.0D0 ) THEN
                  IF ( FIRSTWRITE ) THEN
                     FIRSTWRITE = .FALSE.
                     WRITE( LOGDEV,2023 )
                  END IF
                  WRITE( LOGDEV,2029 ) COL, ROW, LAYER, GAS( 1 ), GAS( 2 ), GAS( 3 )
                  TrustIso = .FALSE.
               END IF

            END IF   ! TrustIso

C *** Change in volatile inorganic PM concentration to achieve
C     equilibrium, calculated as initial-gas-phase concentration minus 
C     equilibrium gas-phase concentration. DVOLINORG is positive for
C     condensation and negative for evaporation.

            DVOLINORG( KNH4 ) = GNH3R8 * ( 1.0D-6 / PRECURSOR_MW( NH3_IDX ) ) - GAS( 1 )  
            DVOLINORG( KNO3 ) = GNO3R8 * ( 1.0D-6 / PRECURSOR_MW( HNO3_IDX ) ) - GAS( 2 ) 
            DVOLINORG( KCL )  = GCLR8  * ( 1.0D-6 / PRECURSOR_MW( HCL_IDX ) ) - GAS( 3 ) 
           
C *** Calculate condensation/evaporation flux for this time step and update 
C     volatile species concentrations.  final aerosol conc set to be  
C     no less than the minimum aerosol conc

            IF ( TrustIso ) THEN
              CALL COMPUTE_FLUX( NVOLINORG, GNH3R8, GNO3R8, GCLR8, KNH4,
     &           KNO3, KCL, GAS( 1:3 ), GRFAC2( IMODE ), AERLIQ( 1 ), RATE, J )
            ELSE
              J( : ) = 0.0D0
            END IF 

            IF ( J( KNH4 ) * TSTEP * DF( KNH4 ) * NH3RAT .GT. GNH3R8 ) THEN
               WRITE( LOGDEV,* ) 'Condensed amt. exceeds NH3 conc: aero_subs.f'
               J( KNH4 ) = GNH3R8 / ( TSTEP * DF( KNH4 ) * NH3RAT )
            END IF
            IF ( J( KNO3 ) * TSTEP * DF( KNO3 ) * HNO3RAT .GT. GNO3R8 ) THEN
               WRITE( LOGDEV,* ) 'Condensed amt. exceeds HNO3 conc: aero_subs.f'
               J( KNO3 ) = GNO3R8 / ( TSTEP * DF( KNO3 ) * HNO3RAT )
            ENDIF
            IF ( J( KCL ) * TSTEP * DF(KCL) * HCLRAT .GT. GCLR8 ) THEN
               WRITE( LOGDEV,* ) 'Condensed amt. exceeds HCl conc: aero_subs.f'
               J( KCL ) = GCLR8 / ( TSTEP * DF( KCL ) * HCLRAT )
            ENDIF

C *** Integrate mass transfer equation, convert flux from molar to mass

            DO ISP = 1, NVOLINORG
               CFINAL( ISP,IMODE ) = MAX( 0.0D0,
     &                                    CINORG( ISP,IMODE )
     &                                    + J( ISP ) * TSTEP * DF( ISP ) )
            END DO               

C *** Calculate updated H+ concentration 

            HPLUS( IMODE ) = 2.0D0 * SO4          / AEROSPC_MW( ASO4_IDX )
     &                     + CFINAL( KNO3,IMODE ) / AEROSPC_MW( ANO3_IDX )
     &                     + CFINAL( KCL, IMODE ) / AEROSPC_MW( ACL_IDX )
     &                     - CFINAL( KNH4,IMODE ) / AEROSPC_MW( ANH4_IDX )
     &                     - CINORG( KNA, IMODE ) / AEROSPC_MW( ANA_IDX )

C *** Equilibrate aerosol LWC with CFINAL by calling CALC_H2O

            WI( 1 ) = CINORG( KNA, IMODE ) * ( 1.0D-6 / AEROSPC_MW( ANA_IDX ) )
            WI( 2 ) =                  SO4 * ( 1.0D-6 / AEROSPC_MW( ASO4_IDX ) )
            WI( 3 ) = CFINAL( KNH4,IMODE ) * ( 1.0D-6 / AEROSPC_MW( ANH4_IDX ) )
            WI( 4 ) = CFINAL( KNO3,IMODE ) * ( 1.0D-6 / AEROSPC_MW( ANO3_IDX ) )
            WI( 5 ) = CFINAL( KCL, IMODE ) * ( 1.0D-6 / AEROSPC_MW( ACL_IDX ) )

            CALL CALC_H2O( WI, RHI, TEMPI, H2O_NEW ) 

            H2O = H2O_NEW * DFH2OR8 

C *** Compute net change in 3rd moment due to dry inorganic mass transfer

            DDRYM3DT = (
     &                   ( CFINAL( KNH4,IMODE ) - CINORG( KNH4,IMODE ) )
     &                     * ( 1.0D-9 * F6DPI / AEROSPC( ANH4_IDX )%DENSITY)
     &                 + ( CFINAL( KNO3,IMODE ) - CINORG( KNO3,IMODE ) )
     &                     * ( 1.0D-9 * F6DPI / AEROSPC( ANO3_IDX )%DENSITY)
     &                 + ( CFINAL( KCL, IMODE ) - CINORG( KCL,IMODE ) )
     &                     * ( 1.0D-9 * F6DPI / AEROSPC( ACL_IDX )%DENSITY)
     &                 + ( SO4                  - CINORG( KSO4,IMODE ) )
     &                     * ( 1.0D-9 * F6DPI / AEROSPC( ASO4_IDX )%DENSITY) ) / TSTEP

C *** Compute net change in 2nd moment due to dry inorganic mass transfer
C     (including nucleation) using equation A7 of Binkowski & Shankar (1995)
            DDRYM2DT = D_TWOTHIRDS * GRFAC1( IMODE ) / GRFAC2( IMODE ) * DDRYM3DT   

C *** Update dry 2nd moment for condensation/evaporation based on whether
C     net change in dry 2nd moment is production or loss
            IF ( DDRYM2DT .LT. 0.0D0 ) THEN
               LOSS = DDRYM2DT / DRYM20
               Y = DRYM20 * EXP( LOSS * TSTEP )
            ELSE
               Y = DRYM20 + DDRYM2DT * TSTEP
            ENDIF

C *** Add water and SOA to 2nd moment while preserving standard deviation

            DRYM3 = ( 1.0D-9 * F6DPI / AEROSPC( ASO4_IDX )%DENSITY ) * SO4
     &            + ( 1.0D-9 * F6DPI / AEROSPC( ANH4_IDX )%DENSITY )
     &                               * CFINAL( KNH4,IMODE )
     &            + ( 1.0D-9 * F6DPI / AEROSPC( ANO3_IDX )%DENSITY )
     &                               * CFINAL( KNO3,IMODE )
     &            + ( 1.0D-9 * F6DPI / AEROSPC( ACL_IDX )%DENSITY )
     &                               * CFINAL( KCL,IMODE )
     &            + ( 1.0D-9 * F6DPI / AEROSPC( ANA_IDX )%DENSITY )
     &                               * CINORG( KNA,IMODE )
     &            + M3OTHR                   

            WETM3 = DRYM3 + M3SOA + ( 1.0D-9 * F6DPI / AEROSPC( AH2O_IDX )%DENSITY ) * H2O  
            DRYM2 = MAX( DBLE( AEROMODE( IMODE )%MIN_M2 ), Y )
            WETM2 = DRYM2 * ( WETM3 / DRYM3 ) ** D_TWOTHIRDS


            PRECURSOR_CONC( NH3_IDX ) = GNH3R8 + ( CINORG( KNH4,IMODE )
     &                                - CFINAL( KNH4,IMODE ) ) * NH3RAT 
 
            PRECURSOR_CONC( HNO3_IDX ) = GNO3R8 + ( CINORG( KNO3,IMODE )
     &                                 - CFINAL( KNO3,IMODE) ) * HNO3RAT  
   
            PRECURSOR_CONC( HCL_IDX ) = GCLR8 + ( CINORG( KCL,IMODE )
     &                                - CFINAL( KCL,IMODE) ) * HCLRAT 

            AEROSPC_CONC( ANH4_IDX,IMODE ) = CFINAL( KNH4,IMODE )
            AEROSPC_CONC( ANO3_IDX,IMODE ) = CFINAL( KNO3,IMODE )
            AEROSPC_CONC( ACL_IDX,IMODE )  = CFINAL( KCL, IMODE )
            AEROSPC_CONC( ASO4_IDX,IMODE ) = SO4
            AEROSPC_CONC( AH2O_IDX,IMODE ) = H2O
            MOMENT2_CONC( IMODE ) = WETM2

C *** Update the third moments, geometric mean diameters, geometric 
C     standard deviations, modal mass totals, and modal particle 
C     densities.
               
            CALL GETPAR( M3_WET_FLAG, LIMIT_Sg )

         END DO                 ! end mass transfer time step loop
         
      END IF                     ! endif for 'Hybrid' method

C *** End of dynamic mass transfer calculations for coarse mode

         
C *** Call ISORROPIA in forward mode to calculate gas-particle equilibrium in 
C     the fine aerosol modes 

      GNH3R8  = PRECURSOR_CONC( NH3_IDX )
      GNO3R8  = PRECURSOR_CONC( HNO3_IDX )
      GCLR8   = PRECURSOR_CONC( HCL_IDX )

C *** Compute sulfate from total sulfate production rate [ug/m3-s] for fine 
C     modes; add in H2SO4 nucleated in model timestep

      SO4 = AEROSPC_CONC( ASO4_IDX,1 ) + AEROSPC_CONC( ASO4_IDX,2 )
      SO4 = SO4 + ( DMDT_SO4 + CONDSO4( 1 ) + CONDSO4( 2 ) )
     &              * DELT * H2SO4RATM1 

      WI( 1 ) = ( AEROSPC_CONC( ANA_IDX,1 ) + AEROSPC_CONC( ANA_IDX,2 ) )
     &        * ( 1.0D-6 / AEROSPC_MW( ANA_IDX ) )
      WI( 2 ) = SO4 * ( 1.0D-6 / AEROSPC_MW( ASO4_IDX ) )
      WI( 3 ) = PRECURSOR_CONC( NH3_IDX ) * ( 1.0D-6 / PRECURSOR_MW( NH3_IDX ) )
     &        + ( AEROSPC_CONC( ANH4_IDX,1 ) + AEROSPC_CONC( ANH4_IDX,2 ) )
     &        * ( 1.0D-6 / AEROSPC_MW( ANH4_IDX ) )
      WI( 4 ) = PRECURSOR_CONC( HNO3_IDX ) * ( 1.0D-6 / PRECURSOR_MW( HNO3_IDX ) )
     &        + ( AEROSPC_CONC( ANO3_IDX,1 ) + AEROSPC_CONC( ANO3_IDX,2 ) )
     &        * ( 1.0D-6 / AEROSPC_MW( ANO3_IDX ) )

      WI( 5 ) = PRECURSOR_CONC(HCL_IDX) * ( 1.0D-6 / PRECURSOR_MW(HCL_IDX) ) 
     &        + ( AEROSPC_CONC(ACL_IDX,1) + AEROSPC_CONC(ACL_IDX,2) )
     &        * ( 1.0D-6 / AEROSPC_MW(ACL_IDX) )


      CNTRL( 1 ) = 0.0D0   ! Forward Problem
      CNTRL( 2 ) = 1.0D0   ! Aerosol in Metastable State

C *** Set flags to account for mass conservation violations in ISRP3F

      TRUSTCL  = .TRUE.
      TRUSTNH4 = .TRUE.
      IF ( WI( 1 ) + WI( 5 ) .LT. 1.0D-20 ) THEN
         TRUSTCL = .FALSE.
      ELSE
         IF ( WI( 3 ) .LT. 1.0D-10 ) TRUSTNH4 = .FALSE.
         IF ( WI( 5 ) .LT. 1.0D-10 ) TRUSTCL  = .FALSE.
      END IF
         
      ! To prevent calls to ISO at T & P at which
      !    equilibrium thermodynamics do not govern partitioning
      ! slc.8.2013 - tested in CMAQv.5.0.1 by Jia Xing
      if (( AIRTEMP .GT. 250.0 )
     +       .AND.( AIRPRS .GT. 20000.0 ) ) THEN
         CALL ISOROPIA(wi, rhi, tempi, cntrl, wt, gas, aerliq, aersld,
     +                 scasi, other, TrustIso)
      else 
         TrustIso = .false.
      endif

!slz
      if (.not.TrustIso) then
       GAS( 1 ) = GNH3R8 * ( 1.0D-6 / PRECURSOR_MW( NH3_IDX ) )
       GAS( 2 ) = GNO3R8 * ( 1.0D-6 / PRECURSOR_MW( HNO3_IDX ) )
       GAS( 3 ) = GCLR8  * ( 1.0D-6 / PRECURSOR_MW( HCL_IDX ) )
      end if
C *** Update gas-phase concentrations

      PRECURSOR_CONC( NH3_IDX )  = GAS( 1 ) * PRECURSOR_MW( NH3_IDX ) * 1.0E6
      PRECURSOR_CONC( HNO3_IDX ) = GAS( 2 ) * PRECURSOR_MW( HNO3_IDX ) * 1.0E6
      PRECURSOR_CONC( HCL_IDX )  = GAS( 3 ) * PRECURSOR_MW( HCL_IDX ) * 1.0E6

C *** Change in volatile inorganic PM concentration to achieve
C     equilibrium, calculated as initial-gas-phase concentration minus 
C     equilibrium gas-phase concentration. DVOLINORG is positive for
C     condensation and negative for evaporation.

      DVOLINORG( KNH4 ) = GNH3R8 * 1.0D-6 / DBLE( PRECURSOR_MW( NH3_IDX ) ) - GAS( 1 )  
      DVOLINORG( KNO3 ) = GNO3R8 * 1.0D-6 / DBLE( PRECURSOR_MW( HNO3_IDX ) ) - GAS( 2 ) 

      IF ( TRUSTCL ) THEN  
         DVOLINORG( KCL )  = GCLR8  * 1.0D-6 / DBLE( PRECURSOR_MW( HCL_IDX ) ) - GAS( 3 ) 
      ELSE
         DVOLINORG( KCL ) = 0.0D0
      END IF

      IF ( DVOLINORG( KNH4 ) .LT. 0.0D0 ) THEN
         DVOLMAX = -( DBLE( AEROSPC_CONC( ANH4_IDX,1 ) )
     &              + DBLE( AEROSPC_CONC( ANH4_IDX,2 ) ) ) / DF(KNH4)
         DVOLINORG( KNH4 ) = MAX( DVOLINORG( KNH4 ), DVOLMAX )
      END IF

      IF ( DVOLINORG( KNO3 ) .LT. 0.0D0 ) THEN
         DVOLMAX = -( DBLE( AEROSPC_CONC( ANO3_IDX,1 ) )
     &              + DBLE( AEROSPC_CONC( ANO3_IDX,2 ) ) ) / DF( KNO3 )
         DVOLINORG( KNO3 ) = MAX( DVOLINORG( KNO3 ), DVOLMAX)
      END IF

      IF ( DVOLINORG( KCL ) .LT. 0.0D0 ) THEN
         DVOLMAX = -( DBLE( AEROSPC_CONC( ACL_IDX,1 ) )
     &              + DBLE( AEROSPC_CONC( ACL_IDX,2 ) ) ) / DF( KCL )
         DVOLINORG( KCL ) = MAX( DVOLINORG( KCL ), DVOLMAX )
      END IF

      OMEGA( 1 ) = GRFAC2( 1 ) / ( GRFAC2( 1 ) + GRFAC2( 2 ) ) ! partitioning cof
      OMEGA( 2 ) = 1.0D0 - OMEGA( 1 )

C *** Initialize excess evaporated mass array

      DMASS = 0.0D0

      DO IMODE = 1, 2  ! modal partitioning of equilibrium aerosol mass

         CINORG( KSO4,IMODE ) = AEROSPC_CONC( ASO4_IDX, IMODE )
         CINORG( KNH4,IMODE ) = AEROSPC_CONC( ANH4_IDX, IMODE )
         CINORG( KNO3,IMODE ) = AEROSPC_CONC( ANO3_IDX, IMODE )
         CINORG( KNA, IMODE ) = AEROSPC_CONC( ANA_IDX, IMODE )
         CINORG( KCL, IMODE ) = AEROSPC_CONC( ACL_IDX, IMODE )

         WETM3 = MOMENT3_CONC( IMODE )
         WETM2 = MOMENT2_CONC( IMODE )

         IF ( IMODE .EQ. 1 ) THEN
           RATE = DMDT_SO4 + CONDSO4( IMODE )
         ELSE
           RATE = CONDSO4( IMODE )
         ENDIF

         M3OTHR = 0.0
         M3SOA = 0.0
         DO I = 1, N_AEROSPC

            ! Skip organic species
            IF ( I .EQ. ASO4_IDX .OR. I .EQ. ANH4_IDX .OR. I .EQ. ANO3_IDX .OR.
     &           I .EQ. ANA_IDX  .OR. I .EQ. ACL_IDX  .OR. I .EQ. AH2O_IDX ) CYCLE

            IF ( AEROSPC(I)%isWet ) THEN
               M3SOA = M3SOA 
     &               + ( 1.0D-9 * F6DPI / AEROSPC( I )%DENSITY )
     &               * AEROSPC_CONC( I,IMODE )
            ELSE
               M3OTHR = M3OTHR
     &                + ( 1.0D-9 * F6DPI / AEROSPC( I )%DENSITY )
     &                * AEROSPC_CONC( I,IMODE )
            ENDIF   


         END DO    ! N_AEROSPC loop

         DRYM3 = WETM3 - DBLE( H2OFAC * AEROSPC_CONC( AH2O_IDX,IMODE ) ) - M3SOA
         DRYM20 = WETM2 * ( DRYM3 / WETM3 ) ** D_TWOTHIRDS

         DO ISP = 1, NVOLINORG
         
            CFINAL( ISP,IMODE ) = CINORG( ISP,IMODE )
     &                          + OMEGA( IMODE ) * DVOLINORG( ISP )
     &                          * DF( ISP )

            IF ( IMODE .EQ. 1 ) THEN

               IF ( CFINAL( ISP,IMODE ) .LT. 0.0D0 ) THEN
                  DMASS( ISP) = CFINAL( ISP,IMODE )
                  CFINAL( ISP,IMODE ) = 0.0D0
               END IF

            ELSE

               CFINAL( ISP,IMODE ) = CFINAL( ISP,IMODE ) + DMASS( ISP )

               IF ( CFINAL( ISP,IMODE ) .LT. 0.0D0 ) THEN
                  CFINAL( ISP,1 ) = CFINAL( ISP,1 ) + CFINAL( ISP,IMODE ) 
                  CFINAL( ISP,IMODE ) = 0.0D0

                  IF ( CFINAL( ISP, 1 ) .LT. 0.0D0 ) THEN
                     IF ( ABS( CFINAL( ISP,1 ) ) .LT. 1.0D-15 ) THEN
                        CFINAL( ISP,1 ) = 0.0D0
                     ELSE
                        PRINT *, 'Too much evaporation: aero_subs.f'
                        CFINAL( ISP,1 ) = 0.0D0
C                       STOP
                     END IF
                  END IF 
               END IF

            END IF   ! IMODE = 1
            
         END DO 
                        
         SO4 = CINORG( KSO4,IMODE ) + RATE * CONVFAC

C *** Double precision vars for ISORROPIA

         WI( 1 ) = CINORG( KNA, IMODE ) * 1.0D-6 / AEROSPC_MW( ANA_IDX )
         WI( 2 ) =                  SO4 * 1.0D-6 / AEROSPC_MW( ASO4_IDX )
         WI( 3 ) = CFINAL( KNH4,IMODE ) * 1.0D-6 / AEROSPC_MW( ANH4_IDX )
         WI( 4 ) = CFINAL( KNO3,IMODE ) * 1.0D-6 / AEROSPC_MW( ANO3_IDX )
         WI( 5 ) = CFINAL( KCL, IMODE ) * 1.0D-6 / AEROSPC_MW( ACL_IDX )

         CALL CALC_H2O( WI, RHI, TEMPI, H2O_NEW ) 
            
         H2O = H2O_NEW * DFH2OR8 


C *** Compute net change in 3rd moment due to dry inorganic mass transfer
C     (includes nucleated sulfate mass)

         DDRYM3DT = (
     &                ( CFINAL( KNH4,IMODE ) - CINORG( KNH4,IMODE ) )
     &                  * ( 1.0D-9 * F6DPI / AEROSPC( ANH4_IDX )%DENSITY )
     &              + ( CFINAL( KNO3,IMODE ) - CINORG( KNO3,IMODE ) )
     &                  * ( 1.0D-9 * F6DPI / AEROSPC( ANO3_IDX )%DENSITY )
     &              + ( CFINAL( KCL, IMODE ) - CINORG( KCL,IMODE ) )
     &                  * ( 1.0D-9 * F6DPI / AEROSPC( ACL_IDX )%DENSITY )
     &              + ( SO4                  - CINORG( KSO4,IMODE ) )
     &                  * ( 1.0D-9 * F6DPI / AEROSPC( ASO4_IDX )%DENSITY ) ) / DELT 

C *** Compute net change in 2nd moment due to dry inorganic mass transfer
C     (including nucleation) using equation A7 of Binkowski & Shankar (1995)
         DDRYM2DT = D_TWOTHIRDS * GRFAC1( IMODE ) / GRFAC2( IMODE ) * DDRYM3DT


C *** Update dry 2nd moment for condensation/evaporation based on whether
C     net change in dry 2nd moment is production or loss

         IF ( DDRYM2DT .LT. 0.0D0 ) THEN
            LOSS = DDRYM2DT / DRYM20
            Y = DRYM20 * EXP( LOSS * DELT )
         ELSE
            Y = DRYM20 + DDRYM2DT * DELT
         END IF
 
C *** Add water and SOA to 2nd moment while preserving standard deviation

         DRYM3 = ( 1.0E-9 * F6DPI / AEROSPC( ASO4_IDX )%DENSITY ) * SO4
     &         + ( 1.0E-9 * F6DPI / AEROSPC( ANH4_IDX )%DENSITY ) * CFINAL( KNH4,IMODE )
     &         + ( 1.0E-9 * F6DPI / AEROSPC( ANO3_IDX )%DENSITY ) * CFINAL( KNO3,IMODE )
     &         + ( 1.0E-9 * F6DPI / AEROSPC( ACL_IDX )%DENSITY )  * CFINAL( KCL, IMODE )
     &         + ( 1.0D-9 * F6DPI / AEROSPC( ANA_IDX )%DENSITY )  * CINORG( KNA, IMODE )
     &         + M3OTHR

         WETM3 = DRYM3 + M3SOA + DBLE( H2OFAC ) * H2O 
         DRYM2 = MAX( DBLE( AEROMODE(IMODE)%MIN_M2 ), Y )
         WETM2 = DRYM2 * ( WETM3 / DRYM3 ) ** D_TWOTHIRDS

         AEROSPC_CONC( ANH4_IDX, IMODE ) = CFINAL( KNH4,IMODE )
         AEROSPC_CONC( ANO3_IDX, IMODE ) = CFINAL( KNO3,IMODE )
         AEROSPC_CONC( ACL_IDX, IMODE )  = CFINAL( KCL ,IMODE )
         AEROSPC_CONC( ASO4_IDX, IMODE ) = SO4
         AEROSPC_CONC( AH2O_IDX, IMODE ) = H2O
         if(IMODE.eq.1) MOMENT0_CONC( IMODE ) = AM0(IMODE) + DNDT * DELT
         MOMENT2_CONC( IMODE ) = WETM2

        HPLUS( IMODE ) = 0.0
        DO I = 1, N_AEROSPC
          HPLUS( IMODE ) = HPLUS( IMODE )
     &                    + AEROSPC( I )%CHARGE * AEROSPC_CONC( I,IMODE ) / AEROSPC_MW( I )
        END DO

      END DO    ! end fine mode mass transfer calculations


C *** Update the third moments, geometric mean diameters, geometric 
C     standard deviations, modal mass totals, and modal particle 
C     densities.

      CALL GETPAR( M3_WET_FLAG, LIMIT_Sg )

2023  FORMAT( 1X, 'VOLINORG returning negative gas concentrations from ISOROPIA:'
     &       /10X, 'GAS(1) = NH3, GAS(2) = HNO3, GAS(3) = HCl' )
2029  FORMAT( 1X, '[see VOLINORG msg]'
     &        1X, 'at (C,R,L): ', 3I4, 1X, 'GAS Conc:', 3( 1PE11.3 ) )

      RETURN
      END SUBROUTINE VOLINORG
	
C /////////////////////////////////////////////////////////////////////
C  SUBROUTINE HCOND3 calculates the size-dependent term in the
C   condensational-growth rate expression for the 2nd and 3rd moments of
C   a lognormal aerosol mode using the harmonic mean method.  This code
C   follows Section A2 of Binkowski & Shankar (1995).
C
C  KEY SUBROUTINES/FUNCTIONS CALLED:  none
C
C  REVISION HISTORY:
C     coded November 7, 2003 by Dr. Francis S. Binkowski
C
C     Revised November 20, 2003 by F. Binkowski to have am1 and
C     am2 as inputs
C
C  REFERENCE:
C   1. Binkowski, F.S. and U. Shankar, The regional particulate matter
C      model 1. Model description and preliminary results, J. Geophys.
C      Res., Vol 100, No D12, 26101-26209, 1995.

      SUBROUTINE HCOND3( am0, am1, am2, Dv, alpha, cbar, F )

      IMPLICIT NONE

C *** Arguments:

      REAL( 8 ), INTENT( IN ) :: am0   ! zeroth moment of mode  [ #/m**3 ]
      REAL( 8 ), INTENT( IN ) :: am1   ! first moment of mode   [ m/m**3 ]
      REAL( 8 ), INTENT( IN ) :: am2   ! second moment of mode  [ m**2/m**3 ]
      REAL,      INTENT( IN ) :: Dv    ! molecular diffusivity of the
                                       ! condensing vapor  [ m**2/s ]
      REAL,      INTENT( IN ) :: alpha ! accommodation coefficient
      REAL,      INTENT( IN ) :: cbar  ! kinetic velocity of condensing vapor [ m/s ]

      REAL( 8 ), INTENT( OUT ) :: F( 2 ) ! size-dependent term in condensational-growth
                                         ! rate: F(1) = 2nd moment [ m**2/m**3 s ]
                                         !       F(2) = 3rd moment [ m**3/m**3 s ]

C *** Local Variables:

      REAL( 8 ) :: gnc2 ! integrals used to calculate F(1) [m^2 / m^3 s]
      REAL( 8 ) :: gfm2 !

      REAL( 8 ) :: gnc3 ! integrals used to calculate F(2) [m^3 / m^3 s]
      REAL( 8 ) :: gfm3 !

      REAL( 8 ), PARAMETER :: pi = 3.14159265358979324D0 
      REAL( 8 ), PARAMETER :: twopi = 2.0D0 * pi
      REAL( 8 ), PARAMETER :: pi4 = 0.25D0 * pi

C *** start execution

C *** Implement equation A15 of Binkowski & Shankar (1995) for the
C     2nd and 3rd moments of a lognormal mode of arbitrary size.

      gnc2 = twopi * Dv * am0          ! 2nd moment, near-continuum
      gnc3 = twopi * Dv * am1          ! 3rd moment, near-continuum
      gfm2 = pi4 * alpha * cbar * am1  ! 2nd moment, free-molecular
      gfm3 = pi4 * alpha * cbar * am2  ! 3rd moment, free-molecular

C *** Implement equation A13 of Binkowski & Shankar (1995) for a
C     lognormal mode of arbitrary size.  These are the size-dependent
C     terms in the condensational-growth rate expression, given in
C     equation 7a of B&S (1995).

      F( 1 ) = gnc2 * gfm2 / ( gnc2 + gfm2 )  ! 2nd moment
      F( 2 ) = gnc3 * gfm3 / ( gnc3 + gfm3 )  ! 3rd moment

      RETURN
      END SUBROUTINE HCOND3
!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.4 (r3376) - 10 Feb 2010 17:51
!
!
! /////////////////////////////////////////////////////////////////////
!  SUBROUTINE NEWPART3 calculates the new particle production rate
!    due to binary nucleation of H2SO4 and H2O vapor.  The nucleation
!    rate is a parameterized function of temperature, relative humidity,
!    and the vapor-phase H2SO4 concentration, following the work of
!    Kulmala et al (1998).  This rate is then used to determine the
!    production rates of aerosol number, 2nd moment, and aerosol
!    sulfate, following the description in Section 1.2 of Binkowski
!    Roselle (2003), except the new particles are assumed to be of 2.0
!    nm diameter instead of 3.5 nm.
!
!  KEY SUBROUTINES/FUNCTIONS CALLED: none
!
!  REVISION HISTORY:
!
! FSB 11/29/99 Extracted code from PARTPROD_VA subroutine of RPM
!
! SJR ??/??/?? New call vector and limited the mass production rate
!
! FSB 04/11/02 Decreased the diameter of new particles from 3.5 nm to
!     2 nm.  New particles are monodispersed.
!
! PVB 09/21/04 Changed MWH2SO4 from 98.07354 to 98.0 g/mol for
!     consistency with the mechanism files.  Added in-line documentation
!     with input from FSB.
!
!  REFERENCES:
!   1. Kulmala, M., A. Laaksonen, and L. Pirjola, Parameterizations for
!      sulfuric acid/water nucleation rates.  J. Geophys. Res., Vol 103,
!      No D7, 8301-8307, 1998.
!
!   2. Binkowski, F.S. and S.J. Roselle, Models-3 Community
!      Multiscale Air Quality (CMAQ) model aerosol component 1:
!      Model Description.  J. Geophys. Res., Vol 108, No D6, 4183
!      doi:10.1029/2001JD001409, 2003.
!
      SUBROUTINE NEWPART3(rh, temp, xh2so4, so4rate, dndt, dmdt_so4, dm2dt)
        USE AERO_DATA
        USE MET_DATA
        IMPLICIT NONE
!
!
!
!
! *** Arguments:
!
! fractional relative humidity
        REAL, INTENT(IN) :: rh
! ambient temperature [ K ]
        REAL, INTENT(IN) :: temp
! sulfuric acid concentration [ ug/m**3 ]
        REAL, INTENT(IN) :: xh2so4
! gas-phase H2SO4 production rate [ ug/m**3 s ]
        REAL, INTENT(IN) :: so4rate
!
! particle number production rate [ m^-3/s ]
        REAL*8, INTENT(OUT) :: dndt
! SO4 mass production rate [ ug/m**3 s ]
        REAL*8, INTENT(OUT) :: dmdt_so4
! second moment production rate [ m**2/m**3 s ]
        REAL*8, INTENT(OUT) :: dm2dt
!
! *** Parameters
!
        CHARACTER(len=16), PARAMETER :: pname='NEWPART'
!
! *** Conversion Factors:
!
! molecular weight for H2SO4
        REAL, PARAMETER :: mwh2so4=98.0
!
! micrograms/m**3 to number/cm**3
        REAL, PARAMETER :: ugm3_ncm3=avo/mwh2so4*1.0e-12
!
! *** Particle size parameters:
!
! diameter of a new particle [cm]
        REAL, PARAMETER :: d20=2.0e-07
!
! new-particle diameter squared [cm**2]
        REAL, PARAMETER :: d20sq=d20*d20
!
! new-particle diameter squared [m**2]
        REAL, PARAMETER :: m2_20=1.0e-4*d20sq
!
! volume of a new particle [cm**3]
        REAL, PARAMETER :: v20=pi6*d20*d20sq
!
! mass of a new particle [ug]
        REAL*8 :: sulfmass
! inverse of sulfmass [ug**-1]
        REAL*8 :: sulfmass1
!
! *** Local Variables used to determine nucleation rate
!
! water vapor concentration [ 1/cm**3 ]
        REAL :: nwv
! saturation vapor conc of H2SO4 [ 1/cm**3 ]
        REAL :: nav0
! H2SO4 vapor concentration [ 1/cm**3 ]
        REAL :: nav
! critical H2SO4 vapor concentration [ 1/cm**3 ]
        REAL :: nac
! fractional relative acidity
        REAL :: ra
! temperature-correction term
        REAL :: delta
! H2SO4 mole fraction in the critical nucleus
        REAL :: xal
! see usage
        REAL :: nsulf
! factor to calculate Jnuc
        REAL*8 :: chi
! nucleation rate [ cm ** -3  s ** -1 ]
! (Kulmala et al.)
        REAL*8 :: jnuck
! dummy variable for statement functions
        REAL :: tt
!
! *** Statement Functions
!
! arithmetic statement functions for saturation
! vapor pressures of h2so4 and h2o [Pa] taken
! from Appendix of Kulmala et al. (1998), p8306
        REAL :: ph2so4, ph2o
        INTRINSIC EXP
        INTRINSIC LOG


!
! -------------------------- Begin Execution ---------------------------
!
! *** Initialize variables
!
        dndt = 0.0d0
        dmdt_so4 = 0.0d0
        dm2dt = 0.0d0
!
        sulfmass = 1.0d+3*aerospc(aso4_idx)%density*v20
        sulfmass1 = 1.0d0/sulfmass
!
! *** Nucleation Rate
!     Calculate the sulfuric acid/water nucleation rate.  This code
!     implements Section 3 of Kulmala et al. (1998).  Note that all
!     variables in the Kulmala parameterization are in cgs units.
!
! *** Calculate water vapor concentration [1/cm**3] using ambient RH
!     and the formula in Appendix of Kulmala et al. (1998), p8306.
        nwv = rh*EXP(77.34491296-7235.424651/temp-8.2*LOG(temp)+temp*
     +    5.7113e-03)/(rgasuniv*temp)*avo*1.0e-6
!
! *** Calculate saturation vapor concentration of H2SO4 [1/cm**3]
!       using formula in the Appendix of Kulmala et al. (1998), p8306.
        nav0 = EXP(27.78492066-10156.0/temp)/(rgasuniv*temp)*avo*1.0e-6
!
! *** Convert ambient H2SO4 vapor concentration into [1/cm**3] units
        nav = ugm3_ncm3*xh2so4
!
! *** Calculate critical concentration of H2SO4 vapor needed to produce
!     1 particle/(cm**3 s) using Equation 18 of Kulmala et al (1998)
        nac = EXP(-14.5125 + 0.1335*temp - 10.5462*rh + 1958.4*rh/temp)
!
! *** Calculate relative acidity, defined as the ambient concentration
!     divided by the saturation concentration of H2SO4 vapor
        ra = nav/nav0
!
! *** Calculate temperature correction factor using Equation 22 of
!      Kulmala et al (1998)
        delta = 1.0 + (temp-273.15)/273.15
!
! *** Calculate mole fraction of H2SO4 in the critical nucleus using
!     Equation 17 of Kulmala et al (1998)
        xal = 1.2233 - 0.0154*ra/(ra+rh) + 0.0102*LOG(nav) - 0.0415*LOG(nwv) +
     +    0.0016*temp
!
! *** Calculate Nsulf as defined in Equation 21 of Kulmala et al (1998)
        nsulf = LOG(nav/nac)
!
! *** Calculate natural log of nucleation rate using Equation 20 of
!     Kulmala et al (1998)
        chi = 25.1289*nsulf - 4890.8*nsulf/temp - 1743.3/temp - 2.2479*delta*
     +    nsulf*rh + 7643.4*xal/temp - 1.9712*xal*delta/rh
!
! *** Calculate nucleation rate using Eq 19 of Kulmala et al (1998)
! [ #/cm**3 s ]
        jnuck = EXP(chi)
!
! *** Moment Production Rates
!     Calculate the production rate of number, sulfate mass, and 2nd
!     moment, due to the H2SO4/H2O nucleation assuming that each critical
!     nucleus grows instantaneously to 2.0 nm.  This code follows Section
!     1.2 of Binkowski & Roselle (2003), except the assumed particle
!     diameter has been changed from 3.5 to 2.0 nm.
!
! *** Convert production rate of number to [ #/m**3 s]
        dndt = 1.0e06*jnuck
!
! *** Calculate mass production rate [ ug / (m**3 s) ] analogous to
!     Equation 6a of Binkowski & Roselle (2003).  Set the upper limit
!     of the mass production rate as the gas-phase production rate of
!     H2SO4, and adjust the number production rate accordingly.
        dmdt_so4 = sulfmass*dndt
        IF (dmdt_so4 .GT. so4rate) THEN
          dmdt_so4 = so4rate
          dndt = dmdt_so4*sulfmass1
        END IF
!
! *** Calculate the production rate of 2nd moment [ m**2 / (m**3 s) ]
!     This is similar to Equation 6c of Binkowski & Roselle (2003),
!     except the factor of PI is removed and the assumed particle
!     diameter is different.
!
        dm2dt = dndt*m2_20
!
        RETURN
      END SUBROUTINE NEWPART3
C-----------------------------------------------------------------------
 
C ROUTINE
C   Compute_Flux
 
C DESCRIPTION
C   Determines the evaporative/condensational flux of volatile
C   inorganic species to aerosol modes. In cases where the resulting H+
C   flux is greater than a specified limit, the Pilinis et al. (2000)
C   AS&T approach is used to modify species vapor pressures such that
C   cond./evap. produces an H+ flux equal to the limit (which is
C   proportional to the current mode concentration of H+).
C   Routine called by VOLINORG.
 
C ARGUMENTS
C   INPUTS
C     nvolinorg: Number of Volatile inorganic species
C     GNH3R8   : NH3(g) concentration (ug/m3)
C     GNO3R8   : HNO3(g) concentration (ug/m3)
C     GCLR8    : HCl(g) concentration (ug/m3)
C     KNH4     : Index to NH4 species
C     KNO3     : Index to NO3 species
C     KCL      : Index to NO3 species 
C     Ceq      : vapor concentration (mol/m3)
C     CondRate : effective condensation rate (I) of 3rd moment to mode
C              : [treat units as (1/s)]
C     Hplus    : aerosol hydrogen ion concentration (mol/m3) for mode
C     rate     : H2SO4(g) condensation rate (ug/m3/s) for mode
 
C   OUTPUT
C     Ceq      : modified vapor concentration (mol/m3)
C     J        : molar cond./evap. flux of volatile inorganics (mol/m3-s)
 
C-----------------------------------------------------------------------
      SUBROUTINE Compute_Flux ( nvolinorg, GNH3R8, GNO3R8, GCLR8, KNH4,
     &                          KNO3, KCL, Ceq, CondRate, Hplus, rate, J )

      USE aero_data
      USE precursor_data
      USE met_data

      IMPLICIT NONE

C     Arguments:
      INTEGER      nvolinorg
      REAL( 8 ) :: GNH3R8, GNO3R8, GCLR8 ! gas concentrations [ug/m3]
      INTEGER      KNH4, KNO3, KCL       ! Indices to species
      REAL( 8 ) :: Ceq( nvolinorg )      ! vapor concentrations [mol/m3]
      REAL( 8 ) :: CondRate              ! effective condensation rate (I) for 3rd moment
      REAL( 8 ) :: Hplus                 ! hydrogen ion concentration for mode [mol/m3]
      REAL( 8 ) :: rate
      REAL( 8 ) :: J( nvolinorg )        ! molar cond./evap. flux [mol/m3-s]

C     Local Variables:
      REAL( 8 ),  PARAMETER :: Afact = 1.0D-01  ! factor for H+ limiter
      REAL( 8 ),  PARAMETER :: small = 1.0D-25
      REAL( 8 ) :: Cinf( nvolinorg ) ! gas concentration in mol/m3
      REAL( 8 ) :: Qk              ! factor for modifying vapor press. based on H+ limit
      REAL( 8 ) :: Hflux           ! flux of H+ to mode from cond/evap
      REAL( 8 ) :: Hlim            ! maximum allowable H+ flux to mode
      REAL( 8 ) :: aa, bb, cc      ! terms in quadratic equation
      REAL( 8 ) :: JH2SO4          ! molar flux of H2SO4(g) [mol/m3/s]
      REAL( 8 ) :: CH2SO4          ! effective H2SO4(g) concentration [mol/m3]
      INTEGER      isp             ! inorganic species index

C     ---------------
C     Begin Execution
C     ---------------

C     Convert gas concentration from ug/m3 to mol/m3
      Cinf( KNH4 ) = GNH3R8 * 1.0D-6 / PRECURSOR_MW( NH3_IDX )
      Cinf( KNO3 ) = GNO3R8 * 1.0D-6 / PRECURSOR_MW( HNO3_IDX )
      Cinf( KCL )  = GCLR8  * 1.0D-6 / PRECURSOR_MW( HCL_IDX )

C     Calculate cond/evap fluxes (no H+ limiting)
      DO isp = 1, nvolinorg
         J( isp ) = CondRate * ( Cinf( isp ) - Ceq( isp ) )
      END DO

C     Convert rate to mol/m3/s and get effective Cinf for H2SO4(g)
      JH2SO4  = rate * 1.0D-6 / PRECURSOR_MW( SULPRD_IDX )
      CH2SO4  = JH2SO4 / CondRate

C     Limit H+ flux (Pilinis et al., 2000, AS&T). Note: J is flux
C     to entire mode, not one particle
      Hlim  = Afact * Hplus
      Hflux = 2.0D0 * JH2SO4 + J( KNO3 ) + J( KCL ) - J( KNH4 )

C     If Hflux is too large, limit the flux by modifying species
C     vapor pressures with Qk factor (Pilinis et al., 2000, AS&T).
      IF ( ABS( Hflux ) .GT. Hlim ) THEN
         Hlim = SIGN( Hlim, Hflux )

C        Solve quadratic for Qk: aa*Qk^2 + bb*Qk + cc = 0
         aa = Ceq( KCL ) + Ceq( KNO3 )

         bb = Hlim / CondRate
     &      + Cinf( KNH4) - Cinf( KNO3 ) - Cinf( KCL ) - 2.0D0 * CH2SO4
         cc = -Ceq( KNH4 )

         Qk = 0.0D0 ! initialize Qk

         IF ( aa .LT. small .AND. 0.0D0 .LT. bb ) THEN ! bb*Qk + cc = 0
            Qk = -cc / bb
         ELSE IF (aa .LT. small .AND. bb .LE. 0.0D0 ) THEN
            Qk = 0.0D0
         ELSE IF (-cc .LT. small .AND. bb .LT. 0.0D0 ) THEN  ! aa*Qk^2 + bb*Qk = 0
            Qk = -bb / aa
         ELSE IF (-cc .LT. small .AND. 0.0D0 .LE. bb ) THEN
            Qk = 0.0D0
         ELSE
            Qk = ( -bb + SQRT ( bb**2 - 4.0D0 * aa * cc ) ) / ( 2.0D0 * aa )
            IF ( bb ** 2 - 4.0D0 * aa * cc .LT. 0.0D0 ) THEN
               PRINT *, 'Compute_Flux, sqrt<0'
               Qk = 0.0D0
            END IF
         END IF

C     Modify vapor pressures and get new fluxes
         IF ( Qk .GT. small ) THEN
            Ceq( KNH4 ) = Ceq( KNH4 ) / Qk
            Ceq( KNO3 ) = Ceq( KNO3 ) * Qk
            Ceq( KCl )  = Ceq( KCl )  * Qk
            DO isp = 1, nvolinorg
               J( isp ) = CondRate * ( Cinf( isp ) - Ceq( isp ) )
            END DO
         END IF

      END IF   ! |Hflux| > Hlim

      END SUBROUTINE Compute_Flux
C-----------------------------------------------------------------------
 
C Routine CALC_H2O
 
C Description
C   Calculate the water content of aerosol at the new time step.  Water
C   calculations use the ZSR mixing rule with salts determined by the
C   ISORROPIA approach.
C   Routine called by VOLINORG.
 
C Arguments
C   Input
C     WI      : Concentration of components [mol/m^3] at new step
C     RH      : Relative humidity [0-1]
C     T       : Temperature [K]
 
C   Output
C     H2O_NEW : Water [mol/m^3] content at new time step
 
C-----------------------------------------------------------------------
      SUBROUTINE CALC_H2O ( WI, RH, T, H2O_NEW )

      IMPLICIT NONE

      INTEGER, PARAMETER :: NCMP = 5
C     Arguments:
      REAL( 8 ), INTENT( IN )  :: WI( NCMP )
      REAL( 8 ), INTENT( IN )  :: RH, T
      REAL( 8 ), INTENT( OUT ) :: H2O_NEW

C     Parameters:
      INTEGER, PARAMETER :: NPAIR = 13
      REAL( 8 ), PARAMETER :: SMALL = 1.0D-20
      REAL( 8 ), PARAMETER :: Mw = 0.018D0  ! molar mass H2O (kg/mol)

C     Local Variables:
      REAL( 8 ) :: FSO4, FNH4, FNA, FNO3, FCL ! "free" ion amounts
      REAL( 8 ) :: WATER           ! kg of water for new time step
      REAL( 8 ) :: X, Y
      REAL( 8 ) :: CONC ( NCMP )   ! concentration (mol/m^3)
      REAL( 8 ) :: CONCR( NPAIR )  ! concentration (mol/m^3) ion "pairs"
      REAL( 8 ) :: M0I  ( NPAIR )  ! single-solute molalities
      INTEGER :: J
      CHARACTER( 2 ) :: SC         ! sub-case for composition

C     ---------------
C     Begin Execution
C     ---------------

C     Return if small concentration
      IF ( WI( 1 ) + WI( 2 ) + WI( 3 ) + WI( 4 ) + WI( 5 ) .LE. SMALL ) THEN
         H2O_NEW = SMALL
         RETURN
      END IF

C     Set component array (mol/m^3) for determining salts
      CONC = WI   ! array assignment

C     Get the sub-case to use in determining salts
      CALL GETSC ( CONC, RH, T, SC )

C     Initialize ion "pairs" (i.e., salts) used in ZSR
      CONCR = 0.0D0   ! array assignment

C     Depending on case, determine moles of salts in solution (i.e., CONCR)
C     for ZSR calculation below

      IF ( SC .EQ. 'K2' ) THEN    ! sulfate poor (NH4-SO4 system)
         CONCR( 4 ) = MIN( CONC( 2 ), 0.5D0 * CONC( 3 ) )  ! (NH4)2SO4

      ELSE IF ( SC .EQ. 'L4' .OR. SC .EQ. 'O4' ) THEN  ! sulfate rich (no acid)
         X = 2.0D0 * CONC( 2 ) - CONC( 3 )   ! 2SO4 - NH4
         Y = CONC( 3 ) - CONC( 2 )           ! NH4 - SO4
         IF ( X .LE. Y ) THEN
            CONCR( 13 ) = X                  ! (NH4)3H(SO4)2 is MIN (X,Y)
            CONCR( 4 )  = Y - X              ! (NH4)2SO4
         ELSE
            CONCR( 13 ) = Y                  ! (NH4)3H(SO4)2 is MIN (X,Y)
            CONCR( 9 )  = X - Y              ! NH4HSO4
         END IF

      ELSE IF ( SC .EQ. 'M2' .OR. SC .EQ. 'P2' ) THEN   ! sulfate rich (free acid)
         CONCR( 9 ) = CONC( 3 )                                    ! NH4HSO4
         CONCR( 7 ) = MAX( CONC( 2 )-CONC( 3 ), 0.0D0 )            ! H2SO4

      ELSE IF ( SC .EQ. 'N3' ) THEN            ! sulfate poor (NH4-SO4-NO3 system)
         CONCR( 4 ) = MIN( CONC( 2 ), 0.5D0 * CONC( 3 ) )          ! (NH4)2SO4
         FNH4       = MAX( CONC( 3 ) - 2.0D0 * CONCR( 4 ), 0.0D0 ) ! available NH4
         CONCR( 5 ) = MAX( MIN( FNH4, CONC( 4 ) ), 0.0D0 )         ! NH4NO3=MIN(NH4,NO3)

      ELSE IF ( SC .EQ. 'Q5' ) THEN    ! sulfate poor, sodium poor (NH4-SO4-NO3-Cl-Na)
         CONCR( 2 ) = 0.5D0 * CONC( 1 )                            ! Na2SO4
         FSO4       = MAX( CONC( 2 ) - CONCR( 2 ), 0.0D0 )         ! available SO4
         CONCR( 4 ) = MAX( MIN( FSO4, 0.5D0 * CONC( 3 ) ), SMALL ) ! NH42S4=MIN(NH4,S4)
         FNH4       = MAX( CONC( 3 ) - 2.0D0 * CONCR( 4 ), 0.0D0 ) ! available NH4
         CONCR( 5 ) = MIN( FNH4, CONC( 4 ) )                       ! NH4NO3=MIN(NH4,NO3)
         FNH4       = MAX( FNH4 - CONCR( 5 ), 0.0D0 )              ! avaialable NH4
         CONCR( 6 ) = MIN( FNH4, CONC( 5 ) )                       ! NH4Cl=MIN(NH4,Cl)

      ELSE IF ( SC .EQ. 'R6' ) THEN   ! sulfate poor, sodium rich (NH4-SO4-NO3-Cl-Na)
         CONCR( 2 ) = CONC( 2 )                                    ! Na2SO4
         FNA        = MAX( CONC( 1 ) - 2.0D0 * CONCR( 2 ), 0.0D0 )

         CONCR( 3 ) = MIN( FNA, CONC( 4 ) )                        ! NaNO3
         FNO3       = MAX( CONC( 4 ) - CONCR( 3 ), 0.0D0 )
         FNA        = MAX( FNA-CONCR( 3 ), 0.0D0 )

         CONCR( 1 ) = MIN( FNA, CONC( 5 ) )                        ! NaCl
         FCL        = MAX( CONC( 5 ) - CONCR( 1 ), 0.0D0 )
         FNA        = MAX( FNA-CONCR( 1 ), 0.0D0 )

         CONCR( 5 ) = MIN( FNO3, CONC( 3 ) )                       ! NH4NO3
         FNO3       = MAX( FNO3-CONCR( 5 ), 0.0D0 )
         FNH4       = MAX( CONC( 3 ) - CONCR( 5 ), 0.0D0 )

         CONCR( 6 ) = MIN( FCL, FNH4 )                             ! NH4Cl

      ELSE IF ( SC .EQ. 'S6' ) THEN       ! sulfate rich (no acid) (NH4-SO4-NO3-Cl-Na)
         CONCR( 2 )  = 0.5D0 * CONC( 1 )                           ! Na2SO4
         FSO4        = MAX( CONC( 2 ) - CONCR( 2 ), 0.0D0 )
         CONCR( 13 ) = MIN( CONC( 3 ) / 3.0D0, FSO4 / 2.0D0 )      ! (NH4)3H(SO4)2
         FSO4        = MAX( FSO4 - 2.0D0 * CONCR( 13 ), 0.0D0 )
         FNH4        = MAX( CONC( 3 ) - 3.0D0 * CONCR( 13 ), 0.0D0 )

         IF ( FSO4 .LE. SMALL ) THEN          ! reduce (NH4)3H(SO4)2, add (NH4)2SO4
            CONCR( 13 ) = MAX( CONCR( 13 ) - FNH4, 0.0D0 )         ! (NH4)3H(SO4)2
            CONCR( 4 )  = 2.0D0 * FNH4                             ! (NH4)2SO4
         ELSE IF ( FNH4 .LE. SMALL ) THEN     ! reduce (NH4)3H(SO4)2, add NH4HSO4
            CONCR( 9 )  = 3.0D0 * MIN( FSO4, CONCR( 13 ) )         ! NH4HSO4
            CONCR( 13 ) = MAX( CONCR( 13 ) - FSO4, 0.0D0 )
            IF ( CONCR( 2 ) .GT. SMALL ) THEN ! reduce Na2SO4, add NaHSO4
               FSO4      = MAX( FSO4 - CONCR( 9 ) / 3.0D0, 0.0D0 )
               CONCR( 12 ) = 2.0D0 * FSO4                          ! NaHSO4
               CONCR( 2 )  = MAX( CONCR( 2 ) - FSO4, 0.0D0 )       ! Na2SO4
            END IF
         END IF

      ELSE IF ( SC .EQ. 'T3' ) THEN      ! sulfate rich (free acid) (NH4-SO4-NO3-Cl-Na)
         CONCR( 9 )  = CONC( 3 )                                   ! NH4HSO4
         CONCR( 12 ) = CONC( 1 )                                   ! NAHSO4
         CONCR( 7 )  = MAX( CONC( 2 ) - CONC( 3 ) - CONC( 1 ), 0.0D0 ) ! H2SO4

      ELSE
        PRINT*, 'aero_subs.f: case not supported ',
     &          '(metastable reverse only)'
C        STOP
      END IF

C     Get single-solute molalities for ZSR calculation
!slz      CALL GETM0I (M0I)
      CALL GETM0I (RH, M0I)
C      CALL GETM0I_M0I ( RH,T,M0I )

C     Calculate H2O with ZSR and determine delta water
      WATER = 0.0D0
      DO J = 1, NPAIR
         WATER = WATER + CONCR( J ) / M0I( J )
      END DO

      WATER = MAX ( WATER, SMALL )
      H2O_NEW = WATER / Mw

      END SUBROUTINE CALC_H2O

C-----------------------------------------------------------------------
 
C ROUTINE GETM0I
 
C Description
C   Determines single-solute molalities for the 13 possible salts at
C   the ambient RH.  These molalities are used in the ZSR calculation
C   in CALC_H2O. Note that the molalities were determined at the beginning
C   of the time step, and so they are available in the IONS common block
C   of isrpia.inc.
C   Routine called by CALC_H2O.
 
C Arguments
C   Output
C     M0I : Single-solute molalities (mol/kg-H2O) for 13 salts
 
C-----------------------------------------------------------------------

      SUBROUTINE GETM0I (RHIN, M0I)
      implicit none
      INTEGER, PARAMETER :: NPAIR  =  13

      INTEGER, PARAMETER :: NZSR=100
      REAL( 8 ) ::  AWAS, AWSS, AWAC, AWSC, AWAN, AWSN, AWSB, AWAB,
     &              AWSA, AWLC, AWCS, AWCN, AWCC, AWPS, AWPB, AWPN,
     &              AWPC, AWMS, AWMN, AWMC

C
C *** WATER ACTIVITIES OF PURE SALT SOLUTIONS **************************
C
      COMMON /ZSR / AWAS(NZSR), AWSS(NZSR), AWAC(NZSR), AWSC(NZSR),
     &              AWAN(NZSR), AWSN(NZSR), AWSB(NZSR), AWAB(NZSR),
     &              AWSA(NZSR), AWLC(NZSR), AWCS(NZSR), AWCN(NZSR),
     &              AWCC(NZSR), AWPS(NZSR), AWPB(NZSR), AWPN(NZSR),
     &              AWPC(NZSR), AWMS(NZSR), AWMN(NZSR), AWMC(NZSR)

C     Arguments:
      REAL( 8 ), INTENT( IN )  :: RHIN
      REAL( 8 ), INTENT( OUT ) :: M0I( NPAIR )
      INTEGER IZ

!      M0I = M0    ! Array Assignment
C Location in pure molality array (function of RH)
      IZ = MIN( INT( RHIN * REAL( NZSR, 8 ) + 0.5D0 ), NZSR )
      IZ = MAX( IZ, 1 )

C Default value
      M0I = 1.0D+5   ! array assignment

C Actual values (10,11 not provided)
      M0I( 01 ) = AWSC( IZ )   ! NACl
      M0I( 02 ) = AWSS( IZ )   ! (NA)2SO4
      M0I( 03 ) = AWSN( IZ )   ! NANO3
      M0I( 04 ) = AWAS( IZ )   ! (NH4)2SO4
      M0I( 05 ) = AWAN( IZ )   ! NH4NO3
      M0I( 06 ) = AWAC( IZ )   ! NH4CL
      M0I( 07 ) = AWSA( IZ )   ! 2H-SO4
      M0I( 08 ) = AWSA( IZ )   ! H-HSO4
      M0I( 09 ) = AWAB( IZ )   ! NH4HSO4
      M0I( 12 ) = AWSB( IZ )   ! NAHSO4
      M0I( 13 ) = AWLC( IZ )   ! (NH4)3H(SO4)2

      END SUBROUTINE GETM0I
C-----------------------------------------------------------------------
 
C ROUTINE GETSC
 
C Description
C   Determines the sub-case to use for water uptake calculations.
C   Follows the procedure of ISORROPIA.
C   Routine called by CALC_H2O.
 
C ArgumentS
C   Inputs
C     CONC : Concentration [mol/m^3] of aerosol components. This routine
C            sets minimum CONC to 1.0D-20
C     RH   : Relative humidity
C     T    : Temperature (K)
     
C   Output
C     SC   : Sub-case for aerosol composition
 
C-----------------------------------------------------------------------
      SUBROUTINE GETSC ( CONC, RH, T, SC )

      IMPLICIT NONE

C     Parameters:
      INTEGER, PARAMETER :: NCMP  = 5    ! number of aerosol components
      REAL( 8 ), PARAMETER :: SMALL = 1.0D-20

C     Arguments:
      REAL( 8 ), INTENT( INOUT )    :: CONC( NCMP )
      REAL( 8 ), INTENT( IN )       :: RH, T
      CHARACTER( 2 ), INTENT( OUT ) :: SC

C     Local Variables:
      REAL( 8 ) :: T0, TCF                     ! DRH(T) factor
      REAL( 8 ) :: S4RAT, S4RATW, NaRAT, SRI   ! sulfate & sodium ratios
      REAL( 8 ) :: FSO4                        ! "free" sulfate
      REAL( 8 ) :: DNACL, DNH4CL, DNANO3, DNH4NO3, DNH42S4 ! DRH values

      REAL( 8 ) :: GETASR    ! ISORROPIA function for sulfate ratio

      LOGICAL :: NH4S4, NH4S4N3, ALLSP  ! concentration regime

C     ---------------
C     Begin Execution
C     ---------------

      NH4S4   = .FALSE.  ! NH4-SO4
      NH4S4N3 = .FALSE.  ! NH4-SO4-NO3
      ALLSP   = .FALSE.  ! all species

C     See if any components are negligible
      IF ( CONC( 1 ) + CONC( 4 ) + CONC( 5 ) .LE. SMALL ) THEN   ! Na,Cl,NO3=0
         NH4S4 = .TRUE.
      ELSE IF ( CONC( 1 ) + CONC( 5 ) .LE. SMALL ) THEN        ! Na,Cl=0
         NH4S4N3 = .TRUE.
      ELSE
         ALLSP = .TRUE.
      END IF

      CONC( : ) = MAX( CONC( : ), SMALL )

C     Deliquescence RH calculations
      DNH42S4 = 0.7997D0
      DNH4NO3 = 0.6183D0
      IF ( INT( T ) .NE. 298 ) THEN
         T0      = 298.15D0
         TCF     = 1.0D0 / T - 1.0D0 / T0
         DNH4NO3 = DNH4NO3 * EXP( 852.0D0 * TCF )
         DNH42S4 = DNH42S4 * EXP(  80.0D0 * TCF )
         DNH4NO3 = MIN( DNH4NO3, DNH42S4 ) ! adjust for curves crossing T<271K
      END IF

C     Find sub-case "SC"
      IF ( NH4S4 ) THEN ! NH4-S04 system

         IF (RH >= DNH42S4) THEN
            S4RATW = GETASR(CONC(2), RH) ! aerosol sulfate ratio
         ELSE
            S4RATW = 2.0D0                ! dry aerosol sulfate ratio
         END IF
         S4RAT  = CONC(3) / CONC(2)     ! sulfate ratio (NH4/SO4)

         IF (S4RATW <= S4RAT) THEN      ! sulfate poor
            SC = 'K2'
         ELSE IF (1.0D0 <= S4RAT .AND. S4RAT < S4RATW) THEN ! sulfate rich (no acid)
            SC = 'L4'
         ELSE IF (S4RAT < 1.0D0) THEN   ! sulfate rich (free acid)
            SC = 'M2'
         END IF

      ELSE IF ( NH4S4N3 ) THEN ! NH4-SO4-NO3 system

         IF (RH >= DNH4NO3) THEN
            S4RATW = GETASR(CONC(2), RH)
         ELSE
            S4RATW = 2.0D0               ! dry aerosol ratio
         END IF
         S4RAT = CONC(3) / CONC(2)


10       IF (S4RATW <= S4RAT) THEN     ! sulfate poor
            SC = 'N3'
         ELSE IF (1.0D0 <= S4RAT .AND. S4RAT < S4RATW) THEN  ! sulfate rich (no acid)
            SC = 'O4'
         ELSE IF (S4RAT < 1.0D0) THEN    ! sulfate rich (free acid)
            SC = 'P2'
         END IF

      ELSE IF ( ALLSP )  THEN ! all species

C     Adjust DRH of NH4NO3 for low temperature
         DNACL   = 0.7528D0
         DNANO3  = 0.7379D0
         DNH4CL  = 0.7710D0
         IF ( INT( T ) .NE. 298 ) THEN
            DNACL   = DNACL  * EXP(  25.0D0 * TCF )
            DNANO3  = DNANO3 * EXP( 304.0D0 * TCF )
            DNH4CL  = DNH4Cl * EXP( 239.0D0 * TCF )
            DNH4NO3 = MIN( MIN( DNH4NO3, DNH4CL, DNANO3), DNACL )
         END IF

        IF ( RH .GE. DNH4NO3 ) THEN
           FSO4   = CONC( 2 ) - CONC( 1 ) / 2.0D0   ! sulfate unbound by Na+
           FSO4   = MAX( FSO4, SMALL )
           SRI    = GETASR( FSO4, RH )
           S4RATW = ( CONC( 1 ) + FSO4 * SRI ) / CONC( 2 )
           S4RATW = MIN( S4RATW, 2.0D0 )
        ELSE
           S4RATW = 2.0D0                       ! ratio for dry aerosol
        END IF
        S4RAT = ( CONC( 1 ) + CONC( 3 ) ) / CONC( 2 )
        NaRAT = CONC( 1 ) / CONC( 2 )

        IF ( S4RATW .LE. S4RAT .AND. NaRAT .LT. 2.0D0 ) THEN ! sulfate poor, sodium poor
           SC = 'Q5'
        ELSE IF ( S4RAT .GE. S4RATW .AND. NaRAT .GE. 2.0D0 ) THEN ! SO4 poor, Na rich
           SC = 'R6'
        ELSE IF ( 1.0D0 .LE. S4RAT .AND. S4RAT .LT. S4RATW ) THEN ! SO4 rich, no acid
           SC = 'S6'
        ELSE IF ( S4RAT .LT. 1.0D0 ) THEN                    ! sulfate rich, free acid
           SC = 'T3'
        END IF

      END IF

      END SUBROUTINE GETSC

C //////////////////////////////////////////////////////////////////
C  FUNCTION GETAF returns the value of "Xnum" in Equations 10a and 10c
C   of Binkowski and Roselle (2003), given the number concentrations,
C   median diameters, and natural logs of the geometric standard
C   deviations, in two lognormal modes.  The value returned by GETAF
C   is used subsequently in the mode merging calculations:
C         GETAF = ln( Dij / Dgi ) / ( SQRT2 * ln(Sgi) )
C   where Dij is the diameter of intersection,
C         Dgi is the median diameter of the smaller size mode, and
C         Sgi is the geometric standard deviation of smaller mode.
C   A quadratic equation is solved to obtain GETAF, following the
C   method of Press et al.
C 
C  REFERENCES:
C   1. Binkowski, F.S. and S.J. Roselle, Models-3 Community
C      Multiscale Air Quality (CMAQ) model aerosol component 1:
C      Model Description.  J. Geophys. Res., Vol 108, No D6, 4183
C      doi:10.1029/2001JD001409, 2003.
C   2. Press, W.H., S.A. Teukolsky, W.T. Vetterling, and B.P.
C      Flannery, Numerical Recipes in Fortran 77 - 2nd Edition.
C      Cambridge University Press, 1992.

      real function getaf( ni, nj, dgni, dgnj, xlsgi, xlsgj, sqrt2 )

      implicit none

      real ni, nj, dgni, dgnj, xlsgi, xlsgj, sqrt2
      real AA, BB, CC, DISC, QQ, alfa, L, yji

C *** Store intermediate values used for the quadratic solution
C     to reduce computational burden
      alfa = xlsgi / xlsgj
      yji = log( dgnj / dgni ) / ( sqrt2 * xlsgi )
      L = log( alfa * nj / ni)

C *** Calculate quadratic equation coefficients & discriminant
      AA = 1.0 - alfa * alfa
      BB = 2.0 * yji * alfa * alfa
      CC = L - yji * yji * alfa * alfa
      DISC = BB * BB - 4.0 * AA * CC

C *** If roots are imaginary, return a negative GETAF value so that no
C     mode merging takes place.
      if ( DISC .lt. 0.0 ) then
         getaf = - 5.0       ! error in intersection
         return
      end if

C *** Equation 5.6.4 of Press et al.
      QQ = -0.5 * ( BB + sign( 1.0, BB ) * sqrt( DISC ) )

C *** Return solution of the quadratic equation that corresponds to a
C     diameter of intersection lying between the median diameters of
C     the 2 modes.
      getaf = CC / QQ       ! See Equation 5.6.5 of Press et al.

      return
      end function getaf

C //////////////////////////////////////////////////////////////////
C  SUBROUTINE INLET25 calculates the volume fraction of a given
C   aerosol mode that would enter a sharp-cut PM2.5 inlet, using
C   equations from Jiang et al (2005).
 
C  KEY SUBROUTINES CALLED: none
 
C  KEY FUNCTIONS CALLED:  ERF
 
C  REVISION HISTORY:
C    Coded Jul 2005 by Prakash Bhave
C          Apr 2008 J.Kelly: corrected equation for Dst25 calculation
 
C  REFERENCES:
C   1. Jiang, W., Smyth, S., Giroux, E., Roth, H., Yin, D., Differences
C   between CMAQ fine mode particle and PM2.5 concentrations and their
C   impact on model performance evaluation in the Lower Fraser Valley,
C   Atmos. Environ., 40:4973-4985, 2006.

C   2. Meng, Z., Seinfeld, J.H., On the source of the submicrometer
C   droplet mode of urban and regional aerosols, Aerosol Sci. and
C   Technology, 20:253-265, 1994.

      SUBROUTINE INLET25 ( DGN, XXLSG, RHOP, INFRAC )

      IMPLICIT NONE

C    Input variables
      REAL   DGN     ! geometric mean Stokes diameter by number [ m ]
      REAL   XXLSG   ! natural log of geometric standard deviation
      REAL   RHOP    ! average particle density [ kg/m**3 ]

C    Output variable
      REAL   INFRAC  ! fraction of particulate volume transmitted through inlet

C    Internal variables
      REAL, PARAMETER :: SQRT2 = 1.4142135623731    !  SQRT( 2 )
      REAL, PARAMETER :: PI = 3.14159265358979324   ! PI (single precision 3.141593)

      REAL, PARAMETER :: DCA25 = 2.5 ! aerodynamic diameter cut point [ um ]
      REAL, PARAMETER :: B = 0.21470 ! Cunningham slip-correction approx. param [ um ]
      REAL DST25                     ! Stokes diameter equivalent of DCA25
      REAL DG                        ! DGN converted to [ um ]
      REAL ERFARG                    ! argument of ERF, from Step#6 of Jiang et al. (2005)

C *** Error function approximation, from Meng & Seinfeld (1994)
      REAL ERF        ! Error function
      REAL XX         ! dummy argument for ERF
      ERF( XX )  = SIGN( 1.0, XX ) * SQRT( 1.0 - EXP( -4.0 * XX * XX / PI ) )

C ----------------------- Begin solution -------------------------------

C *** Convert 2.5um size cut to its equivalent Stokes diameter using
C     equation 2 of Jiang et al. (2006). Note: the equation in Step 5
C     of this paper has a typo (i.e., eq. 2 is correct).

      DST25 = 0.5 * ( SQRT( B ** 2 + 4.0 * DCA25 *
     &                     ( DCA25 + B ) * 1.0E+03 / RHOP ) - B )

C *** Calculate mass fraction with Dca < 2.5um, using ERF approximation
C     from Meng & Seinfeld (1994) and modified form of Fk(X) equation
C     in Step#6 of Jiang et al. (2005).

      DG = DGN * 1.0E+06
      ERFARG = ( LOG( DST25 ) - LOG( DG ) ) / ( SQRT2 * XXLSG ) - 3.0 * XXLSG / SQRT2
      INFRAC = 0.5 * ( 1.0 + ERF( ERFARG ) )

      END SUBROUTINE INLET25
Ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
C
      SUBROUTINE GETVISBY( DCV1, EXT1, DCV2, EXT2 )
C
Ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
C *** This routine calculates the Pitchford & Malm visual index,
C     deciview, using the Evans & Fournier extinction with 20 point
C     Gauss_Hermite numerical quadrature to integrate the extincetion
C     over the log normal size distribution.
C     This new method reproduces the results of Willeke and Brockmann
C     very very closely.
C     The Heintzenberg and Baker (h&b) method used previously has been
C     replaced.
C *** This also routine calculates the Pitchford & Malm visual index,
C     deciview, using reconstructed extinction values from the IMPROVE
C     monitoring network
C
C *** references:
C
C     Evans, B.T.N.  and G.R. Fournier, Simple approximations to
C     extinction efficiency valid over all size parameters,
C     Applied Optics, 29, 4666 - 4670.
C
C     Heintzenberg, j. and M. Baker, Applied Optics, vol. 15, no. 5,
C     pp 1178-1181, 1976.
C     correction in Applied Optics August 1976 does not affect this code.
C
C     Sisler, J. Fax dated March 18, 1998 with IMPROVE information.
C
C     Pitchford, M. and W. Malm, Atmos. Environ.,vol 28,no.5,
C     pp 1049-1054, 1994.
C
C     Willeke,K. & J. E. Brockmann, Atmos. Environ., vol.11,
C     pp 995 - 999, 1977.
C
Coding history:
C    who           when     what
C ------------------------------------------------------------------
C   F.S. Binkowski 5/9/95
C             coded this version to use the h&b approximation
C             and alfa and c obtained from fits to adt results
C             b was fit from comparisons to willeke & brockmann.
C   F.S. Binkowski 9/12/95  modified code to push j-loop inside.
C   F.S. Binkowski 5/13/97  made models-3 version
C   F.S. Binkowski 4/20/98  changed to Evans and Fournier approach
C                           for extinction
C   F.S. Binkowski 4/20/98  began code for reconstructed method
C   F.S. Binkowski 4/24/98  merged codes for both methods
C   F.S. Binkowski 5/20/98  corrected CONSTL
C   F.S. Binkowski 3/9/99   Modified for variable XXLSGAT and XXLSGAC
C   P.V. Bhave     1/30/08  Updated EXT2 to account for new SOA species
C   J.T. Kelly     4/17/08  Modified for variable XXLSGCO
C ////////
C NOTE: This subroutine is dependent upon the variables defined in the
C       IF( FIRSTIME ) section of aeroproc.f for implementation of
C                      coarse mode contribution.
C ///////

      USE aero_data
      USE soa_defn
      USE met_data

      IMPLICIT NONE

      REAL    DCV1   ! block deciview (Mie)
      REAL    EXT1   ! block extinction [ km**-1 ] (Mie)

      REAL    DCV2   ! block deciview (Reconstructed)
      REAL    EXT2   ! block extinction [ km**-1 ]
                                  ! (Reconstructed)

C *** Paramters 

      REAL, PARAMETER :: LAM = 0.55E-6  ! wavelenght of visible light [ m ]

      REAL, PARAMETER :: CONSTL = 1.0E3 * PI6 / LAM    ! 1.0e3  to get km**-1

      REAL, PARAMETER :: CONST3 = PI / LAM  ! Changed 3/9/99 FSB

      REAL, PARAMETER :: SCALE = 1.0E-03  ! factor to rescale units from [ 1/Mm ] to [ 1/km ]

      REAL, PARAMETER :: RAY = 0.01         ! standard value for Rayleigh extinction [ 1/km ]
      REAL, PARAMETER :: RAY1 = 1.0 / RAY   ! the reciprocal of Rayleigh

C *** internal variables:

      INTEGER IRH ! percent realtive humidity as an
                  ! integer used for index

      REAL    WFRAC  ! water mass fraction
      REAL    NR, NI ! real and imaginary parts of the refractive index
      REAL    ALFV( n_mode )  ! Mie parameters for modal mass median diameters
      REAL    BBEXT  ! dimensionless extinction coefficient
      REAL    BEXT( n_mode ) ! Modal extinction coefficients [ 1/km ]

      REAL    FRH ! RH correction factor for sulfate and nitrate aerosols

      REAL    humfac(99) ! humidity scaling factors at 1% RH values
         DATA humfac/
     &   1.0000E+00,  1.0000E+00,  1.0000E+00,  1.0000E+00,  1.0000E+00,
     &   1.0000E+00,  1.0000E+00,  1.0000E+00,  1.0000E+00,  1.0000E+00,
     &   1.0000E+00,  1.0000E+00,  1.0000E+00,  1.0001E+00,  1.0001E+00,
     &   1.0004E+00,  1.0006E+00,  1.0024E+00,  1.0056E+00,  1.0089E+00,
     &   1.0097E+00,  1.0105E+00,  1.0111E+00,  1.0115E+00,  1.0118E+00,
     &   1.0122E+00,  1.0126E+00,  1.0130E+00,  1.0135E+00,  1.0139E+00,
     &   1.0173E+00,  1.0206E+00,  1.0254E+00,  1.0315E+00,  1.0377E+00,
     &   1.0486E+00,  1.0596E+00,  1.0751E+00,  1.0951E+00,  1.1151E+00,
     &   1.1247E+00,  1.1343E+00,  1.1436E+00,  1.1525E+00,  1.1615E+00,
     &   1.1724E+00,  1.1833E+00,  1.1955E+00,  1.2090E+00,  1.2224E+00,
     &   1.2368E+00,  1.2512E+00,  1.2671E+00,  1.2844E+00,  1.3018E+00,
     &   1.3234E+00,  1.3450E+00,  1.3695E+00,  1.3969E+00,  1.4246E+00,
     &   1.4628E+00,  1.5014E+00,  1.5468E+00,  1.5992E+00,  1.6516E+00,
     &   1.6991E+00,  1.7466E+00,  1.7985E+00,  1.8549E+00,  1.9113E+00,
     &   1.9596E+00,  2.0080E+00,  2.0596E+00,  2.1146E+00,  2.1695E+00,
     &   2.2630E+00,  2.3565E+00,  2.4692E+00,  2.6011E+00,  2.7330E+00,
     &   2.8461E+00,  2.9592E+00,  3.0853E+00,  3.2245E+00,  3.3637E+00,
     &   3.5743E+00,  3.7849E+00,  4.0466E+00,  4.3594E+00,  4.6721E+00,
     &   5.3067E+00,  5.9412E+00,  6.9627E+00,  8.3710E+00,  9.7793E+00,
     &   1.2429E+01,  1.5078E+01,  1.8059E+01,  2.1371E+01/

         SAVE humfac

      INTEGER N       ! loop counter

C-----------------------------------------------------------------------

C NOTE: In the following calculations, the contribution from the
C        coarse mode is ignored.

C *** calculate the  mass fraction of aerosol water

      WFRAC = MIN( ( AEROSPC_CONC( AH2O_IDX,1 ) + AEROSPC_CONC( AH2O_IDX,2 ) )
     &            / ( AEROMODE_MASS( 1 ) + AEROMODE_MASS( 2 ) ), 1.0 )

C *** interpolate between "dry" state with m = 1.5 - 0.01i
C     and pure water particle with  m = 1.33 - 0.0i as a function of
C     wfrac

      NR = 1.5 - 0.17 * WFRAC     ! real part of refractive index
      NI = 0.01 * ( 1.0 - WFRAC ) ! imaginary part of refractive index

C *** set up Mie parameters for Volume ( mass median diameter)
      
      DO N = 1, N_MODE
        ALFV( N ) = CONST3 * AEROMODE_DIAM( N )
     &            * EXP( 3.0 * AEROMODE_SDEV( N ) * AEROMODE_SDEV( N ) )
      END DO

C *** Call extinction routines

      DO N = 1, N_MODE
         CALL GETBEXT( NR, NI, ALFV( N ), AEROMODE_SDEV( N ), BBEXT )
         BEXT( N ) = CONSTL * MOMENT3_CONC( N ) * BBEXT
      END DO

      BEXT( N_MODE ) = 0.0

      EXT1  = BEXT( 1 ) + BEXT( 2 ) + RAY

      DCV1  = 10.0 * LOG ( EXT1 * RAY1 )

C     note if EXT1 < 0.01 then DCV1 is negative.
C     this implies that visual range is greater than the Rayleigh limit.
C     The definition of deciviews is based upon the Rayleigh limit
C     being the maximum visual range
C     thus, set a floor of 0.0 on DCV1.

      DCV1  = MAX( 0.0, DCV1 )

C *** begin  IMPROVE reconstructed method

      IRH = INT( 100.0 * AIRRH  ) ! truncate relative humidity to
                                  ! nearest integer
      IRH = MIN( 99, IRH )        ! set maximum value on IRH
      IRH = MAX( 1, IRH )         ! set minimum value on IRH


      FRH = humfac( IRH )         ! set humidity correction

C *** NOTE in the following the fine primary mass "other" is
C     treated as though it were fine mass soil.

      EXT2 = 0.0
      
      !  sum from aerospc species
      DO N = 1, N_AEROSPC
         IF ( N .EQ. ASO4_IDX .OR. N .EQ. ANO3_IDX .OR. N .EQ. ANH4_IDX ) THEN
            IF ( AEROSPC( N )%NAME( 1 ) .NE. ' ' ) THEN
               EXT2 = EXT2 + FRH * AEROSPC( N )%VISUAL_IDX * AEROSPC_CONC( N,1 )
            END IF
            IF ( AEROSPC(N )%NAME( 2 ) .NE. ' ' ) THEN
               EXT2 = EXT2 + FRH * AEROSPC( N )%VISUAL_IDX * AEROSPC_CONC( N,2 )
            END IF
            CYCLE
         END IF

         IF ( AEROSPC( N )%NAME( 1 ) .NE. ' ' ) THEN
            EXT2 = EXT2 + AEROSPC( N )%VISUAL_IDX * AEROSPC_CONC( N,1 )
         END IF
         IF ( AEROSPC( N )%NAME( 2 ) .NE. ' ' ) THEN
            EXT2 = EXT2 + AEROSPC( N )%VISUAL_IDX * AEROSPC_CONC( N,2 )
         END IF
      END DO

      !  sum from soa species
      DO N = 1, N_VAPOR  
         EXT2 = EXT2 + 4.0 * AEROSPC_CONC( SOA_AEROMAP( N ),2 )
      END DO

      EXT2 = SCALE * EXT2 + RAY

      DCV2  = 10.0 * LOG ( EXT2  * RAY1 )

C     note if EXT2 < RAY then DCV2 is negative.
C     this implies that visual range is greater than the Rayleigh limit.
C     The definition of deciviews is based upon the Rayleigh limit
C     being the maximum visual range
C     thus, set a floor of 0.0 on BLKDCV.

      DCV2  = MAX( 0.0, DCV2 )

      RETURN
      END SUBROUTINE GETVISBY

Ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
C
      subroutine getbext(nr, ni, alfv, xlnsig, bext)
C
Ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

C     calculates the extinction coefficient normalized by wavelength
C     and total particle volume concentration for a log normal
C     particle distribution with the logarithm of the
C     geometric standard deviation given by xlnsig.
C
C *** does gauss-hermite quadrature of Qext / alfa
C     over log normal distribution
C     using 20 symmetric points
C
      implicit none

      real nr, ni  ! indices of refraction
      real alfv    ! Mie parameter for dgv
      real xlnsig  ! log of geometric standard deviation
      real bext    ! normalized extinction coefficient
      real aa, aa1 ! see below for definition

      real alfaip, alfaim   ! Mie parameters at abscissas

      real xxqalf  ! function to calculate the extinction ceofficient
      real qalfip, qalfim   ! extinction efficiencies at abscissas

      real pi
      parameter( pi = 3.14159265 )

      real sqrtpi
      parameter( sqrtpi = 1.772454 )

      real sqrtpi1
      parameter( sqrtpi1 = 1.0 / sqrtpi )

      real sqrt2
      parameter( sqrt2 = 1.414214 )

      real three_pi_two
      parameter( three_pi_two = 3.0 * pi / 2.0 )

      real const
      parameter( const = three_pi_two * sqrtpi1 )

      integer i
      real sum, xi,wxi,xf

      integer n    ! one-half the number of abscissas
      parameter ( n = 10 )
      real ghxi( n ) ! Gauss-Hermite abscissas
      real ghwi( n ) ! Gauss-Hermite weights

C *** the following weights and abscissas are from abramowitz and
C     stegun, page 924
C *** tests show that 20 point is adquate.

      data ghxi / 0.245341, 0.737474, 1.234076, 1.738538, 2.254974,
     &            2.788806, 3.347855, 3.944764, 4.603682, 5.387481 /

      data ghwi/ 4.622437e-1, 2.866755e-1, 1.090172e-1, 2.481052e-2,
     &           3.243773e-3, 2.283386e-4, 7.802556e-6, 1.086069e-7,
     &           4.399341e-10, 2.229394e-13 /

      sum = 0.0

      aa = 1.0 / ( sqrt2 * xlnsig )
      aa1 = sqrt2 * xlnsig ! multiplication cheaper
                           ! than another division

      do i = 1, n

         xi      = ghxi( i )
         wxi     = ghwi( i)
         xf      = exp( xi * aa1 )
         alfaip  = alfv * xf
         alfaim  = alfv / xf
         qalfip  = xxqalf( alfaip, nr, ni )
         qalfim  = xxqalf( alfaim, nr, ni )

         sum = sum + wxi * ( qalfip + qalfim )

      end do ! i

C fsb      bext = const * aa * sum
      bext = const * sum ! corrected 07/21/2000 FSB
                         ! found by Rokjin Park

      return
      end subroutine getbext

Ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
C ________________________
      real function xxqalf( alfa, nr, ni )
C
Ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

C *** compute the extinction efficiency divided by the Mie parameter
C     reference:
C     Evans, B.T.N.  and G.R. Fournier, Simple approximations to
C     extinction efficiency valid over all size parameters,
C     Applied Optics, 29, 4666 - 4670.

      implicit none

      real alfa
      real nr, ni  ! real and imaginary parts of index of refraction

      real qextray
      real qextadt
      real qextef
      real tt        !  edge effect factor
      real mu, mum1  !  exponents in formula
      real aa        !  first coefficient in mu
      real gg        !  second coefficient in mu
      real nrm1, sqrtni
      real alfm23   ! functions of alfa (mie parameter)
      real three5, three4, two3
      parameter( three5    = 3.0 / 5.0   ,
     &           three4    = 3.0 / 4.0   ,
     &           two3      = 2.0 / 3.0   )

      nrm1   = nr - 1.0
      sqrtni = sqrt (ni )

      call adtqext( alfa, nr, ni, qextadt )
      call pendrfx( alfa, nr, ni, qextray )

      if ( alfa .gt. 0.5 ) then

         alfm23 = 1.0 / alfa ** two3

         tt     = 2.0 - exp( -alfm23 )

         aa     = 0.5 + ( nrm1 - two3 * sqrtni - 0.5 * ni ) +
     &           ( nrm1 + two3 * ( sqrtni - 5.0  * ni )  ) ** 2

         gg     = three5 - three4 * sqrt ( nrm1) + 3.0 * nrm1 ** 4 +
     &            25.0 * ni / ( 6.0 * ni + 5.0 * nrm1 )

         mu     = aa + gg / alfa
         mum1   = - 1.0 / mu

         qextef = qextray *
     &           ( 1.0 + (qextray /( qextadt * tt)) ** mu ) ** mum1

      else

         qextef = qextray ! Use Rayleigh extinction for
                           ! really small alfa's

      end if ! check on alfa

      xxqalf = qextef / alfa

      return
      end function xxqalf
	
Ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
C ______________________________________
      subroutine adtqext( alfa, nr, ni, QEXT )
C
Ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

C *** van de Hulst approximation for QEXT.
C *** This approximation is known as Anomalous Diffraction Theory (ADT)
C
C *** originally coded by Dr Francis  S. Binkowski,
C     AMAB/MD/ESRL RTP,N.C. 27711 28 July 1977.
C     corrected 7/19/90 by fsb.
C     revised 1/8/98 by FSB
C
C *** reference:
C     van de Hulst- Light Scattering by Small Particles,
C     Dover,1981 page 179. Original edition was Wiley, 1957.

      implicit none
      real alfa   ! Mie parameter
      real nr, ni ! real and imaginary parts of the index of refraction
      real QEXT   ! extinction efficiency for a sphere
      real z, tanb, b, cos2b, v1, v2, x, expmx, expm2x, cs1, cs2
      real twob, cosb
      real nr1

      nr1    = nr - 1.0
      z     = 2.0 * alfa * nr1
      tanb  = ni/nr1
      b     = atan(tanb)
      cosb  = cos(b)
      twob  = 2.0 * b
      cos2b = cos(twob)
      v1     = 5.0 * nr1
      v2     = 4.08 / (1.0 + 3.0 * tanb)
      x      = z * tanb
      expmx  = exp( -x )
      expm2x = exp( -2.0 * x )
      cs1    = cosb / z
      cs2    = cs1 * cs1

      QEXT   = 2.0 - 4.0 * cs1 * expmx * sin( z - b) +
     &         4.0 * cs2 * ( cos2b - expmx * cos(z - twob))
      return
      end subroutine adtqext
Ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
C __________________________________________________
      subroutine pendrfx( alfa, nr, ni, QEXT )
C
Ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

C *** calculates the Mie efficiencies for extinction, scattering and
C     absorption using Penndorf's approximations for small
C     values of alfa.
C
C  input:
C       nr        the real part of the refractive index.
C       ni        the imaginary part of the refractive index
C       alfa      mie parameter
C
C
C  output:
C       QEXT      extinction efficiency
C
C *** reference:
C       Penndorf, r., Scattering and extinction coefficients for small
C       aerosols, J. Atmos. Sci., 19, p 193, 1962.
C
C *** coded by Dr Francis  S.  Binkowski,
C       AMAB/MD/ESRL RTP,N.C. 27711 28 July 1977.
C       corrected 7/19/90 by FSB
C       modified 30 september 1992 by FSB
C       modified 1/6/98 by FSB

      implicit none

      real alfa, nr, ni
      real QEXT
      real alf2,alf3,alf4

      real a1,a2,a3
      real xnr,xni,xnr2,xni2,xnri,xnri2,xnrmi
      real xri,xri2,xri36,xnx,xnx2
      real z1,z12,z2,xc1

      xnr   = nr
      xni   = ni
      xnr2  = xnr   * xnr
      xni2  = xni   * xni
      xnri  = xnr2  + xni2
      xnri2 = xnri  * xnri
      xnrmi = xnr2  - xni2
      xri   = xnr   * xni
      xri2  = xri   * xri
      xri36 = 36.0  * xri2
      xnx   = xnri2 + xnrmi - 2.0
      xnx2  = xnx   * xnx

      z1    = xnri2 + 4.0 * xnrmi + 4.0
      z12   = z1    * z1
      z2    = 4.0   * xnri2 + 12.0 * xnrmi + 9.0
      xc1   = 8.0   / ( 3.0 * z12 )

      alf2  = alfa  * alfa
      alf3  = alfa  * alf2
      alf4  = alfa  * alf3

      a1    = 24.0  * xri / z1

      a2    = 4.0   * xri / 15.0 + 20.0 * xri / ( 3.0 * z2 ) +
     &        4.8   * xri * ( 7.0 * xnri2 +
     &        4.0   * ( xnrmi - 5.0 ) ) / z12

      a3    = xc1   * ( xnx2 - xri36 )

      QEXT  = a1    * alfa + a2 * alf3 + a3 * alf4

      return
      end subroutine pendrfx

