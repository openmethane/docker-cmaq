!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.4 (r3376) - 10 Feb 2010 17:51
!
!:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
      MODULE PRECURSOR_DATA_B
        use PRECURSOR_DATA
        IMPLICIT NONE
        REAL :: precursor_concb(n_precursor)
        REAL :: so4rateb

C   Attribute "Private" removed in precursor_data.f
C	  
C      Type ( precursor_type ), Private :: precursor( n_precursor ) = (/
CC                       Name       Accum
CC                    ----------   -------
C     & precursor_type( 'NO2     ', .False. ),
C     & precursor_type( 'N2O5    ', .False. ),
C     & precursor_type( 'HNO3    ', .False. ),
C     & precursor_type( 'HONO    ', .False. ),
C     & precursor_type( 'ISOPRXN ', .True.  ),
C     & precursor_type( 'TRPRXN  ', .True.  ),
C     & precursor_type( 'SULF    ', .False. ),
C     & precursor_type( 'SULPRD  ', .True.  ),
C     & precursor_type( 'HCL     ', .False. ),
C     & precursor_type( 'TOLNRXN ', .True.  ),
C     & precursor_type( 'TOLHRXN ', .True.  ),
C     & precursor_type( 'XYLNRXN ', .True.  ),
C     & precursor_type( 'XYLHRXN ', .True.  ),
C     & precursor_type( 'BNZNRXN ', .True.  ),
C     & precursor_type( 'BNZHRXN ', .True.  ),
C     & precursor_type( 'SESQRXN ', .True.  ),
C     & precursor_type( 'NH3     ', .False. ) /)
     
      CONTAINS
!  Differentiation of extract_precursor in reverse (adjoint) mode:
!   gradient     of useful results: precursor_conc conc
!   with respect to varying inputs: conc
!
!-----------------------------------------------------------------------
        SUBROUTINE EXTRACT_PRECURSOR_B(conc, concb)
          USE MET_DATA
          IMPLICIT NONE
!
! /////////////////////////////////////////////////////////////////////
!  Subroutine extract_precursor extracts the required precursor data
!     from the 'conc' array.
!
!  Revision History:
!     First version was coded in April 2010 by Steve Howard with
!     Prakash Bhave, Jeff Young, and Sergey Napelenok.
!
!----------------------------------------------------------------------
!
! air and met variables
!
! Arguments:
          REAL :: conc(:)
          REAL :: concb(:)
!
! Functions:
          INTEGER, EXTERNAL :: index1
!
! Local Variables:
! converts from [ppm] to [ug/m^3]
          REAL :: gasconv
          REAL :: vtmp
          INTEGER :: n
          INTEGER :: spc
!
! Compute gas conversion constant
          gasconv = airdens*1.0e3/mwair
!
! Copy grid cell concentrations of precursor species	    
          DO spc=1,n_precursor
            n = precursor_map(spc)
		
            IF (n.ne.0) THEN
		  vtmp = gasconv*precursor_mw(spc)
              IF (conc(n)*vtmp .GE. min_gasconc) THEN
                concb(n) = concb(n) + vtmp*precursor_concb(spc) 
		  END IF
		  precursor_concb(spc) = 0.0
		END IF
          END DO
	    
        END SUBROUTINE EXTRACT_PRECURSOR_B
!-----------------------------------------------------------------------
        SUBROUTINE UPDATE_PRECURSOR_B(conc, concb)
          USE MET_DATA
          IMPLICIT NONE
          INCLUDE SUBST_IOPARMS

          REAL :: conc(:)
          REAL :: concb(:)
!
! local variables:
          CHARACTER(len=80) :: xmsg
! converts from [ppm] to [ug/m^3]
          REAL :: gasconv
          REAL :: vtmp
          INTEGER :: n
          INTEGER :: spc
!
! compute gas conversion constant
          gasconv = airdens*1.0e3/mwair
!
          precursor_concb = 0.0	    
	    Do spc = 1, n_precursor
            n = precursor_map( spc )
		If ( n .Ne. 0 ) Then
		  If ( .NOT. precursor( spc )%accum ) Then
		    vtmp = precursor_mw( spc ) * gasconv
		    IF(precursor_conc(spc)/vtmp .GE. min_gasconc) THEN
		      precursor_concb(spc) = precursor_concb(spc) + concb(n)/vtmp
		    END IF
		  End If
		  concb(n) = 0.0
		End If
         End Do
	   
        END SUBROUTINE UPDATE_PRECURSOR_B
	  
      END MODULE PRECURSOR_DATA_B
