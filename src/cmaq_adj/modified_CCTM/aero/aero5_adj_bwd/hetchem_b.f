!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.4 (r3376) - 10 Feb 2010 17:51
!
!  Differentiation of hetchem in reverse (adjoint) mode:
!   gradient     of useful results: aeromode_diam moment2_conc
!                moment3_conc aerospc_conc aeromode_sdev precursor_conc
!   with respect to varying inputs: aeromode_diam moment2_conc
!                moment3_conc aerospc_conc aeromode_sdev precursor_conc
!                precursor_mw dfhono dfhno3 faern2o5 faerno2
!
!***********************************************************************
!   Portions of Models-3/CMAQ software were developed or based on      *
!   information from various groups: Federal Government employees,     *
!   contractors working on a United States Government contract, and    *
!   non-Federal sources (including research institutions).  These      *
!   research institutions have given the Government permission to      *
!   use, prepare derivative works, and distribute copies of their      *
!   work in Models-3/CMAQ to the public and to permit others to do     *
!   so.  EPA therefore grants similar permissions for use of the       *
!   Models-3/CMAQ software, but users are requested to provide copies  *
!   of derivative works to the Government without restrictions as to   *
!   use by others.  Users are responsible for acquiring their own      *
!   copies of commercial software associated with Models-3/CMAQ and    *
!   for complying with vendor requirements.  Software copyrights by    *
!   the MCNC Environmental Modeling Center are used with their         *
!   permissions subject to the above restrictions.                     *
!***********************************************************************
!
! RCS file, release, date & time of last delta, author, state, [locker]
! $Header: /Volumes/Data/CVS/CMAQ_CVSrepos/CCTM/src/aero/aero5_adj_bwd/hetchem_b.f,v 1.1 2010/11/18 14:51:24 sergey Exp $
!
! what(1) key, module and SID; SCCS file; date and time of last delta:
! %W% %P% %G% %U%
!
! /////////////////////////////////////////////////////////////////////
!  SUBROUTINE HETCHEM calculates the heterogeneous conversion of N2O5
!    to HNO3 by following the Model Description section by Pleim et
!    al. (1995).
!
!  KEY SUBROUTINES CALLED: none
!
!  KEY FUNCTIONS CALLED: N2O5PROB
!
!  REVISION HISTORY:
!     First version was coded in November 2007 by Dr. Prakash Bhave
!     using excerpts of the EQL3 subroutine in CMAQv4.6.  Entries
!     from the EQL3 revision history which are specific to the
!     heterogeneous chemistry calculations have been copied here, to
!     preserve that history in the event that the EQL3 subroutine is
!     later removed from the aerosol code.
!
! FSB 10/23/01 Revised to include the heterogeneous reaction of N2O5
!              with aerosol to produce HNO3, based on Pleim et al
!              (1995).  AIRPRS & DT added to call vector. These
!              modifications assume that GETPAR has been called prior
!              to calling EQL3.  It is also assumed that AH2OI and AH2OJ
!              have been added to the transport routines.
!
! GLG 08/15/02 Revised to use radius instead of diameter in calculation
!              of N2O5->HNO3 rate constant
!
! GLG 03/10/03 Revised to use composition-dependent gamma from Riemer
!              et al. (2003)
!
! SJR 03/14/03 Revised to use the effective diameter in the calculation
!              of N2O5->HNO3 rate constant instead of the geometric
!              mean diameter
!
! SJR 04/15/03 Corrected units in the HNO3 yield from the heterogeneous
!              N2O5 Rxn of Riemer et al. (2003)
!
! GS  04/04/06 Revised to use T,RH-dependent gamma from Evans & Jacob
!              (2005).  Retained ratio of GAMMA1/GAMMA2 from Riemer et
!              al. (2003).
!
! PVB 04/06/06 Added GAMMA to the call vector, so it can be written
!              to the aerosol diagnostic file.
!
! JOY 04/04/07 Optimized GAMMA calculation; initialized GAMMA in case
!              RH < 1%; Note: some compilers recognize GAMMA as an
!              intrinsic GAMMA function.
!
! PVB 11/06/07 Copied excerpts of the EQL3 subroutine to create this
!              new subroutine.  Moved all calculations of GAMMA to a
!              function subprogram, N2O5PROB.  Revised to use GAMMA
!              parameterization of Davis et al (2008), by default.
!
! GS  03/31/08 Added a heterogeneous reaction producing HONO
!
! JTK 04/17/08 Moved molar mass and conversion factors to AERO_INFO.f
!
! SH  12/08/09 Use new Fortran modules (aero_data, precursor_data,
!              met_data) in lieu of CBLK array and AERO_INFO module
!
!  REFERENCES:
!   1. Pleim, J.E., F.S. Binkowski, J.K.S. Ching, R.L. Dennis, and N.V.
!      Gallani, An improved representation of the reaction of N2O5 on
!      aerosols for mesoscale air quality models.  In "Regional
!      Photochemical Measurement and Modeling Studies, Vol 2 - Results
!      and Status of Modeling," Eds A.J. Ranzieri and P.A. Solomon, pp
!      904-913, 1995.
!
!   2. Davis, J.M., P.V. Bhave, and K.M. Foley, Parameterization of N2O5
!      reaction probabilities on the surface of particles containing
!      ammonium, sulfate, and nitrate.  Atmos. Chem. Phys., 2008, in
!      press.
!
!   3. Vogel, B., H. Vogel, J. Kleffman, and R. Kurtenbach, Measured and
!      simulated vertical profiles of nitrous acid - Part II. Model
!      simulations and indications for a photolytic source, Atmospheric
!      Environment, 37, 2957-2966, 2003.
!
!   4. Sarwar, G., S.J. Roselle, R. Mathur, W. Appel, R.L. Dennis, and
!      B. Vogel, A comparison of CMAQ HONO predictions with observations
!      from the Northeast Oxidant and Particle Study, Atmospheric
!      Environment, 2008, in press.
!
!----------------------------------------------------------------------
!
      SUBROUTINE HETCHEM_B(gamma, dt)
        USE AERO_DATA_B
        USE PRECURSOR_DATA_B
        USE MET_DATA
        IMPLICIT NONE
!
!
!
! *** ARGUMENTS
!
! N2O5->NO3 rxn probability
        REAL :: gamma
        REAL :: gammab
! Synchronization time step
        REAL, INTENT(IN) :: dt
!
!
! *** PARAMETERS
!
! molecular diffusivity
! of N2O5 at 101325 Pa
! and 273.15 K [m2/sec]
        REAL, PARAMETER :: std_diff_n2o5=0.1e-4
! g/kg unit conversion
        REAL, PARAMETER :: gpkg=1.0e+03
!
!
! *** LOCAL VARIABLES
!
! *** chemical species concentrations
!
! gas-phase nitric acid [ug/m3]
        REAL :: ghno3
        REAL :: ghno3b
! gas-phase dinitrogen pentoxide [ug/m3]
        REAL :: gn2o5
        REAL :: gn2o5b
! gas-phase NO2 [ug/m3]
        REAL :: gno2
        REAL :: gno2b
! gas-phase HONO [ug/m3]
        REAL :: ghono
        REAL :: ghonob
!
! *** 2nd and 3rd moments before equilibration (without H2O)
!
        REAL :: old_m3_i, old_m3_j
        REAL :: old_m3_ib, old_m3_jb
        REAL :: old_m2_i, old_m2_j
        REAL :: old_m2_ib, old_m2_jb
!
! *** variables for N2O5 + H2O -> 2 HNO3 conversion
!
! M3 before equilibration w.H2O
        REAL :: wet_m3_i, wet_m3_j
        REAL :: wet_m3_ib, wet_m3_jb
! M2 before equilibration w.H2O
        REAL :: wet_m2_i, wet_m2_j
        REAL :: wet_m2_ib, wet_m2_jb
! Initial median diameter w.H2O
        REAL :: dg_at_wet, dg_ac_wet
        REAL :: dg_at_wetb, dg_ac_wetb
! Initial effective diameter w.H2O
        REAL :: de_at_wet, de_ac_wet
        REAL :: de_at_wetb, de_ac_wetb
! modal factors to calculate KN2O5
        REAL :: xxf_at, xxf_ac
        REAL :: xxf_atb, xxf_acb
! molecular velocity (m/s)
        REAL :: cbar
! ambient molecular diffusivity [m2/s]
        REAL :: diff_n2o5
! function to compute GAMMA
        REAL :: N2O5PROB
! pseudo-first order rate constant
        REAL :: kn2o5
        REAL :: kn2o5b
! fraction of N2O5 left after chemical rxn
        REAL :: expdt_n2o5
        REAL :: expdt_n2o5b
!
! *** saved variables for conversion
! converts ug -> mol
        REAL, SAVE :: faerno2
        REAL, SAVE :: faerno2b
! converts ug -> mol
        REAL, SAVE :: faern2o5
        REAL, SAVE :: faern2o5b
! converts mol -> ug
        REAL, SAVE :: dfhno3
        REAL, SAVE :: dfhno3b
! converts mol -> ug
        REAL, SAVE :: dfhono
        REAL, SAVE :: dfhonob
!
! *** variables for 2 NO2 + H2O -> HONO + HNO3 conversion
!
! pseudo-first order rate constant
        REAL :: kno2
        REAL :: kno2b
! fraction of NO2 left after chemical rxn
        REAL :: expdt_no2
        REAL :: expdt_no2b
! aerosol surface area (m**2/m**3)
        REAL :: totsurfa
        REAL :: totsurfab
!
! *** first time switch
        LOGICAL, SAVE :: firstime=.true.
        INTEGER :: branch
        REAL :: temp3
        REAL :: temp2
        REAL :: temp1
        REAL :: temp0
        REAL :: temp13b
        INTRINSIC EXP
        INTRINSIC MAX
        REAL :: temp3b
        REAL :: temp14
        REAL :: temp13
        REAL :: temp12
        REAL :: temp11
        REAL :: temp10
        REAL :: temp15b
        REAL :: tempb
        REAL :: temp5b
        INTRINSIC LOG
        REAL :: temp14b
        REAL :: temp1b
        INTRINSIC SQRT
        REAL :: temp
        REAL :: temp15b2
        REAL :: temp15b1
        REAL :: temp15b0
        REAL :: temp9
        REAL :: temp8
        REAL :: temp7
        REAL :: temp6
        REAL :: temp5
        REAL :: temp4
! first time condition
!
!
!-----------------------------------------------------------------------
! *** compute only on first pass
!
        IF (firstime) THEN
          faerno2 = 1.0e-6/precursor_mw(no2_idx)
          faern2o5 = 1.0e-6/precursor_mw(n2o5_idx)
          dfhono = precursor_mw(hono_idx)/1.0e-6
          dfhno3 = precursor_mw(hno3_idx)/1.0e-6
        END IF
!
! *** fetch vapor-phase concentrations [ug/m3]
!
        ghno3 = precursor_conc(hno3_idx)
        gn2o5 = precursor_conc(n2o5_idx)
        gno2 = precursor_conc(no2_idx)
        ghono = precursor_conc(hono_idx)
!
! *** set up variables needed for calculating KN2O5
!
! *** capture values of "dry" 2nd and 3rd moments before equilibration
!     the folowing code assumes that GETPAR has been called with
!     M3_WET_FLAG set to .FALSE. and that the 2nd and 3rd moments have
!     been adjusted for the new SOA.
!
        old_m3_i = moment3_conc(1)
        old_m3_j = moment3_conc(2)
        old_m2_i = moment2_conc(1)
        old_m2_j = moment2_conc(2)
! *** compute GAMMA as function of TEMP, RH, & particle composition
!     Note: the last argument to this function can be changed to use
!     a different parameterization of GAMMA.
!
        gamma = N2O5PROB(airtemp, airrh, 0)
!
! *** calculate molecular speed (m/s) using Eq 4 of Pleim et al (1995)
!
        cbar = SQRT(8.0*rgasuniv*airtemp*gpkg/(pi*precursor_mw(n2o5_idx)))
!
! *** correct molecular diffusivity for ambient conditions
!
        diff_n2o5 = std_diff_n2o5*(airtemp/stdtemp)**1.75*(stdatmpa/airprs)
!
! *** estimate the "wet third moments" by adding aerosol water
!      Note: this is the H2O concentration from previous time step
!
        wet_m3_i = old_m3_i + h2ofac*aerospc_conc(ah2o_idx, 1)
        wet_m3_j = old_m3_j + h2ofac*aerospc_conc(ah2o_idx, 2)
!
! *** calculate "wet second moment" assuming that H2O does not
!     affect the geometric standard deviation
!
        wet_m2_i = old_m2_i*(wet_m3_i/old_m3_i)**(2.0/3.0)
        wet_m2_j = old_m2_j*(wet_m3_j/old_m3_j)**(2.0/3.0)
!
! *** calculate "wet" geometric mean (same as median) diameters
!
        dg_at_wet = aeromode_diam(1)*SQRT(wet_m2_i/old_m2_i)
        dg_ac_wet = aeromode_diam(2)*SQRT(wet_m2_j/old_m2_j)
!
! *** calculate effective diameters using Eq 3 of Pleim et al (1995)
!
        de_at_wet = dg_at_wet*EXP(1.5*LOG(EXP(aeromode_sdev(1)))**2.0)
        de_ac_wet = dg_ac_wet*EXP(1.5*LOG(EXP(aeromode_sdev(2)))**2.0)
!
! *** calculate pseudo-first order rate constant using Eq 2 of
!     Pleim et al (1995)
!
        xxf_at = wet_m2_i/(4.0+0.5*de_at_wet*gamma*cbar/diff_n2o5)
        xxf_ac = wet_m2_j/(4.0+0.5*de_ac_wet*gamma*cbar/diff_n2o5)
        kn2o5 = gamma*cbar*pi*(xxf_at+xxf_ac)
!
! *** calculate fraction of N2O5 remaining after chemical reaction
!
        expdt_n2o5 = EXP(-(kn2o5*dt))
!
! *** set up variables needed for calculating KNO2
!
! *** calculate aerosol surface area
!
        totsurfa = (wet_m2_i+wet_m2_j)*pi
        IF (0.0 .LT. 5.0e-5*totsurfa) THEN
          kno2 = 5.0e-5*totsurfa
          CALL PUSHINTEGER4(1)
        ELSE
          kno2 = 0.0
          CALL PUSHINTEGER4(0)
        END IF
!
! *** calculate fraction of NO2 remaining after chemical reaction
!
        expdt_no2 = EXP(-(2.0*kno2*dt))
!
! *** compute new gas-phase concs after heterogeneous reactions occur
!
! *** adjust nitrous acid for contribution from NO2
!
        ghono = ghono + 0.5*gno2*faerno2*dfhono*(1.0-expdt_no2)
!
! *** adjust nitric acid for contributions from N2O5 and NO2
!
        ghno3 = ghno3 + 2.0*gn2o5*faern2o5*dfhno3*(1.0-expdt_n2o5) + 0.5*gno2*
     +    faerno2*dfhno3*(1.0-expdt_no2)
        CALL PUSHREAL4(gn2o5)
!
! *** adjust N2O5 for heterogeneous loss
!
        gn2o5 = gn2o5*expdt_n2o5
        CALL PUSHREAL4(gno2)
!
! *** adjust NO2 for heterogeneous loss
!
        gno2 = gno2*expdt_no2
        IF (ghno3 .LT. conmin) THEN
          CALL PUSHINTEGER4(1)
        ELSE
          CALL PUSHINTEGER4(0)
        END IF
        IF (gn2o5 .LT. conmin) THEN
          CALL PUSHINTEGER4(1)
        ELSE
          CALL PUSHINTEGER4(0)
        END IF
        IF (gno2 .LT. conmin) THEN
          CALL PUSHINTEGER4(1)
        ELSE
          CALL PUSHINTEGER4(0)
        END IF
        IF (ghono .LT. conmin) THEN
          precursor_concb(hono_idx) = 0.0
          ghonob = 0.0
        ELSE
          ghonob = precursor_concb(hono_idx)
          precursor_concb(hono_idx) = 0.0
        END IF
        CALL POPINTEGER4(branch)
        IF (branch .LT. 1) THEN
          gno2b = precursor_concb(no2_idx)
          precursor_concb(no2_idx) = 0.0
        ELSE
          precursor_concb(no2_idx) = 0.0
          gno2b = 0.0
        END IF
        CALL POPINTEGER4(branch)
        IF (branch .LT. 1) THEN
          gn2o5b = precursor_concb(n2o5_idx)
          precursor_concb(n2o5_idx) = 0.0
        ELSE
          precursor_concb(n2o5_idx) = 0.0
          gn2o5b = 0.0
        END IF
        CALL POPINTEGER4(branch)
        IF (branch .LT. 1) THEN
          ghno3b = precursor_concb(hno3_idx)
          precursor_concb(hno3_idx) = 0.0
        ELSE
          precursor_concb(hno3_idx) = 0.0
          ghno3b = 0.0
        END IF
        CALL POPREAL4(gno2)
        temp15b0 = faerno2*0.5*dfhno3*ghno3b
        temp15b1 = faerno2*0.5*dfhono*ghonob
        expdt_no2b = gno2*gno2b - gno2*temp15b1 - gno2*temp15b0
        gno2b = (1.0-expdt_no2)*temp15b0 + (1.0-expdt_no2)*temp15b1 +
     +    expdt_no2*gno2b
        CALL POPREAL4(gn2o5)
        temp15b2 = faern2o5*2.0*dfhno3*ghno3b
        expdt_n2o5b = gn2o5*gn2o5b - gn2o5*temp15b2
        gn2o5b = (1.0-expdt_n2o5)*temp15b2 + expdt_n2o5*gn2o5b
        kno2b = -(EXP(-(dt*2.0*kno2))*dt*2.0*expdt_no2b)
        CALL POPINTEGER4(branch)
        IF (branch .LT. 1) THEN
          totsurfab = 0.0
        ELSE
          totsurfab = 5.0e-5*kno2b
        END IF
        kn2o5b = -(EXP(-(dt*kn2o5))*dt*expdt_n2o5b)
        temp15b = cbar*pi*kn2o5b
        xxf_atb = gamma*temp15b
        temp13 = 0.5*cbar*de_at_wet*gamma/diff_n2o5 + 4.0
        temp13b = -(wet_m2_i*cbar*0.5*xxf_atb/(temp13**2*diff_n2o5))
        de_at_wetb = gamma*temp13b
        temp9 = EXP(aeromode_sdev(1))
        temp8 = LOG(temp9)
        temp7 = 1.5*temp8**2.0
        dg_at_wetb = EXP(temp7)*de_at_wetb
        temp3 = wet_m2_i/old_m2_i
        temp4 = SQRT(temp3)
        IF (temp3 .EQ. 0.0) THEN
          temp3b = 0.0
        ELSE
          temp3b = aeromode_diam(1)*dg_at_wetb/(2.0*temp4*old_m2_i)
        END IF
        wet_m2_ib = xxf_atb/temp13 + temp3b + pi*totsurfab
        xxf_acb = gamma*temp15b
        temp14 = 0.5*cbar*de_ac_wet*gamma/diff_n2o5 + 4.0
        temp14b = -(wet_m2_j*cbar*0.5*xxf_acb/(temp14**2*diff_n2o5))
        de_ac_wetb = gamma*temp14b
        temp12 = EXP(aeromode_sdev(2))
        temp11 = LOG(temp12)
        temp10 = 1.5*temp11**2.0
        dg_ac_wetb = EXP(temp10)*de_ac_wetb
        temp5 = wet_m2_j/old_m2_j
        temp6 = SQRT(temp5)
        IF (temp5 .EQ. 0.0) THEN
          temp5b = 0.0
        ELSE
          temp5b = aeromode_diam(2)*dg_ac_wetb/(2.0*temp6*old_m2_j)
        END IF
        wet_m2_jb = xxf_acb/temp14 + temp5b + pi*totsurfab
        gammab = de_ac_wet*temp14b + de_at_wet*temp13b + (xxf_at+xxf_ac)*
     +    temp15b
        aeromode_sdevb(2) = aeromode_sdevb(2) + dg_ac_wet*EXP(temp10)*1.5*2.0*
     +    temp11*EXP(aeromode_sdev(2))*de_ac_wetb/temp12
        aeromode_sdevb(1) = aeromode_sdevb(1) + dg_at_wet*EXP(temp7)*1.5*2.0*
     +    temp8*EXP(aeromode_sdev(1))*de_at_wetb/temp9
        aeromode_diamb(2) = aeromode_diamb(2) + temp6*dg_ac_wetb
        temp2 = 2.0/3.0
        temp1 = wet_m3_j/old_m3_j
        old_m2_jb = temp1**temp2*wet_m2_jb - temp5*temp5b
        aeromode_diamb(1) = aeromode_diamb(1) + temp4*dg_at_wetb
        temp0 = 2.0/3.0
        temp = wet_m3_i/old_m3_i
        old_m2_ib = temp**temp0*wet_m2_ib - temp3*temp3b
        IF (temp1 .LE. 0.0 .AND. (temp2 .EQ. 0.0 .OR. temp2 .NE. INT(temp2)))
     +  THEN
          temp1b = 0.0
        ELSE
          temp1b = old_m2_j*temp2*temp1**(temp2-1)*wet_m2_jb/old_m3_j
        END IF
        wet_m3_jb = temp1b
        old_m3_jb = wet_m3_jb - temp1*temp1b
        IF (temp .LE. 0.0 .AND. (temp0 .EQ. 0.0 .OR. temp0 .NE. INT(temp0)))
     +  THEN
          tempb = 0.0
        ELSE
          tempb = old_m2_i*temp0*temp**(temp0-1)*wet_m2_ib/old_m3_i
        END IF
        wet_m3_ib = tempb
        old_m3_ib = wet_m3_ib - temp*tempb
        aerospc_concb(ah2o_idx, 2) = aerospc_concb(ah2o_idx, 2) + h2ofac*
     +    wet_m3_jb
        aerospc_concb(ah2o_idx, 1) = aerospc_concb(ah2o_idx, 1) + h2ofac*
     +    wet_m3_ib
        CALL N2O5PROB_B(airtemp, airrh, 0, gammab)
        moment2_concb(2) = moment2_concb(2) + old_m2_jb
        moment2_concb(1) = moment2_concb(1) + old_m2_ib
        moment3_concb(2) = moment3_concb(2) + old_m3_jb
        moment3_concb(1) = moment3_concb(1) + old_m3_ib
        precursor_concb(hono_idx) = precursor_concb(hono_idx) + ghonob
        precursor_concb(no2_idx) = precursor_concb(no2_idx) + gno2b
        precursor_concb(n2o5_idx) = precursor_concb(n2o5_idx) + gn2o5b
        precursor_concb(hno3_idx) = precursor_concb(hno3_idx) + ghno3b

        dfhonob = 0.0
        dfhno3b = 0.0
        faern2o5b = 0.0
        faerno2b = 0.0
      END SUBROUTINE HETCHEM_B

CCCCCC*CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.4 (r3376) - 10 Feb 2010 17:51
!
!  Differentiation of n2o5prob in reverse (adjoint) mode:
!   gradient     of useful results: aerospc_conc n2o5prob
!   with respect to varying inputs: aerospc_conc
!
! //////////////////////////////////////////////////////////////////////
!  FUNCTION N2O5PROB calculates the N2O5 heterogeneous reaction
!    probability, which is the fraction of collisions between a gaseous
!    N2O5 molecule and a particle surface that leads to nitrate
!    production.  In the literature, this probability is commonly
!    referred to with the Greek letter, GAMMA.  To avoid conflicts with
!    the intrinsic GAMMA function on some compilers, we refer to the
!    reaction probability as N2O5PROB in this function.
!      A variety of parameterizations of N2O5PROB are available in this
!    function.  Users may select among the different parameterizations
!    by changing the input argument, GPARAM.  This argument may take on
!    the following values (see code for further details):
!     1. Constant value of 0.1 based on Dentener & Crutzen (1993)
!     2. Function of particle SO4 and NO3, based on Riemer et al. (2003)
!     3. Function of RH, Temp, and particle composition, based on a
!        combination of parameterizations by Evans & Jacob (2005) and
!        Riemer et al. (2003)
!    If GPARAM matches none of the above values, the default calculation
!    of N2O5PROB is a function of RH, T, particle composition, and phase
!    state, based on the parameterization by Davis et al. (2008).
!
!  KEY SUBROUTINES CALLED: none
!
!  KEY FUNCTIONS CALLED: CRHB, IRHX
!
!  REVISION HISTORY:
!     First version was coded in November 2007 by Dr. Prakash Bhave
!     using excerpts of the HETCHEM subroutine, which contained only
!     one option for computing N2O5PROB (i.e., GPARAM = 3).
!
! PVB 11/03/07 Removed code that sets N2O5PROB to zero when RH < 1%.
!
! PVB 11/05/07 Corrected GPARAM = 3 option to fix the typographical
!              error in the paper by Evans & Jacob (2005), which was
!              found by Dr. Jerry Davis.
!
! PVB 04/11/08 Updated formulas for LAM1 & LAM2 based on revised paper
!              by Davis et al. (2008).  Added APNDX flag so users may
!              switch between base parameterization and the alternative
!              discussed in Appendix A by Davis et al.  Set default
!              parameterization to match equations in Appendix A.
!              Reduced all regression coefficients by one decimal place
!              for consistency with revised paper.
!
! JTK 04/17/08 Moved molar mass to AERO_INFO.f
!
! SH  12/08/09 Use new Fortran modules (aero_data, met_data) in lieu of
!              CBLK array and AERO_INFO module
!
!  REFERENCES:
!   1. Dentener, F.J. and P.J. Crutzen, Reaction of N2O5 on tropospheric
!      aerosols: Impact of global distributions of NOx, O3, and OH.
!      J. Geophys. Res., Vol 98, 7149-7163, 1993.
!
!   2. Riemer, N., H. Vogel, B. Vogel, B. Schell, I. Ackermann, C.
!      Kessler, and H. Hass, Impact of the heterogeneous hydrolysis
!      of N2O5 on chemistry of nitrate aerosol formation in the lower
!      troposphere under photosmog conditions.  J. Geophys. Res., Vol
!      108, No D4, 4144, doi:10.1029/2002JD002436, 2003.
!
!   3. Evans, M.J. and D.J. Jacob, Impact of new laboratory studies of
!      N2O5 hydrolysis on global model budgets of tropospheric nitrogen
!      oxides, ozone, and OH.  Geophys. Res. Lett., 32, L09813,
!      doi:10.1029/2005GL022469, 2005.
!
!   4. Davis, J.M., P.V. Bhave, and K.M. Foley, Parameterization of N2O5
!      reaction probabilities on the surface of particles containing
!      ammonium, sulfate, and nitrate.  Atmos. Chem. Phys., 2008, in
!      press.
!
!   5. Mentel, T.F., M. Sohn, and A. Wahner, Nitrate effect in the
!      heterogeneous hydrolysis of dinitrogen pentoxide on aqueous
!      aerosols.  Phys. Chem. Chem. Phys., 1, 5451-5457, 1999.
!
      SUBROUTINE N2O5PROB_B(temp, rh, gparam, n2o5probb)
        USE AERO_DATA_B
        USE MET_DATA
        IMPLICIT NONE
!
!
! *** ARGUMENTS
!
! Air temperature [ K ]
        REAL, INTENT(IN) :: temp
! Fractional relative humidity
        REAL, INTENT(IN) :: rh
! switch to select among
!  parameterizations
        INTEGER, INTENT(IN) :: gparam
!
! *** PARAMETERS
!
! *** switch for alternative parameterization of LAM1 & LAM2
!     when APNDX = .TRUE. (default), Eqs A1-A2 are used for reaction
!     probability on aqueous sulfate particles.  Alternatively, set
!     APNDX = .FALSE. to use Eqs 4-5.
!
        LOGICAL, PARAMETER :: apndx=.true.
!
! *** LOCAL VARIABLES
! *** chemical species concentrations [ug/m3]
!
! i+j mode ammonium
        REAL :: anh4
        REAL :: anh4b
! i+j mode nitrate
        REAL :: ano3
        REAL :: ano3b
! i+j mode sulfate
        REAL :: aso4
        REAL :: aso4b
!
! *** variables for computing N2O5PROB when GPARAM = 2 or 3
!
! aerosol mass ratio of SO4/(SO4+NO3)
        REAL :: fracso4
        REAL :: fracso4b
! upper limit of rxn prob
        REAL :: gamma1
! lower limit of rxn prob
        REAL :: gamma2
! RH-dependent parameter to compute GAMMA1
        REAL :: alpha
! TEMP-dependent parameter to compute GAMMA1
        REAL :: beta
!
! *** variables for default parameterization of N2O5PROB
!
! function to determine if RH is below CRH
        LOGICAL :: CRHB
! true if ambient RH < CRH, false otherwise
        LOGICAL :: crystal
! function to determine whether RH exceeds IRH
        LOGICAL :: IRHX
! true if ambient RH > IRH, false otherwise
        LOGICAL :: frozen
! particle-phase nitrate [micromoles/m3]
        REAL :: nno3
        REAL :: nno3b
! particle-phase sulfate [micromoles/m3]
        REAL :: nso4
        REAL :: nso4b
! particle-phase ammonium [micromoles/m3]
        REAL :: nnh4
        REAL :: nnh4b
! particle-phase anions [micromoles/m3]
        REAL :: nani
        REAL :: nanib
! mole fraction of ammonium bisulfate
        REAL :: x1
        REAL :: x1b
! mole fraction of ammonium sulfate
        REAL :: x2
        REAL :: x2b
! mole fraction of ammonium nitrate
        REAL :: x3
        REAL :: x3b
! logit transformation of N2O5PROB on
        REAL :: lam1
!   aqueous NH4HSO4 [LAM1], aqueous (NH4)2SO4
        REAL :: lam2
!   [LAM2], aqueous NH4NO3 [LAM3], and dry
        REAL :: lam3
!   sulfate-containing particles [LAMD]
        REAL :: lamd
! reaction probability on aqueous NH4HSO4
        REAL :: gam1
!    "          "      "     "    (NH4)2SO4
        REAL :: gam2
!    "          "      "     "    NH4NO3
        REAL :: gam3
!    "          "      " dry sulfate particles
        REAL :: gamd
! temperature threshold variables
        REAL :: t293, t291
! RH threshold variable
        REAL :: rh46
!
! *** statement function for inverting the logit transformation given
!     in Eq 7 by Davis et al (2008)
!
! statement function
        REAL :: logitinv
! dummy argument for LOGITINV
        REAL :: xx
        INTEGER :: branch
        REAL :: n2o5probb
        REAL :: n2o5prob
        REAL :: y1b
        INTRINSIC EXP
        REAL :: min1
        REAL :: temp0b
        INTRINSIC MAX
        REAL :: x7
        REAL :: x6
        REAL :: x5
        REAL :: x4
        REAL :: temp0b0
        INTRINSIC MIN
        REAL :: y1
!
!.......................................................................
!
! *** retrieve particle-phase ammonium, nitrate, and sulfate [ug/m3]
!
        anh4 = aerospc_conc(anh4_idx, 1) + aerospc_conc(anh4_idx, 2)
        ano3 = aerospc_conc(ano3_idx, 1) + aerospc_conc(ano3_idx, 2)
        aso4 = aerospc_conc(aso4_idx, 1) + aerospc_conc(aso4_idx, 2)
!
! *** User Option: GPARAM = 1
!     Dentener and Crutzen (1993) recommended a constant value of
!     N2O5PROB = 0.1, which was used in CMAQ prior to ver4.3.  In more
!     recent literature, this value has been recognized as an upper
!     estimate of N2O5PROB so it should not be used for routine
!     simulations.  It is included here only to facilitate sensitivity
!     studies by CMAQ model users.
!
        IF (gparam .EQ. 1) THEN
          anh4b = 0.0
          ano3b = 0.0
          aso4b = 0.0
        ELSE
!
! *** User Options: GPARAM = 2 and 3
!     These options both employ Eqs 2 and 3 by Riemer et al (2003), in
!     which N2O5PROB varies according to the particle-phase sulfate and
!     nitrate concentrations.  In both options, the NO3 effect (i.e.,
!     GAMMA1/GAMMA2) is assumed to be a factor of 10 based on Mentel et
!     al (1999) and Riemer et al (2003).
!      - When GPARAM = 2, upper limit of N2O5PROB is fixed at 0.02.
!        This was the default setting in CMAQ ver4.3 through ver4.5.1.
!      - When GPARAM = 3, upper limit of N2O5PROB is a function of
!        ambient TEMP & RH based on the "Sulfate" equation in Table 1
!        by Evans & Jacob (2005).  This was the default setting in CMAQ
!        ver4.6.  After that release, a typographical error was found
!        in the published equation of Evans & Jacob (2005) so this code
!        has been corrected accordingly.
!
          IF (gparam .EQ. 2) THEN
!
            gamma1 = 0.02
!
          ELSE IF (gparam .EQ. 3) THEN
!
!        In this function, RH is in fractional units whereas the
!        published equation by Evans&Jacob refers to RH as a percentage.
!
            alpha = 2.79e-4 + rh*(1.3e-2+rh*(-3.43e-2+7.52e-2*rh))
!
!        To fix the typographical error by Evans & Jacob (2005), the
!        sign of BETA has been switched in this code.
!
            IF (temp .LT. 282.0) THEN
! (10.0 ** 0.48) * ALPHA
              gamma1 = 3.0199517*alpha
            ELSE
              beta = 0.04*(294.0-temp)
              gamma1 = alpha*10.0**beta
            END IF
          END IF
!
!
          IF (gparam .EQ. 2 .OR. gparam .EQ. 3) THEN
!
            IF (ano3 .GT. 0.0) THEN
              CALL PUSHINTEGER4(0)
            ELSE
              CALL PUSHINTEGER4(1)
            END IF
!
            gamma2 = 0.1*gamma1
!
            fracso4b = (gamma1-gamma2)*n2o5probb
            CALL POPINTEGER4(branch)
            IF (branch .LT. 1) THEN
              temp0b = fracso4b/(aso4+ano3)
              temp0b0 = -(aso4*temp0b/(aso4+ano3))
              aso4b = temp0b0 + temp0b
              ano3b = temp0b0
            ELSE
              ano3b = 0.0
              aso4b = 0.0
            END IF
            anh4b = 0.0
          ELSE
!
! *** Default setting in current version of CMAQ:
!     This code implements the paramaterization given in Eq 15 by Davis
!     et al (2008), in which N2O5PROB is a function of RH, TEMP,
!     particle composition, and phase state.  Note: In this function, RH
!     is in fractional units whereas the published equations refer to RH
!     as a percentage.
!
! *** Check whether the ambient RH is below the crystallization RH for
!     the given inorganic particle composition.
!
            crystal = CRHB(rh, .true.)
!
! *** Check whether the ambient RH exceeds the RH of ice formation.
!
            frozen = IRHX(temp, rh)
!
! *** Set N2O5PROB to constant value if particles contain ice, based on
!     Eq 14 by Davis et al (2008).
!
            IF (frozen) THEN
              anh4b = 0.0
              ano3b = 0.0
              aso4b = 0.0
            ELSE
              nno3 = ano3/aerospc_mw(ano3_idx)
              nso4 = aso4/aerospc_mw(aso4_idx)
              nnh4 = anh4/aerospc_mw(anh4_idx)
              nani = nno3 + nso4
              x3 = nno3/nani
              IF (1.0 - x3 .GT. nnh4/nani - 1.0) THEN
                y1 = nnh4/nani - 1.0
                CALL PUSHINTEGER4(1)
              ELSE
                y1 = 1.0 - x3
                CALL PUSHINTEGER4(0)
              END IF
              IF (0.0 .LT. y1) THEN
                CALL PUSHINTEGER4(0)
              ELSE
                CALL PUSHINTEGER4(1)
              END IF
!
! *** Compute N2O5PROB on pure NH4NO3 particles using Eqs 6 and 8 by
!     Davis et al (2008).
!
! Eq 6
              lam3 = -8.10774 + 4.902*rh
              x4 = 1.0/(1.0+EXP(-lam3))
              IF (x4 .GT. 0.0154) THEN
                gam3 = 0.0154
              ELSE
                gam3 = x4
              END IF
!
! *** Compute N2O5PROB on dry particles using Eqs 9, 10, and 13 by
!     Davis et al (2008).
!
              IF (crystal) THEN
                IF (0.0 .LT. temp - 293.0) THEN
                  t293 = temp - 293.0
                ELSE
                  t293 = 0.0
                END IF
! Eq 9
                lamd = -6.13376 + 3.592*rh - 0.19688*t293
                x5 = 1.0/(1.0+EXP(-lamd))
                IF (x5 .GT. 0.0124) THEN
                  gamd = 0.0124
                ELSE
                  gamd = x5
                END IF
                IF (gamd .GT. gam3) THEN
                  min1 = gam3
                ELSE
                  min1 = gamd
                END IF
                x1b = gamd*n2o5probb
                x2b = gamd*n2o5probb
                x3b = min1*n2o5probb
              ELSE
                IF (0.0 .LT. temp - 291.0) THEN
                  t291 = temp - 291.0
                ELSE
                  t291 = 0.0
                END IF
                IF (apndx) THEN
                  IF (0.0 .GT. rh - 0.46) THEN
                    rh46 = rh - 0.46
                  ELSE
                    rh46 = 0.0
                  END IF
! Eq A2
                  lam2 = -3.64849 + 9.553*rh46
! Eqs A1 & A2
                  lam1 = lam2 + 0.97579 - 0.20427*t291
                ELSE
! Eq 4
                  lam1 = -4.10612 + 2.386*rh - 0.23771*t291
! Eqs 4 & 5
                  lam2 = lam1 - 0.80570 + 0.10225*t291
                END IF
                x6 = 1.0/(1.0+EXP(-lam1))
                IF (x6 .GT. 0.08585) THEN
                  gam1 = 0.08585
                ELSE
                  gam1 = x6
                END IF
                x7 = 1.0/(1.0+EXP(-lam2))
                IF (x7 .GT. 0.053) THEN
                  gam2 = 0.053
                ELSE
                  gam2 = x7
                END IF
                x1b = gam1*n2o5probb
                x2b = gam2*n2o5probb
                x3b = gam3*n2o5probb
              END IF
              x3b = x3b - x1b
              x2b = x2b - x1b
              CALL POPINTEGER4(branch)
              IF (branch .LT. 1) THEN
                y1b = x2b
              ELSE
                y1b = 0.0
              END IF
              CALL POPINTEGER4(branch)
              IF (branch .LT. 1) THEN
                x3b = x3b - y1b
                nanib = 0.0
                nnh4b = 0.0
              ELSE
                nnh4b = y1b/nani
                nanib = -(nnh4*y1b/nani**2)
              END IF
              nanib = nanib - nno3*x3b/nani**2
              nno3b = nanib + x3b/nani
              nso4b = nanib
              anh4b = nnh4b/aerospc_mw(anh4_idx)
              aso4b = nso4b/aerospc_mw(aso4_idx)
              ano3b = nno3b/aerospc_mw(ano3_idx)
            END IF
          END IF
        END IF
        aerospc_concb(aso4_idx, 1) = aerospc_concb(aso4_idx, 1) + aso4b
        aerospc_concb(aso4_idx, 2) = aerospc_concb(aso4_idx, 2) + aso4b
        aerospc_concb(ano3_idx, 1) = aerospc_concb(ano3_idx, 1) + ano3b
        aerospc_concb(ano3_idx, 2) = aerospc_concb(ano3_idx, 2) + ano3b
        aerospc_concb(anh4_idx, 1) = aerospc_concb(anh4_idx, 1) + anh4b
        aerospc_concb(anh4_idx, 2) = aerospc_concb(anh4_idx, 2) + anh4b
      END SUBROUTINE N2O5PROB_B

