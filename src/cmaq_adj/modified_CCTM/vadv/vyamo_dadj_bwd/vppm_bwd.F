C                           DISCLAIMER
C
C   This file was generated by TAMC version 5.3.2
C
C   THE AUTHOR DOES NOT MAKE  ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES
C   ANY LEGAL LIABILITY OR  RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
C   OR USEFULNESS  OF ANY INFORMATION OR PROCESS  DISCLOSED, OR REPRESENTS
C   THAT ITS USE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
C
C   THIS CODE IS FOR NON-PROFIT-ORIENTED ACADEMIC RESEARCH AND EDUCATION
C   ONLY.  ANY COMMERCIAL OR OTHER PROFIT-ORIENTED USE OR  EVALUATION IS
C   STRICTLY  FORBIDDEN.  PASSING  THIS CODE  TO  ANY THIRD  PARTY IS  NOT
C   ALLOWED.
C
C   FOR COMMERCIAL OR  OTHER PROFIT-ORIENTED APPLICATIONS PLEASE CONTACT
C   info@FastOpt.com
C
      subroutine ppm_bwd( ni, ds, cn, cn_bwd, cr_bwd, cl_bwd, dc_bwd, c6_bwd )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.3.2    **
C***************************************************************
C***************************************************************

C Revision History:
C   Sep 2010 by Peter Percell at UH-IMAQS: created for adjoint/4dvar

C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C Includes:
      INCLUDE SUBST_IOPARMS     ! I/O parameters definitions

C==============================================
C define arguments
C==============================================
      integer ni
      real c6_bwd(ni)
      real cl_bwd(ni)
      real cn(ni)
      real cn_bwd(ni)
      real cr_bwd(ni)
      real dc_bwd(ni)
      real ds(ni)

C==============================================
C define local variables
C==============================================
      logical, save :: firstime =  .true. 
      character*(120)  :: xmsg = ' '

      real, allocatable, save :: alpha ( : )
      real, allocatable, save :: chi   ( : )
      real, allocatable, save :: psi   ( : )
      real, allocatable, save :: mu    ( : )
      real, allocatable, save :: nu    ( : )
      real, allocatable, save :: lambda( : )

      real a
      integer allocstat
      real b
      real beta
      real c
      real c6(ni)
      real cl(ni)
      real cm(1:ni+1)
      real cm_bwd(1:ni+1)
      real cr(ni)
      real dc(ni)
      integer i

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      cm_bwd(:) = 0.

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (firstime) then
        firstime = .false.

        allocate ( alpha ( 2:ni-1 ),
     &             chi   ( 2:ni-1 ),
     &             psi   ( 2:ni-1 ),
     &             mu    ( 2:ni-2 ),
     &             nu    ( 2:ni-2 ),
     &             lambda( 2:ni-2 ), stat = allocstat )
        if ( allocstat .ne. 0 ) then
          xmsg = 'failure allocating alpha, chi, psi, mu, nu, lambda'
          call m3exit( 'vppm_bwd', 0, 0, xmsg, xstat1 )
        end if

        do i = 2, ni-1
          alpha(i) = ds(i)+ds(i+1)
          beta = ds(i-1)+ds(i)
          c = ds(i)/(beta+ds(i+1))
          chi(i) = c*(ds(i-1)+beta)/alpha(i)
          psi(i) = c*(alpha(i)+ds(i+1))/beta
        end do
        do i = 2, ni-2
          a = ds(i)/alpha(i)
          b = 2.*ds(i+1)/alpha(i)
          c = 1./(ds(i-1)+alpha(i)+ds(i+2))
          mu(i) = c*ds(i)*(ds(i-1)+ds(i))/(ds(i)+alpha(i))
          nu(i) = c*ds(i+1)*(ds(i+1)+ds(i+2))/(ds(i+1)+alpha(i))
          lambda(i) = a+mu(i)*b-2.*nu(i)*a
        end do
      endif
      cm(1) = cn(1)
      cm(2) = (ds(1)*cn(2)+ds(2)*cn(1))/(ds(1)+ds(2))
      cm(ni+1) = cn(ni)
      cm(ni) = (ds(ni-1)*cn(ni)+ds(ni)*cn(ni-1))/(ds(ni-1)+ds(ni))
      do i = 2, ni-1
        dc(i) = chi(i)*(cn(i+1)-cn(i))+psi(i)*(cn(i)-cn(i-1))
        if ((cn(i+1)-cn(i))*(cn(i)-cn(i-1)) .gt. 0.) then
          dc(i) = sign(1.,dc(i))*min(abs(dc(i)),2.*abs(cn(i+1)-cn(i)),2.*abs(cn(i)-cn(i-1)))
        else
          dc(i) = 0.
        endif
      end do
      do i = 2, ni-2
        cm(i+1) = cn(i)+lambda(i)*(cn(i+1)-cn(i))-mu(i)*dc(i+1)+nu(i)*dc(i)
      end do
      do i = 1, ni
        cr(i) = cm(i+1)
        cl(i) = cm(i)
        cl_bwd(i) = cl_bwd(i)-3*c6_bwd(i)
        cn_bwd(i) = cn_bwd(i)+6*c6_bwd(i)
        cr_bwd(i) = cr_bwd(i)-3*c6_bwd(i)
        c6_bwd(i) = 0.
        cl_bwd(i) = cl_bwd(i)-dc_bwd(i)
        cr_bwd(i) = cr_bwd(i)+dc_bwd(i)
        dc_bwd(i) = 0.
        if ((cr(i)-cn(i))*(cn(i)-cl(i)) .gt. 0.) then
          dc(i) = cr(i)-cl(i)
          c6(i) = 6.*(cn(i)-0.5*(cl(i)+cr(i)))
          if (dc(i)*c6(i) .gt. dc(i)*dc(i)) then
            cn_bwd(i) = cn_bwd(i)+3*cl_bwd(i)
            cr_bwd(i) = cr_bwd(i)-2*cl_bwd(i)
            cl_bwd(i) = 0.
          else if ((-(dc(i)*dc(i))) .gt. dc(i)*c6(i)) then
            cl_bwd(i) = cl_bwd(i)-2*cr_bwd(i)
            cn_bwd(i) = cn_bwd(i)+3*cr_bwd(i)
            cr_bwd(i) = 0.
          endif
          cl_bwd(i) = cl_bwd(i)-3*c6_bwd(i)
          cn_bwd(i) = cn_bwd(i)+6*c6_bwd(i)
          cr_bwd(i) = cr_bwd(i)-3*c6_bwd(i)
          c6_bwd(i) = 0.
          cl_bwd(i) = cl_bwd(i)-dc_bwd(i)
          cr_bwd(i) = cr_bwd(i)+dc_bwd(i)
          dc_bwd(i) = 0.
        else
          cn_bwd(i) = cn_bwd(i)+cr_bwd(i)
          cr_bwd(i) = 0.
          cn_bwd(i) = cn_bwd(i)+cl_bwd(i)
          cl_bwd(i) = 0.
        endif
        cm_bwd(i) = cm_bwd(i)+cl_bwd(i)
        cl_bwd(i) = 0.
        cm_bwd(i+1) = cm_bwd(i+1)+cr_bwd(i)
        cr_bwd(i) = 0.
      end do
      do i = 2, ni-2
        cn_bwd(i+1) = cn_bwd(i+1)+cm_bwd(i+1)*lambda(i)
        cn_bwd(i) = cn_bwd(i)+cm_bwd(i+1)*(1-lambda(i))
        dc_bwd(i+1) = dc_bwd(i+1)-cm_bwd(i+1)*mu(i)
        dc_bwd(i) = dc_bwd(i)+cm_bwd(i+1)*nu(i)
        cm_bwd(i+1) = 0.
      end do
      do i = 2, ni-1
        dc(i) = chi(i)*(cn(i+1)-cn(i))+psi(i)*(cn(i)-cn(i-1))
        if ((cn(i+1)-cn(i))*(cn(i)-cn(i-1)) .gt. 0.) then
          cn_bwd(i+1) = cn_bwd(i+1)+2.*dc_bwd(i)*(0.5-sign(0.5,2.*abs(cn(i+1)-cn(i))-abs(dc(i))))*sign(1.,cn(i+1)-cn(i))*sign(1.,
     $dc(i))
          cn_bwd(i) = cn_bwd(i)-2.*dc_bwd(i)*(0.5-sign(0.5,2.*abs(cn(i+1)-cn(i))-abs(dc(i))))*sign(1.,cn(i+1)-cn(i))*sign(1.,dc(i))
          dc_bwd(i) = dc_bwd(i)*(0.5+sign(0.5,2.*abs(cn(i+1)-cn(i))-abs(dc(i))))*sign(1.,dc(i))*sign(1.,dc(i))
        else
          dc_bwd(i) = 0.
        endif
        cn_bwd(i-1) = cn_bwd(i-1)-dc_bwd(i)*psi(i)
        cn_bwd(i+1) = cn_bwd(i+1)+dc_bwd(i)*chi(i)
        cn_bwd(i) = cn_bwd(i)+dc_bwd(i)*((-chi(i))+psi(i))
        dc_bwd(i) = 0.
      end do
      cn_bwd(ni-1) = cn_bwd(ni-1)+cm_bwd(ni)*(ds(ni)/(ds(ni-1)+ds(ni)))
      cn_bwd(ni) = cn_bwd(ni)+cm_bwd(ni)*(ds(ni-1)/(ds(ni-1)+ds(ni)))
      cm_bwd(ni) = 0.
      cn_bwd(ni) = cn_bwd(ni)+cm_bwd(ni+1)
      cm_bwd(ni+1) = 0.
      cn_bwd(2) = cn_bwd(2)+cm_bwd(2)*(ds(1)/(ds(1)+ds(2)))
      cn_bwd(1) = cn_bwd(1)+cm_bwd(2)*(ds(2)/(ds(1)+ds(2)))
      cm_bwd(2) = 0.
      cn_bwd(1) = cn_bwd(1)+cm_bwd(1)
      cm_bwd(1) = 0.

      end subroutine ppm_bwd


      subroutine vppm_bwd( ni, dt, ds, vel, con, con_bwd )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.3.2    **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      real two3rds
      parameter ( two3rds = 2./3. )

C==============================================
C define arguments
C==============================================
      integer ni
      real con(ni)
      real con_bwd(ni)
      real ds(ni)
      real dt
      real vel(ni+1)

C==============================================
C define local variables
C==============================================
      real c6_bwd(1:ni)
      real cl_bwd(1:ni)
      real cr_bwd(1:ni)
      real dc_bwd(1:ni)
      real fm_bwd(1:ni+1)
      real fp_bwd(0:ni)
      integer i
      real x
      real y

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      c6_bwd(:) = 0.
      cl_bwd(:) = 0.
      cr_bwd(:) = 0.
      dc_bwd(:) = 0.
      fm_bwd(:) = 0.
      fp_bwd(:) = 0.

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do i = 1, ni
        fm_bwd(i+1) = fm_bwd(i+1)+con_bwd(i)/ds(i)
        fm_bwd(i) = fm_bwd(i)-con_bwd(i)/ds(i)
        fp_bwd(i-1) = fp_bwd(i-1)+con_bwd(i)/ds(i)
        fp_bwd(i) = fp_bwd(i)-con_bwd(i)/ds(i)
      end do
      i = ni+1
      if (vel(i) .lt. 0.) then
        y = -(vel(i)*dt)
        con_bwd(i-1) = con_bwd(i-1)+fm_bwd(i)*y
        fm_bwd(i) = 0.
      endif
      do i = ni, 1, -1
        if (vel(i+1) .gt. 0.) then
          y = vel(i+1)*dt
          x = y/ds(i)
          c6_bwd(i) = c6_bwd(i)+0.5*fp_bwd(i)*y*x*(1.-two3rds*x)
          cr_bwd(i) = cr_bwd(i)+fp_bwd(i)*y
          dc_bwd(i) = dc_bwd(i)-0.5*fp_bwd(i)*y*x
          fp_bwd(i) = 0.
        endif
        if (vel(i) .lt. 0.) then
          y = -(vel(i)*dt)
          x = y/ds(i)
          c6_bwd(i) = c6_bwd(i)+0.5*fm_bwd(i)*y*x*(1.-two3rds*x)
          cl_bwd(i) = cl_bwd(i)+fm_bwd(i)*y
          dc_bwd(i) = dc_bwd(i)+0.5*fm_bwd(i)*y*x
          fm_bwd(i) = 0.
        endif
      end do
      call ppm_bwd( ni,ds,con,con_bwd,cr_bwd,cl_bwd,dc_bwd,c6_bwd )

      end subroutine vppm_bwd


